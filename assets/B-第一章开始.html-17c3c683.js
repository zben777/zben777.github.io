import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as r,d as u,a as n,e as a,w as t,b as s,f as p}from"./app-2a2d189a.js";const d={},k=n("h1",{id:"b-第一章开始",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b-第一章开始","aria-hidden":"true"},"#"),s(" B-第一章开始")],-1),v=n("p",null,"B-第一章开始",-1),m=p('<div class="hint-container info"><p class="hint-container-title">说明</p><p>主要是各种搜索找的学习；<br><strong>百度链接：</strong><br> :<br> :</p><p><strong>知乎链接：</strong><br> :<br> :</p><p><strong>B站链接：</strong><br> ：<br> ：</p><p><strong>博客链接：</strong><br> ：<br> ：</p><p><strong>GitHub链接：</strong><br> ：<br> ：</p></div>',1),b={class:"table-of-contents"},h=p(`<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="第1章-开始-结束" tabindex="-1"><a class="header-anchor" href="#第1章-开始-结束" aria-hidden="true">#</a> 第1章　开始[结束]</h2><ul><li><p>本章介绍C++的大部分基础内容：类型、变量、表达式、语句及函<br> 数。在这个过程中，我们会简要介绍如何编译及运行程序。</p></li><li><p>在学习完本章并认真完成练习之后，你将具备编写、编译及运行简<br> 单程序的能力。后续章节将假定你已掌握本章中介绍的语言特性，并将<br> 更详细地解释这些特性。</p></li><li><p>学习一门新的程序设计语言的最好方法就是练习编写程序。在本章<br> 中，我们将编写一个程序来解决简单的书店问题。</p></li><li><p>我们的书店保存所有销售记录的档案，每条记录保存了某本书的一<br> 次销售的信息（一册或多册）。每条记录包含三个数据项：0-201-70353-X 4　　24.99</p></li><li><p>第一项是书的ISBN号（国际标准书号，一本书的唯一标识），第<br> 二项是售出的册数，最后一项是书的单价。有时，书店老板需要查询此<br> 档案，计算每本书的销售量、销售额及平均售价。</p></li><li><p>为了编写这个程序，我们需要使用若干C++的基本特性。而且，我<br> 们需要了解如何编译及运行程序。</p></li><li><p>虽然我们还没有编写这个程序，但显然它必须<br> · 定义变量<br> · 进行输入和输出<br> · 使用数据结构保存数据<br> · 检测两条记录是否有相同的ISBN<br> · 包含一个循环来处理销售档案中的每条记录</p></li><li><p>我们首先介绍如何用C++来解决这些子问题，然后编写书店程序。</p></li></ul><h2 id="_1-1-编写一个简单的c-程序" tabindex="-1"><a class="header-anchor" href="#_1-1-编写一个简单的c-程序" aria-hidden="true">#</a> 1.1　编写一个简单的C++程序</h2><ul><li><p>每个C++程序都包含一个或多个函数（function），其中一个必须命名为main。操作系统通过调用main来运行C++程序。下面是一个非常简单的main函数，它什么也不干，只是返回给操作系统一个值：</p></li><li><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一个函数的定义包含四部分：返回类型（return type）、函数名（function name）、一个括号包围的形参列表（parameter list，允许为空）以及函数体（function body）。虽然main函数在某种程度上比较特殊，但其定义与其他函数是一样的。</p></li><li><p>在本例中，main的形参列表是空的（（）中什么也没有）。6.2.5节（第196页）将会讨论main的其他形参类型。</p></li><li><p>main函数的返回类型必须为int，即整数类型。int类型是一种内置类型（built-in type），即语言自身定义的类型。</p></li><li><p>函数定义的最后一部分是函数体，它是一个以左花括号（curly brace）开始，以右花括号结束的语句块（block of statements）：</p></li><li><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这个语句块中唯一的一条语句是return，它结束函数的执行。在本例中，return还会向调用者返回一个值。当return语句包括一个值时，此返回值的类型必须与函数的返回类型相容。在本例中，main的返回类型是int，而返回值0的确是一个int类型的值。</p></li><li><p><mark>请注意，return语句末尾的分号。在C++中，大多数C++语句以分号表示结束。它们很容易被忽略，但如果忘记了写分号，就会导致莫名其妙的编译错误。</mark></p></li><li><p>在大多数系统中，main的返回值被用来指示状态。返回值0表明成<br> 功，非0的返回值的含义由系统定义，通常用来指出错误类型</p></li><li><p><mark>重要概念：类型</mark></p></li><li><p>类型是程序设计最基本的概念之一，在本书中我们会反复遇到它。一种类型不仅<br> 定义了数据元素的内容，还定义了这类数据上可以进行的运算。</p></li><li><p>程序所处理的数据都保存在变量中，而每个变量都有自己的类型。如果一个名为v<br> 的变量的类型为T，我们通常说“v具有类型T”，或等价的，“v是一个T类型变量”。</p></li></ul><h3 id="_1-1-1-编译、运行程序" tabindex="-1"><a class="header-anchor" href="#_1-1-1-编译、运行程序" aria-hidden="true">#</a> 1.1.1 编译、运行程序</h3><ul><li>编写好程序后，我们就需要编译它。如何编译程序依赖于你使用的操作系统和编译器。你所使用的特定编译器的相关使用细节，请查阅参考手册或询问经验丰富的同事。</li></ul><details class="hint-container details"><summary>.exe 文件可以在macOS上运行吗？</summary><p>编译程序是一个将源代码转换成可执行文件的过程，这个过程依赖于多种因素，包括你所使用的编程语言、操作系统、以及编译器。不同的操作系统支持不同的可执行文件格式。例如：</p><ul><li>在Windows操作系统中，可执行文件通常有<code>.exe</code>扩展名。</li><li>在macOS（苹果的操作系统）中，可执行文件通常是没有扩展名的，但它们实际上是带有<code>Mach-O</code>文件格式的二进制文件。</li><li>在类Unix系统，如Linux中，可执行文件也可能没有扩展名，遵循ELF（Executable and Linkable Format）格式。</li></ul><p>对于你的问题，<code>.exe</code>文件是为Windows操作系统设计的，它不能在macOS上直接运行。macOS使用不同的架构和文件格式，因此需要专门为macOS编译的可执行文件才能运行。</p><p>如果你需要在macOS上运行程序，你需要：</p><ol><li>确保你有适合macOS的编译器，如Xcode中的Clang。</li><li>使用该编译器将源代码编译成macOS可以识别的格式。</li><li>如果源代码是为Windows编写的，可能还需要修改源代码以适应macOS的API和系统调用。</li></ol><p>如果你正在开发跨平台的应用程序，可能需要使用一些工具或库来帮助处理不同操作系统之间的差异。例如，使用Qt或wxWidgets这样的跨平台框架可以减少在不同操作系统上编译和运行时所需的修改。</p></details>`,8),g=p("<li><p>很多PC机上的编译器都具备集成开发环境（Integrated Developed<br> Environment，IDE），将编译器与其他程序创建和分析工具包装在一<br> 起。在开发大型程序时，这类集成环境可能是非常有用的工具，但需要<br> 一些时间来学习如何高效地使用它们。学习如何使用这类开发环境已经<br> 超出了本书的范围。</p></li><li><p>大部分编译器，包括集成IDE的编译器，都会提供一个命令行界<br> 面。除非你已经了解IDE，否则你会觉得借助命令行界面开始学习<br> C++还是很容易的。这种学习方式的好处是，可以先将精力集中于<br> C++语言本身（而不是一些开发工具），而且，一旦你掌握了语言，<br> IDE通常是很容易学习的。</p></li><li><p><mark>程序源文件命名约定</mark></p></li>",3),f=n("br",null,null,-1),w=n("br",null,null,-1),_=n("br",null,null,-1),y=n("br",null,null,-1),x={href:"http://xn--uir93xiwdi1eqpyjm0a.cc",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),S=p("<li><p><mark>从命令行运行编译器</mark></p></li><li><p>如果我们正在使用命令行界面，那么通常是在一个控制台窗口内<br> （例如UNIX系统中的外壳程序窗口或者Windows系统中的命令提示符<br> 窗口）编译程序。假定我们的main程序保存在文件prog1.cc中，可以用<br> 如下命令来编译它<code>$ CC prog1.cc</code></p></li><li><p>其中，CC是编译器程序的名字，$是系统提示符。编译器生成一个<br> 可执行文件。Windows系统会将这个可执行文件命名为prog1.exe。<br> UNIX系统中的编译器通常将可执行文件命名为a.out。</p></li><li><p>为了在Windows系统中运行一个可执行文件，我们需要提供可执行<br> 文件的文件名，可以忽略其扩展名.exe：<code>$ prog1</code></p></li><li><p>在一些系统中，即使文件就在当前目录或文件夹中，你也必须显式<br> 指出文件的位置。在此情况下，我们可以键入<code>$ .\\prog1</code><br> “.”后跟一个反斜线指出该文件在当前目录中。</p></li><li><p>为了在UNIX系统中运行一个可执行文件，我们需要使用全文件<br> 名，包括文件扩展名：<code>$ a.out</code></p></li><li><p>如果需要指定文件位置，需要用一个“.”后跟一个斜线来指出可执行<br> 文件位于当前目录中。<code>$ ./a.out</code></p></li><li><p>访问main的返回值的方法依赖于系统。在UNIX和Windows系统<br> 中，执行完一个程序后，都可以通过echo命令获得其返回值。</p></li><li><p>在UNIX系统中，通过如下命令获得状态：<code>$ echo $?</code></p></li><li><p>在Windows系统中查看状态可键入：<code>$ echo %ERRORLEVEL%</code></p></li><li><p><mark>运行GNU或微软编译器</mark></p></li><li><p>在不同操作和编译器系统中，运行C++编译器的命令也各不相同。最常用的编译<br> 器是GNU编译器和微软Visual Studio编译器。默认情况下，运行GNU编译器的命令是<br> g++：<code>$ g++ -o prog1 prog1.cc</code></p></li><li><p>此处，$是系统提示符。<mark>-o prog1是编译器参数</mark>，指定了可执行文件的文件名。在<br> 不同的操作系统中，此命令生成一个名为prog1或prog1.exe的可执行文件。在UNIX系<br> 统中，可执行文件没有后缀；在Windows系统中，后缀为.exe。如果省略了-o prog1参<br> 数，在UNIX系统中编译器会生成一个名为a.out的可执行文件，在Windows系统中则会<br> 生成一个名为a.exe的可执行文件（注意：根据使用的GNU编译器的版本，你可能需要<br> 指定-std=c++0x参数来打开对C++11的支持）。</p></li><li><p>运行微软Visual Studio 2010编译器的命令为cl：<code>C：\\Users\\me\\Programs&gt; c1 /EHsc prog1.cpp</code></p></li><li><p>此处，C：\\Users\\me\\Programs&gt;是系统提示符，\\Users\\me\\Programs是当前目录名<br> （即当前文件夹）。命令cl调用编译器，/EHsc是编译器选项，用来打开标准异常处<br> 理。微软编译器会自动生成一个可执行文件，其名字与第一个源文件名对应。可执行<br> 文件的文件名与源文件名相同，后缀为.exe。在此例中，可执行文件的文件名为<br> prog1.exe。</p></li><li><p>编译器通常都包含一些选项，能对有问题的程序结构发出警告。打开这些选项通<br> 常是一个好习惯。我们习惯在GNU编译器中使用-Wall选项，在微软编译器中则使<br> 用/W4。</p></li><li><p>更详细的信息请查阅你使用的编译器的参考手册。</p></li>",17),C=p(`<h3 id="_1-1节练习" tabindex="-1"><a class="header-anchor" href="#_1-1节练习" aria-hidden="true">#</a> 1.1节练习</h3><h4 id="练习1-1" tabindex="-1"><a class="header-anchor" href="#练习1-1" aria-hidden="true">#</a> 练习1.1</h4><p>查阅你使用的编译器的文档，确定它所使用的文件名约定。编译并运行第2页的main程序。</p><p>解：</p><ul><li><code>g++ --std=c++11 ch1.cpp -o main</code></li><li><code>./main</code></li></ul><h4 id="练习1-2" tabindex="-1"><a class="header-anchor" href="#练习1-2" aria-hidden="true">#</a> 练习1.2</h4><p>改写程序，让它返回-1。返回值-1通常被当做程序错误的标识。重新编译并运行你的程序，观察你的系统如何处理main返回的错误标识。</p><p>解：</p><ul><li>在ubuntu下，使用g++，返回-1，<code>./main</code>没有发现任何异常。</li><li><code>echo $?</code>，返回255。</li></ul><h2 id="_1-2-初识输入输出" tabindex="-1"><a class="header-anchor" href="#_1-2-初识输入输出" aria-hidden="true">#</a> 1.2　初识输入输出</h2><ul><li><p>C++语言并未定义任何输入输出（IO）语句，取而代之，包含了一<br> 个全面的标准库（standard library）来提供IO机制（以及很多其他设<br> 施）。对于很多用途，包括本书中的示例来说，我们只需了解IO库中一<br> 部分基本概念和操作。【C++是只有一个IO库：iostream吗？】</p></li><li><p>本书中的很多示例都使用了iostream库。iostream库包含两个基础类<br> 型istream和ostream，分别表示输入流和输出流。一个流就是一个字符<br> 序列，是从IO设备读出或写入IO设备的。术语“流”（stream）想要表达<br> 的是，随着时间的推移，字符是顺序生成或消耗的。</p></li><li><p><mark>标准输入输出对象</mark></p></li><li><p>标准库定义了4个IO对象。为了处理输入，我们使用一个名<br> 为cin的istream类型的对象。这个对象也被称为标准输<br> 入。对于输出，我们使用一个名为cout的ostream类型的对象。<br> 此对象也被称为标准输出（standardoutput）。标准库还定义了其他两个ostream对象，名为cerr和clog。<br> 我们通常用cerr来输出警告和错误消息，因此它也被称为标准错误（standard error）。而clog用来输出程序运行时的一般性信息。</p></li><li><p>系统通常将程序所运行的窗口与这些对象关联起来。因此，当我们<br> 读取cin，数据将从程序正在运行的窗口读入，当我们向cout、cerr和<br> clog写入数据时，将会写到同一个窗口。</p></li><li><p><mark>一个使用IO库的程序</mark></p></li><li><p>在书店程序中，我们需要将多条记录合并成单一的汇总记录。作为<br> 一个相关的，但更简单的问题，我们先来看一下如何将两个数相加。通<br> 过使用IO库，我们可以扩展main程序，使之能提示用户输入两个数，然<br> 后输出它们的和：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter two numbers:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> v1 <span class="token operator">&gt;&gt;</span> v2<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The sum of &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and &quot;</span> <span class="token operator">&lt;&lt;</span> v2 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这个程序开始时在用户屏幕打印:<code>Enter two numbers:</code></p></li><li><p>然后等待用户输入。如果用户键入:<code> 3 7</code></p></li><li><p>然后键入一个回车，则程序产生如下输出：<code>The sum of 3 and 7 is 10</code></p></li><li><p>程序的第一行<code>#include &lt;iostream&gt;</code></p></li><li><p>告诉编译器我们想要使用iostream库。尖括号中的名字（本例中是<br> iostream）指出了一个头文件（header）。每个使用标准库设施的程序都<br> 必须包含相关的头文件。#include指令和头文件的名字必须写在同一行<br> 中。通常情况下，#include指令必须出现在所有函数之外。我们一般将<br> 一个程序的所有#include指令都放在源文件的开始位置。</p></li></ul><br><ul><li><p><mark>向流写入数据</mark></p></li><li><p>main的函数体的第一条语句执行了一个表达式（expression）。在<br> C++中，一个表达式产生一个计算结果，它由一个或多个运算对象和<br> （通常是）一个运算符组成。这条语句中的表达式使用了输出运算符<br> （&lt;&lt;）在标准输出上打印消息：<br><code>std::cout &lt;&lt; &quot;Enter two numbers:&quot; &lt;&lt; std::endl; </code></p></li><li><p>&lt;&lt;运算符接受两个运算对象：左侧的运算对象必须是一个ostream<br> 对象，右侧的运算对象是要打印的值。此运算符将给定的值写到给定的<br> ostream对象中。输出运算符的计算结果就是其左侧运算对象。即，计算<br> 结果就是我们写入给定值的那个ostream对象。</p></li><li><p>我们的输出语句使用了两次&lt;&lt;运算符。因为此运算符返回其左侧的<br> 运算对象，因此第一个运算符的结果成为了第二个运算符的左侧运算对<br> 象。这样，我们就可以将输出请求连接起来。因此，我们的表达式等价于<br><code>(std::cout &lt;&lt; &quot;Enter two numbers:&quot;) &lt;&lt; std::endl;</code></p></li><li><p>链中每个运算符的左侧运算对象都是相同的，在本例中是std：：cout。<br> 我们也可以用两条语句生成相同的输出：<br><code>std::cout &lt;&lt; &quot;Enter two numbers:&quot;;</code><br><code>std::cout &lt;&lt; std::endl;</code></p></li><li><p>第一个输出运算符给用户打印一条消息。这个消息是一个字符串字<br> 面值常量（string literal），是用一对双引号包围的字符序列。在双引号<br> 之间的文本被打印到标准输出。</p></li><li><p>第二个运算符打印endl，这是一个被称为操纵符（manipulator）的<br> 特殊值。写入endl的效果是结束当前行，并将与设备关联的缓冲区<br> （buffer）中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程<br> 序所产生的所有输出都真正写入输出流中，而不是仅停留在内存中等待<br> 写入流。</p></li><li><p><mark>程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则，如果程序崩溃，输出可能还留在缓冲区中，从而导致关于程序崩溃位置的错误推断。</mark></p></li></ul><br><ul><li><p><mark>使用标准库中的名字</mark></p></li><li><p>细心的读者可能会注意到这个程序使用了std::cout和std::endl，而不是直接的cout和endl。<br> 前缀std::指出名字cout和endl是定义在名为std的命名空间（namespace）中的。命名空间可以帮助我们避免<br> 不经意的名字定义冲突，以及使用库中相同名字导致的冲突。标准库定义的所有名字都在命名空间std中。</p></li><li><p>通过命名空间使用标准库有一个副作用：当使用标准库中的一个名<br> 字时，必须显式说明我们想使用来自命名空间std中的名字。例如，需要<br> 写出std：：cout，通过使用作用域运算符（：：）来指出我们想使用定<br> 义在命名空间std中的名字cout。3.1节（第74页）将给出一个更简单的访<br> 问标准库中名字的方法。</p></li></ul><br><ul><li><p><mark>从流读取数据</mark></p></li><li><p>在提示用户输入数据之后，接下来我们希望读入用户的输入。首先<br> 定义两个名为v1和v2的变量（variable）来保存输入：<br><code>int v1 = 0, v2 = 0;</code></p></li><li><p>我们将这两个变量定义为int类型，int是一种内置类型，用来表示整<br> 数。还将它们初始化（initialize）为0。初始化一个变量，就是在变量创<br> 建的同时为它赋予一个值。</p></li><li><p>下一条语句是:<code>std::cin &gt;&gt; v1 &gt;&gt; v2;</code></p></li><li><p>它读入输入数据。输入运算符（&gt;&gt;）与输出运算符类似，它接受<br> 一个istream作为其左侧运算对象，接受一个对象作为其右侧运算对象。<br> 它从给定的istream读入数据，并存入给定对象中。与输出运算符类似，<br> 输入运算符返回其左侧运算对象作为其计算结果。因此，此表达式等价于<br><code>(std::cin &gt;&gt; v1) &gt;&gt; v2;</code></p></li><li><p>由于此运算符返回其左侧运算对象，因此我们可以将一系列输入请<br> 求合并到单一语句中。本例中的输入操作从std：：cin读入两个值，并<br> 将第一个值存入v1，将第二个值存入v2。换句话说，它与下面两条语句<br> 的执行结果是一样的<br><code>std::cin &gt;&gt; v1;</code><br><code>std::cin &gt;&gt; v2;</code></p></li><li><p><mark>完成程序</mark></p></li><li><p>剩下的就是打印计算结果了：<br><code>std::cout &lt;&lt; &quot;The sum of &quot; &lt;&lt; v1 &lt;&lt; &quot; and &quot; &lt;&lt; v2 &lt;&lt; &quot; is &quot; &lt;&lt; v1 + v2 &lt;&lt; std::endl;</code></p></li><li><p>这条语句虽然比提示用户输入的打印语句更长，但原理上是一样<br> 的，它将每个运算对象打印在标准输出上。本例一个有意思的地方在<br> 于，运算对象并不都是相同类型的值。某些运算对象是字符串字面值常<br> 量，例如&quot;The sum of &quot;。其他运算对象则是int值，如v1、v2以及算术表<br> 达式v1+v2的计算结果。标准库定义了不同版本的输入输出运算符，来<br> 处理这些不同类型的运算对象。</p></li></ul><h3 id="_1-2节练习" tabindex="-1"><a class="header-anchor" href="#_1-2节练习" aria-hidden="true">#</a> 1.2节练习</h3><h4 id="练习1-3" tabindex="-1"><a class="header-anchor" href="#练习1-3" aria-hidden="true">#</a> 练习1.3</h4><p>编写程序，在标准输出上打印Hello, World。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, World&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-4" tabindex="-1"><a class="header-anchor" href="#练习1-4" aria-hidden="true">#</a> 练习1.4</h4><p>我们的程序使用加法运算符<code>+</code>来将两个数相加。编写程序使用乘法运算符<code>*</code>，来打印两个数的积。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter two numbers:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> v1 <span class="token operator">&gt;&gt;</span> v2<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The product of &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and &quot;</span> <span class="token operator">&lt;&lt;</span> v2
              <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">*</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-5" tabindex="-1"><a class="header-anchor" href="#练习1-5" aria-hidden="true">#</a> 练习1.5</h4><p>我们将所有的输出操作放在一条很长的语句中，重写程序，将每个运算对象的打印操作放在一条独立的语句中。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter two numbers:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> v1 <span class="token operator">&gt;&gt;</span> v2<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The product of &quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and &quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v2<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">*</span> v2<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-6" tabindex="-1"><a class="header-anchor" href="#练习1-6" aria-hidden="true">#</a> 练习1.6</h4><p>解释下面程序片段是否合法。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The sum of &quot;</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">;</span>
          <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and &quot;</span> <span class="token operator">&lt;&lt;</span> v2<span class="token punctuation">;</span>
          <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果程序是合法的，它的输出是什么？如果程序不合法，原因何在？应该如何修正？</p><p>解：</p><p>程序不合法，有多余的分号，修改如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The sum of &quot;</span> <span class="token operator">&lt;&lt;</span> v1
          <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and &quot;</span> <span class="token operator">&lt;&lt;</span> v2
          <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-注释简介" tabindex="-1"><a class="header-anchor" href="#_1-3-注释简介" aria-hidden="true">#</a> 1.3　注释简介</h2><ul><li><p>在程序变得更复杂之前，我们应该了解一下C++是如何处理注释<br> （comments）的。注释可以帮助人类读者理解程序。注释通常用于概述<br> 算法，确定变量的用途，或者解释晦涩难懂的代码段。编译器会忽略注<br> 释，因此注释对程序的行为或性能不会有任何影响。</p></li><li><p>虽然编译器会忽略注释，但读者并不会。即使系统文档的其他部分<br> 已经过时，程序员也倾向于相信注释的内容是正确可信的。因此，错误<br> 的注释比完全没有注释更糟糕，因为它会误导读者。因此，当你修改代<br> 码时，不要忘记同时更新注释！</p></li></ul><br><ul><li><p><mark>C++中注释的种类</mark></p></li><li><p>C++中有两种注释：单行注释和界定符对注释。单行注释以双斜线<br> （//）开始，以换行符结束。当前行双斜线右侧的所有内容都会被编译<br> 器忽略，这种注释可以包含任何文本，包括额外的双斜线。</p></li><li><p>另一种注释使用继承自C语言的两个界定符（/＊和＊/）。这种注<br> 释以/＊开始，以＊/结束，可以包含除＊/外的任意内容，包括换行符。<br> 编译器将落在/＊和＊/之间的所有内容都当作注释。</p></li><li><p>注释界定符可以放置于任何允许放置制表符、空格符或换行符的地<br> 方。注释界定符可以跨越程序中的多行，但这并不是必须的。当注释界<br> 定符跨越多行时，最好能显式指出其内部的程序行都属于多行注释的一<br> 部分。我们所采用的风格是，注释内的每行都以一个星号开头，从而指<br> 出整个范围都是多行注释的一部分。</p></li><li><p>程序中通常同时包含两种形式的注释。注释界定符对通常用于多行<br> 解释，而双斜线注释常用于半行和单行附注。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token comment">/*
 * Simple main function: 
 * Read two numbers and write their sum
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// prompt user to enter two numbers</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter two numbers:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// variables to hold the input we read</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> v1 <span class="token operator">&gt;&gt;</span> v2<span class="token punctuation">;</span> <span class="token comment">// read input</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The sum of &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; and &quot;</span> <span class="token operator">&lt;&lt;</span> v2 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在本书中，我们用楷体来突出显示注释。在实际程序中，注释文本的显示形式是<br> 否区别于程序代码文本的显示，依赖于你所使用的程序设计环境是否提供这一特性。</p></li><li><p><mark>注释界定符不能嵌套</mark></p></li><li><p>界定符对形式的注释是以/＊开始，以＊/结束的。因此，一个注释<br> 不能嵌套在另一个注释之内。编译器对这类问题所给出的错误信息可能<br> 是难以理解、令人迷惑的。例如，在你的系统中编译下面的程序，就会<br> 产生错误：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/*
 * comment pairs /* */</span> cannot nest<span class="token punctuation">.</span>
 <span class="token operator">*</span> <span class="token char">&#39;&#39;</span>cannot nest<span class="token char">&#39;&#39;</span> is considered source code<span class="token punctuation">,</span>
 <span class="token operator">*</span> as is the rest of the program
 <span class="token operator">*</span><span class="token operator">/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们通常需要在调试期间注释掉一些代码。由于这些代码可能包含<br> 界定符对形式的注释，因此可能导致注释嵌套错误，因此最好的方式是<br> 用单行注释方式注释掉代码段的每一行。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// /*</span>
<span class="token comment">// * everything inside a single-line comment is ignored</span>
<span class="token comment">// * including nested comment pairs</span>
<span class="token comment">// */</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3节练习" tabindex="-1"><a class="header-anchor" href="#_1-3节练习" aria-hidden="true">#</a> 1.3节练习</h3><h4 id="练习1-7" tabindex="-1"><a class="header-anchor" href="#练习1-7" aria-hidden="true">#</a> 练习1.7</h4><p>编译一个包含不正确的嵌套注释的程序，观察编译器返回的错误信息。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/* 正常注释 /* 嵌套注释 */</span> 正常注释<span class="token operator">*</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>错误信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  /* 正常注释 /* 嵌套注释 */ 正常注释*/
                                     ^
ch1.cpp:97:37: error: stray ‘\\255’ in program
ch1.cpp:97:37: error: stray ‘\\243’ in program
ch1.cpp:97:37: error: stray ‘\\345’ in program
ch1.cpp:97:37: error: stray ‘\\270’ in program
ch1.cpp:97:37: error: stray ‘\\270’ in program
ch1.cpp:97:37: error: stray ‘\\346’ in program
ch1.cpp:97:37: error: stray ‘\\263’ in program
ch1.cpp:97:37: error: stray ‘\\250’ in program
ch1.cpp:97:37: error: stray ‘\\351’ in program
ch1.cpp:97:37: error: stray ‘\\207’ in program
ch1.cpp:97:37: error: stray ‘\\212’ in program
ch1.cpp: In function ‘int main()’:
ch1.cpp:97:50: error: expected primary-expression before ‘/’ token
  /* 正常注释 /* 嵌套注释 */ 正常注释*/
                                                  ^
ch1.cpp:98:5: error: expected primary-expression before ‘return’
     return 0;
     ^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-8" tabindex="-1"><a class="header-anchor" href="#练习1-8" aria-hidden="true">#</a> 练习1.8</h4><p>指出下列哪些输出语句是合法的（如果有的话）：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*/&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token comment">/* &quot;*/</span>&quot; <span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token comment">/* &quot;*/</span><span class="token string">&quot; /* &quot;</span><span class="token comment">/*&quot; */</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预测编译这些语句会产生什么样的结果，实际编译这些语句来验证你的答案(编写一个小程序，每次将上述一条语句作为其主体)，改正每个编译错误。</p><p>解：</p><p>只有第三句编译出错，改成如下即可：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token comment">/* &quot;*/</span><span class="token string">&quot; */&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第四句等价于输出 <code>&quot; /* &quot;</code>。</p><h2 id="_1-4-控制流" tabindex="-1"><a class="header-anchor" href="#_1-4-控制流" aria-hidden="true">#</a> 1.4　控制流</h2><ul><li>语句一般是顺序执行的：语句块的第一条语句首先执行，然后是第<br> 二条语句，依此类推。当然，少数程序，包括我们解决书店问题的程<br> 序，都可以写成只有顺序执行的形式。但程序设计语言提供了多种不同<br> 的控制流语句，允许我们写出更为复杂的执行路径。</li></ul><h3 id="_1-4-1-while语句" tabindex="-1"><a class="header-anchor" href="#_1-4-1-while语句" aria-hidden="true">#</a> 1.4.1 while语句</h3><ul><li>while语句反复执行一段代码，直至给定条件为假为止。我们可以<br> 用while语句编写一段程序，求1到10这10个数之和：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// keep executing the while as long as val is less than or equal to 10</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> val<span class="token punctuation">;</span> <span class="token comment">// assigns sum + val to sum</span>
      <span class="token operator">++</span>val<span class="token punctuation">;</span> <span class="token comment">// add 1 to val</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sum of 1 to 10 inclusive is &quot;</span><span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>我们编译并执行这个程序，它会打印出<code>Sum of 1 to 10 inclusive is 55</code></p></li><li><p>与之前的例子一样，我们首先包含头文件iostream，然后定义<br> main。在main中我们定义两个int变量：sum用来保存和；val用来表示从<br> 1到10的每个数。我们将sum的初值设置为0，val从1开始。</p></li><li><p>这个程序的新内容是while语句。while语句的形式为</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  statement
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>while语句的执行过程是交替地检测condition条件和执行关联的语句<br> statement，直至condition为假时停止。所谓条件（condition）就是一个<br> 产生真或假的结果的表达式。只要condition为真，statement就会被执<br> 行。当执行完statement，会再次检测condition。如果condition仍为<br> 真，statement再次被执行。while语句持续地交替检测condition和执<br> 行statement，直至condition为假为止。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// keep executing the while as long as val is less than or equal to 10</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 sum <span class="token operator">+=</span> val<span class="token punctuation">;</span> <span class="token comment">// assigns sum + val to sum</span>
 <span class="token operator">++</span>val<span class="token punctuation">;</span> <span class="token comment">// add 1 to val</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>条件中使用了小于等于运算符（&lt;=）来比较val的当前值和10。只<br> 要val小于等于10，条件即为真。如果条件为真，就执行while循环体。<br> 在本例中，循环体是由两条语句组成的语句块：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> val<span class="token punctuation">;</span> <span class="token comment">// assigns sum + val to sum</span>
    <span class="token operator">++</span>val<span class="token punctuation">;</span> <span class="token comment">// add 1 to val</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>所谓语句块（block），就是用花括号包围的零条或多条语句的序<br> 列。语句块也是语句的一种，在任何要求使用语句的地方都可以使用语<br> 句块。在本例中，语句块的第一条语句使用了复合赋值运算符<br> （+=）。此运算符将其右侧的运算对象加到左侧运算对象上，将结果保<br> 存到左侧运算对象中。它本质上与一个加法结合一个赋值<br> （assignment）是相同的：<br><code>sum = sum + val; // assign sum + val to sum</code></p></li><li><p>因此，语句块中第一条语句将val的值加到当前和sum上，并将结果<br> 保存在sum中。下一条语句<code>++val; // add 1 to val</code></p></li><li><p>使用前缀递增运算符（++）。递增运算符将运算对象的值增加1。++val等价于val=val+1。</p></li><li><p>执行完while循环体后，循环会再次对条件进行求值。如果val的值<br> （现在已经增加了）仍然小于等于10，则while的循环体会再次执行。<br> 循环连续检测条件、执行循环体，直至val不再小于等于10为止。</p></li><li><p>一旦val大于10，程序跳出while循环，继续执行while之后的语句。<br> 在本例中，继续执行打印输出语句，然后执行return语句完成main程序。</p></li></ul><h3 id="_1-4-1节练习" tabindex="-1"><a class="header-anchor" href="#_1-4-1节练习" aria-hidden="true">#</a> 1.4.1节练习</h3><h4 id="练习1-9" tabindex="-1"><a class="header-anchor" href="#练习1-9" aria-hidden="true">#</a> 练习1.9</h4><p>编写程序，使用<code>while</code>循环将50到100整数相加。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        val <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sum of 50 to 100 inclusive is &quot;</span>
              <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-10" tabindex="-1"><a class="header-anchor" href="#练习1-10" aria-hidden="true">#</a> 练习1.10</h4><p>除了<code>++</code>运算符将运算对象的值增加1之外，还有一个递减运算符<code>--</code>实现将值减少1.编写程序与，使用递减运算符在循环中按递减顺序打印出10到0之间的整数。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        val <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-11" tabindex="-1"><a class="header-anchor" href="#练习1-11" aria-hidden="true">#</a> 练习1.11</h4><p>编写程序，提示用户输入两个整数，打印出这两个整数所指定的范围内的所有整数。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please input two num: &quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> start <span class="token operator">&gt;&gt;</span> end<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> start <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>start<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;start should be smaller than end !!!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-2-for语句" tabindex="-1"><a class="header-anchor" href="#_1-4-2-for语句" aria-hidden="true">#</a> 1.4.2 for语句</h3><ul><li><p>在我们的while循环例子中，使用了变量val来控制循环执行次数。<br> 我们在循环条件中检测val的值，在while循环体中将val递增。</p></li><li><p>这种在循环条件中检测变量、在循环体中递增变量的模式使用非常<br> 频繁，以至于C++语言专门定义了第二种循环语句——for语句，来简化<br> 符合这种模式的语句。可以用for语句来重写从1加到10的程序：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// sum values from 1 through 10 inclusive</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>val<span class="token punctuation">)</span>
        sum <span class="token operator">+=</span> val<span class="token punctuation">;</span> <span class="token comment">// equivalent to sum = sum + val</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sum of 1 to 10 inclusive is &quot;</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与之前一样，我们定义了变量sum，并将其初始化为0。在此版本<br> 中，val的定义是for语句的一部分：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>val<span class="token punctuation">)</span>
    sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>每个for语句都包含两部分：循环头和循环体。循环头控制循环体的<br> 执行次数，它由三部分组成：一个初始化语句（init-statement）、一个<br> 循环条件（condition）以及一个表达式（expression）。在本例中，初始<br> 化语句为<code>int val = 1;</code></p></li><li><p>它定义了一个名为val的int型对象，并为其赋初值1。变量val仅在for<br> 循环内部存在，在循环结束之后是不能使用的。初始化语句只在for循环<br> 入口处执行一次。</p></li><li><p>循环条件<code>val &lt; 10</code>比较val的值和10。循环体每次执行前都会先检查循环条件。只要<br> val小于等于10，就会执行for循环体。表达式在for循环体之后执行。</p></li><li><p>在本例中，表达式<code>++val </code>使用前缀递增运算符将val的值增加1。执行完表达式后，for语句重<br> 新检测循环条件。如果val的新值仍然小于等于10，就再次执行for循环<br> 体。执行完循环体后，再次将val的值增加1。循环持续这一过程直至循<br> 环条件为假。</p></li><li><p>在此循环中，for循环体执行加法<code>sum += val; // equivalent to sum = sum + val</code></p></li><li><p><mark>简要重述一下for循环的总体执行流程：</mark><br> 1.创建变量val，将其初始化为1。<br> 2.检测val是否小于等于10。若检测成功，执行for循环体。若失败，退出循环，继续执行for循环体之后的第一条语句。<br> 3.将val的值增加1。<br> 4.重复第2步中的条件检测，只要条件为真就继续执行剩余步骤。</p></li></ul><h3 id="_1-4-2节练习" tabindex="-1"><a class="header-anchor" href="#_1-4-2节练习" aria-hidden="true">#</a> 1.4.2节练习</h3><h4 id="练习1-12" tabindex="-1"><a class="header-anchor" href="#练习1-12" aria-hidden="true">#</a> 练习1.12</h4><p>下面的for循环完成了什么功能？sum的终值是多少？</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解：</p><p>从-100加到100，sum的终值是0。</p><h4 id="练习1-13" tabindex="-1"><a class="header-anchor" href="#练习1-13" aria-hidden="true">#</a> 练习1.13</h4><p>使用for循环重做1.4.1节中的所有练习（练习1.9到1.11）。</p><p>解：</p><ul><li><mark>练习1.9</mark></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> val <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sum of 50 to 100 inclusive is &quot;</span>
              <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>练习1.10</mark></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> val <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>练习1.11</mark></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please input two num: &quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> start <span class="token operator">&gt;&gt;</span> end<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> start <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>start<span class="token punctuation">)</span><span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> start <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;start should be smaller than end !!!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-14" tabindex="-1"><a class="header-anchor" href="#练习1-14" aria-hidden="true">#</a> 练习1.14</h4><p>对比for循环和while循环，两种形式的优缺点各是什么？</p><p>解：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>The main difference between the \`for\`&#39;s and the \`while\`&#39;s is a matter of pragmatics: 
we usually use \`for\` when there is a known number of iterations, 
and use \`while\` constructs when the number of iterations in not known in advance. 
The \`while\` vs \`do ... while\` issue is also of pragmatics, 
the second executes the instructions once at start, 
and afterwards it behaves just like the simple \`while\`.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-15" tabindex="-1"><a class="header-anchor" href="#练习1-15" aria-hidden="true">#</a> 练习1.15</h4><p>编写程序，包含第14页“再探编译”中讨论的常见错误。熟悉编译器生成的错误信息。</p><p>解：</p><p>编译器可以检查出的错误有：</p><ul><li>语法错误</li><li>类型错误</li><li>声明错误</li></ul><h3 id="_1-4-3-读取数量不定的输入数据" tabindex="-1"><a class="header-anchor" href="#_1-4-3-读取数量不定的输入数据" aria-hidden="true">#</a> 1.4.3　读取数量不定的输入数据</h3><ul><li>在前一节中，我们编写程序实现了1到10这10个整数求和。扩展此<br> 程序一个很自然的方向是实现对用户输入的一组数求和。在这种情况<br> 下，我们预先不知道要对多少个数求和，这就需要不断读取数据直至没<br> 有新的输入为止：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// read until end-of-file, calculating a running total of all values read</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> value<span class="token punctuation">)</span>
        sum <span class="token operator">+=</span> value<span class="token punctuation">;</span> <span class="token comment">// equivalent to sum = sum + value</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sum is: &quot;</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果我们输入<code>3 4 5 6</code></p></li><li><p>则程序会输出<code>Sum is: 18</code></p></li><li><p>main的首行定义了两个名为sum和value的int变量，均初始化为0。<br> 我们使用value保存用户输入的每个数，数据读取操作是在while的循环<br> 条件中完成的：<code>while (std::cin &gt;&gt; value)</code></p></li><li><p>while循环条件的求值就是执行表达式<code>std::cin &gt;&gt; value</code></p></li><li><p>此表达式从标准输入读取下一个数，保存在value中。输入运算符<br> （参见1.2节，第7页）返回其左侧运算对象，在本例中是std：：cin。因<br> 此，此循环条件实际上检测的是std：：cin。</p></li><li><p>当我们使用一个istream对象作为条件时，其效果是检测流的状态。<br> 如果流是有效的，即流未遇到错误，那么检测成功。当遇到文件结束符<br> （end-of-file），或遇到一个无效输入时（例如读入的值不是一个整<br> 数），istream对象的状态会变为无效。处于无效状态的istream对象会使<br> 条件变为假。</p></li><li><p>因此，我们的while循环会一直执行直至遇到文件结束符（或输入<br> 错误）。while循环体使用复合赋值运算符将当前值加到sum上。一旦条<br> 件失败，while循环将会结束。我们将执行下一条语句，打印sum的值和<br> 一个endl。</p></li><li><p><mark>从键盘输入文件结束符</mark></p></li><li><p>当从键盘向程序输入数据时，对于如何指出文件结束，不同操作系统有不同的约<br> 定。在Windows系统中，输入文件结束符的方法是敲Ctrl+Z（按住Ctrl键的同时按Z<br> 键），然后按Enter或Return键。在UNIX系统中，包括Mac OS X系统中，文件结束符<br> 输入是用Ctrl+D。</p></li><li><p><mark>再探编译</mark></p></li><li><p>编译器的一部分工作是寻找程序文本中的错误。编译器没有能力检查一个程序是<br> 否按照其作者的意图工作，但可以检查形式（form）上的错误。下面列出了一些最常<br> 见的编译器可以检查出的错误。</p></li><li><p>语法错误（syntax error）：程序员犯了C++语言文法上的错误。下面程序展示了<br> 一些常见的语法错误；每条注释描述了下一行中语句存在的错误：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// error: missing ) in parameter list for main</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span> <span class="token punctuation">{</span>
    <span class="token comment">// error: used colon, not a semicolon, after endl</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Read each file.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token operator">:</span>
    <span class="token comment">// error: missing quotes around string literal</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> Update master<span class="token punctuation">.</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// error: second output operator is missing</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Write new master.&quot;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// error: missing ; on return statement</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>类型错误（type error）：C++中每个数据项都有其类型。例如，10的类型是<br> int（或者更通俗地说，“10是一个int型数据”）。单词&quot;hello&quot;，包括两侧的双引号标<br> 记，则是一个字符串字面值常量。一个类型错误的例子是，向一个期望参数为int的函<br> 数传递了一个字符串字面值常量。</p></li><li><p>声明错误（declaration error）：C++程序中的每个名字都要先声明后使用。名字声<br> 明失败通常会导致一条错误信息。两种常见的声明错误是：对来自标准库的名字忘记<br> 使用std：：、标识符名字拼写错误：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> v <span class="token operator">&gt;&gt;</span> v2<span class="token punctuation">;</span> <span class="token comment">// error: uses &quot;v&quot; not &quot;v1&quot;</span>
    <span class="token comment">// error: cout not defined; should be std::cout</span>
    cout <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>错误信息通常包含一个行号和一条简短描述，描述了编译器认为的我们所犯的错<br> 误。按照报告的顺序来逐个修正错误，是一种好习惯。因为一个单个错误常常会具有<br> 传递效应，导致编译器在其后报告比实际数量多得多的错误信息。另一个好习惯是在<br> 每修正一个错误后就立即重新编译代码，或者最多是修正了一小部分明显的错误后就<br> 重新编译。这就是所谓的“编辑-编译-调试”（edit-compile-debug）周期。</li></ul><h3 id="_1-4-3节练习" tabindex="-1"><a class="header-anchor" href="#_1-4-3节练习" aria-hidden="true">#</a> 1.4.3节练习</h3><h4 id="练习1-16" tabindex="-1"><a class="header-anchor" href="#练习1-16" aria-hidden="true">#</a> 练习1.16</h4><p>编写程序，从cin读取一组数，输出其和。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> value<span class="token punctuation">;</span> <span class="token punctuation">)</span>
        sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-4-if语句" tabindex="-1"><a class="header-anchor" href="#_1-4-4-if语句" aria-hidden="true">#</a> 1.4.4 if语句</h3><ul><li>与大多数语言一样，C++也提供了if语句来支持条件执行。我们可<br> 以用if语句写一个程序，来统计在输入中每个值连续出现了多少次:</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// currVal is the number we&#39;re counting; we&#39;ll read new values into val</span>
    <span class="token keyword">int</span> currVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// read first number and ensure that we have data to process</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> currVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// store the count for the current value we&#39;re processing</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read the remaining numbers</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> currVal<span class="token punctuation">)</span> <span class="token comment">// if the values are the same</span>
                <span class="token operator">++</span>cnt<span class="token punctuation">;</span> <span class="token comment">// add 1 to cnt</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// otherwise, print the count for the previous value</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> currVal <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; occurs &quot;</span> <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; times&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                currVal <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// remember the new value</span>
                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// reset the counter</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token comment">// while loop ends here</span>
        <span class="token comment">// remember to print the count for the last value in the file</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> currVal <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; occurs &quot;</span> <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; times&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// outermost if statement ends here</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果我们输入如下内容：<br> 42 42 42 42 42 55 55 62 100 100 100<br> 则输出应该是：<br> 42 occurs 5 times<br> 55 occurs 2 times<br> 62 occurs 1 times<br> 100 occurs 3 times</p></li><li><p>有了之前多个程序的基础，你对这个程序中的大部分代码应该比较<br> 熟悉了。程序以两个变量val和currVal的定义开始：currVal记录我们正<br> 在统计出现次数的那个数；val则保存从输入读取的每个数。与之前的<br> 程序相比，新的内容就是两个if语句。第一条if语句</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> currVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token comment">// outermost if statement ends here</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>保证输入不为空。与while语句类似，if也对一个条件进行求值。第<br> 一条if语句的条件是读取一个数值存入currVal中。如果读取成功，则条<br> 件为真，我们继续执行条件之后的语句块。该语句块以左花括号开始，<br> 以return语句之前的右花括号结束。</p></li><li><p>如果需要统计出现次数的值，我们就定义cnt，用来统计每个数值<br> 连续出现的次数。与上一小节的程序类似，我们用一个while循环反复<br> 从标准输入读取整数。</p></li><li><p>while的循环体是一个语句块，它包含了第二条if语句：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> currVal<span class="token punctuation">)</span> <span class="token comment">// if the values are the same</span>
      <span class="token operator">++</span>cnt<span class="token punctuation">;</span> <span class="token comment">// add 1 to cnt</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// otherwise, print the count for the previous value</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> currVal <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; occurs &quot;</span> <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; times&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
      currVal <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// remember the new value</span>
      cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// reset the counter</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这条if语句中的条件使用了相等运算符（==）来检测val是否等于<br> currVal。如果是，我们执行紧跟在条件之后的语句。这条语句将cnt增<br> 加1，表明我们再次看到了currVal。</p></li><li><p>如果条件为假，即val不等于currVal，则执行else之后的语句。这条<br> 语句是一个由一条输出语句和两条赋值语句组成的语句块。输出语句打<br> 印我们刚刚统计完的值的出现次数。赋值语句将cnt重置为1，将currVal<br> 重置为刚刚读入的值val。</p></li><li><p>C++用=进行赋值，用<mark>作为相等运算符。两个运算符都可以出现在条件中。一个<br> 常见的错误是想在条件中使用</mark>（相等判断），却误用了=。</p></li></ul><h3 id="_1-4-4节练习" tabindex="-1"><a class="header-anchor" href="#_1-4-4节练习" aria-hidden="true">#</a> 1.4.4节练习</h3><h4 id="练习1-17" tabindex="-1"><a class="header-anchor" href="#练习1-17" aria-hidden="true">#</a> 练习1.17</h4><p>如果输入的所有值都是相等的，本节的程序会输出什么？如果没有重复值，输出又会是怎样的？</p><h4 id="练习1-18" tabindex="-1"><a class="header-anchor" href="#练习1-18" aria-hidden="true">#</a> 练习1.18</h4><p>编译并运行本节的程序，给它输入全都相等的值。再次运行程序，输入没有重复的值。</p><p>解：</p><p>全部重复：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 1 1 1 1 
1 occurs 5 times 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>没有重复：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 2 3 4 5
1 occurs 1 times 
2 occurs 1 times 
3 occurs 1 times 
4 occurs 1 times 
5 occurs 1 times 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-19" tabindex="-1"><a class="header-anchor" href="#练习1-19" aria-hidden="true">#</a> 练习1.19</h4><p>修改你为1.4.1节练习1.11（第11页）所编写的程序（打印一个范围内的数），使其能处理用户输入的第一个数比第二个数小的情况。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Please input two num: &quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> start <span class="token operator">&gt;&gt;</span> end<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> start <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>start<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;start should be smaller than end !!!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><mark>关键概念：C++程序的缩进和格式</mark></p></li><li><p>C++程序很大程度上是格式自由的，也就是说，我们在哪里放置花括号、缩进、<br> 注释以及换行符通常不会影响程序的语义。例如，花括号表示main函数体的开始，它<br> 可以放在main的同一行中；也可以像我们所做的那样，放在下一行的起始位置；还可<br> 以放在我们喜欢的其他任何位置。唯一的要求是左花括号必须是main的形参列表后第<br> 一个非空、非注释的字符。</p></li><li><p>虽然很大程度上可以按照自己的意愿自由地设定程序的格式，但我们所做的选择<br> 会影响程序的可读性。例如，我们可以将整个main函数写在很长的单行内，虽然这样<br> 是合乎语法的，但会非常难读。</p></li><li><p>关于C/C++的正确格式的辩论是无休止的。我们的信条是，不存在唯一正确的风<br> 格，但保持一致性是非常重要的。例如，大多数程序员都对程序的组成部分设置恰当<br> 的缩进，就像我们在之前的例子中对main函数中的语句和循环体所做的那样。对于作<br> 为函数界定符的花括号，我们习惯将其放在单独一行中。我们还习惯对复合IO表达式<br> 设置缩进，以使输入输出运算符排列整齐。其他一些缩进约定也都会令越来越复杂的<br> 程序更加清晰易读。</p></li><li><p>我们要牢记一件重要的事情：其他可能的程序格式总是存在的。当你要选择一种<br> 格式风格时，思考一下它会对程序的可读性和易理解性有什么影响，而一旦选择了一<br> 种风格，就要坚持使用。</p></li></ul><h2 id="_1-5-类简介" tabindex="-1"><a class="header-anchor" href="#_1-5-类简介" aria-hidden="true">#</a> 1.5　类简介</h2><ul><li><p>在解决书店程序之前，我们还需要了解的唯一一个C++特性，就是<br> 如何定义一个数据结构（data structure）来表示销售数据。在C++中，<br> 我们通过定义一个类（class）来定义自己的数据结构。一个类定义了一<br> 个类型，以及与其关联的一组操作。类机制是C++最重要的特性之一。<br> 实际上，C++最初的一个设计焦点就是能定义使用上像内置类型一样自<br> 然的类类型（class type）。</p></li><li><p>在本节中，我们将介绍一个在编写书店程序中会用到的简单的类。<br> 当我们在后续章节中学习了更多关于类型、表达式、语句和函数的知识<br> 后，会真正实现这个类。</p></li><li><p>为了使用类，我们需要了解三件事情：<br> · 类名是什么？<br> · 它是在哪里定义的？<br> · 它支持什么操作？</p></li><li><p>对于书店程序来说，我们假定类名为Sales_item，头文件<br> Sales_item.h中已经定义了这个类。</p></li><li><p>如前所见，为了使用标准库设施，我们必须包含相关的头文件。类<br> 似的，我们也需要使用头文件来访问为自己的应用程序所定义的类。习<br> 惯上，头文件根据其中定义的类的名字来命名。我们通常使用.h作为头<br> 文件的后缀，但也有一些程序员习惯.H、.hpp或.hxx。标准库头文件通<br> 常不带后缀。编译器一般不关心头文件名的形式，但有的IDE对此有特<br> 定要求。</p></li></ul><h3 id="_1-5-1-sales-item类" tabindex="-1"><a class="header-anchor" href="#_1-5-1-sales-item类" aria-hidden="true">#</a> 1.5.1 Sales_item类</h3><ul><li><p>Sales_item类的作用是表示一本书的总销售额、售出册数和平均售<br> 价。我们现在不关心这些数据如何存储、如何计算。为了使用一个类，<br> 我们不必关心它是如何实现的，只需知道类对象可以执行什么操作。</p></li><li><p>每个类实际上都定义了一个新的类型，<mark>其类型名就是类名</mark>因此，<br> 我们的Sales_item类定义了一个名为Sales_item的类型。与内置类型一<br> 样，我们可以定义类类型的变量。当我们写下如下语句<br><code>Sales_item item;</code></p></li><li><p>是想表达item是一个Sales_item类型的对象。我们通常将“一个<br> Sales_item类型的对象”简单说成“一个Sales_item对象”，或更简单的“一<br> 个Sales_item”。</p></li><li><p>除了可以定义Sales_item类型的变量之外，我们还可以：<br> · 调用一个名为isbn的函数从一个Sales_item对象中提取ISBN书号。<br> · 用输入运算符（&gt;&gt;）和输出运算符（&lt;&lt;）读、写Sales_item类型的对象。<br> · 用赋值运算符（=）将一个Sales_item对象的值赋予另一个Sales_item对象。<br> · 用加法运算符（+）将两个Sales_item对象相加。两个对象必须表示同一本书（相同的ISBN）。加法结果是一个新的Sales_item对象，其ISBN与两个运算对象相同，而其总销售额和售出册数则是两个运算对象的对应值之和。<br> · 使用复合赋值运算符（+=）将一个Sales_item对象加到另一个对象上。</p></li><li><p><mark>关键概念：类定义了行为</mark></p></li><li><p>当你读这些程序时，一件要牢记的重要事情是，类Sales_item的作者定义了类对象<br> 可以执行的所有动作。即，Sales_item类定义了创建一个Sales_item对象时会发生什么<br> 事情，以及对Sales_item对象进行赋值、加法或输入输出运算时会发生什么事情。</p></li><li><p>一般而言，类的作者决定了类类型对象上可以使用的所有操作。当前，我们所知<br> 道的可以在Sales_item对象上执行的全部操作就是本节所列出的那些操作。</p></li><li><p><mark>读写Sales_item</mark></p></li><li><p>既然已经知道可以对Sales_item对象执行哪些操作，我们现在就可<br> 以编写使用类的程序了。例如，下面的程序从标准输入读入数据，存入<br> 一个Sales_item对象中，然后将Sales_item的内容写回到标准输出：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_item book<span class="token punctuation">;</span>
    <span class="token comment">// read ISBN, number of copies sold, and sales price</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> book<span class="token punctuation">;</span>
    <span class="token comment">// write ISBN, number of copies sold, total revenue, and average price</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> book <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果输入：<br> 0-201-70353-X 4 24.99<br> 则输出为：<br> 0-201-70353-X 4 99.96 24.99</p></li><li><p>输入表示我们以每本24.99美元的价格售出了4册书，而输出告诉我<br> 们总售出册数为4，总销售额为99.96美元，而每册书的平均销售价格为<br> 24.99美元。</p></li><li><p>此程序以两个#include指令开始，其中一个使用了新的形式。包含<br> 来自标准库的头文件时，也应该用尖括号（&lt;&gt;）包围头文件名。对于不<br> 属于标准库的头文件，则用双引号（&quot; &quot;）包围。</p></li><li><p>在main中我们定义了一个名为book的对象，用来保存从标准输入读<br> 取出的数据。下一条语句读取数据存入对象中，第三条语句将对象打印<br> 到标准输出上并打印一个endl。</p></li><li><p><mark>Sales_item对象的加法</mark></p></li><li><p>下面是一个更有意思的例子，将两个Sales_item对象相加：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_item item1<span class="token punctuation">,</span> item2<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> item1 <span class="token operator">&gt;&gt;</span> item2<span class="token punctuation">;</span> <span class="token comment">// read a pair of transactions</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item1 <span class="token operator">+</span> item2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// print their sum</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果输入如下内容：<br> 0-201-78345-X 3 20.00<br> 0-201-78345-X 2 25.00<br> 则输出为：<br> 0-201-78345-X 5 110 22</p></li><li><p>此程序开始包含了Sales_item和iostream两个头文件。然后定义了两<br> 个Sales_item对象来保存销售记录。我们从标准输入读取数据，存入两<br> 个对象之中。输出表达式完成加法运算并打印结果。</p></li><li><p>值得注意的是，此程序看起来与第5页的程序非常相似：读取两个<br> 输入数据并输出它们的和。造成如此相似的原因是，我们只不过将运算<br> 对象从两个整数变为两个Sales_item而已，但读取与打印和的运算方式<br> 没有发生任何变化。两个程序的另一个不同之处是，“和”的概念是完全<br> 不一样的。对于int，我们计算传统意义上的和——两个数值的算术加法<br> 结果。对于Sales_item对象，我们用了一个全新的“和”的概念——两个<br> Sales_item对象的成员对应相加的结果。</p></li><li><p><mark>使用文件重定向</mark></p></li><li><p>当你测试程序时，反复从键盘敲入这些销售记录作为程序的输入，是非常乏味<br> 的。大多数操作系统支持文件重定向，这种机制允许我们将标准输入和标准输出与命<br> 名文件关联起来：<code>$ addItems &lt;infile &gt;outfile</code></p></li><li><p>假定$是操作系统提示符，我们的加法程序已经编译为名为addItems.exe的可执行<br> 文件（在UNIX中是addItems），则上述命令会从一个名为infile的文件读取销售记录，<br> 并将输出结果写入到一个名为outfile的文件中，两个文件都位于当前目录中。</p></li></ul><h3 id="_1-5-1节练习" tabindex="-1"><a class="header-anchor" href="#_1-5-1节练习" aria-hidden="true">#</a> 1.5.1节练习</h3><h4 id="练习1-20" tabindex="-1"><a class="header-anchor" href="#练习1-20" aria-hidden="true">#</a> 练习1.20</h4>`,164),I={href:"http://www.informit.com/title/032174113",target:"_blank",rel:"noopener noreferrer"},N=p(`<p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>Sales_item item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./main &lt; data/add_item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0-201-78345-X 3 60 20
0-201-78345-X 2 50 25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-21" tabindex="-1"><a class="header-anchor" href="#练习1-21" aria-hidden="true">#</a> 练习1.21</h4><p>编写程序，读取两个 ISBN 相同的 Sales_item 对象，输出他们的和。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_item item_1<span class="token punctuation">;</span>
    Sales_item item_2<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> item_1<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item_1 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> item_2<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item_2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;sum of sale items: &quot;</span> <span class="token operator">&lt;&lt;</span> item_1 <span class="token operator">+</span> item_2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./main &lt; data/add_item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0-201-78345-X 3 60 20
0-201-78345-X 2 50 25
sum of sale items: 0-201-78345-X 5 110 22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习1-22" tabindex="-1"><a class="header-anchor" href="#练习1-22" aria-hidden="true">#</a> 练习1.22</h4><p>编写程序，读取多个具有相同 ISBN 的销售记录，输出所有记录的和。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_item sum_item<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> sum_item<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sum_item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Sales_item item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum_item <span class="token operator">+=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;sum of sale items: &quot;</span> <span class="token operator">&lt;&lt;</span> sum_item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./main &lt; data/add_item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0-201-78345-X 3 60 20
0-201-78345-X 2 50 25
sum of sale items: 0-201-78345-X 5 110 22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-2-初识成员函数" tabindex="-1"><a class="header-anchor" href="#_1-5-2-初识成员函数" aria-hidden="true">#</a> 1.5.2　初识成员函数</h3><ul><li>将两个Sales_item对象相加的程序首先应该检查两个对象是否具有<br> 相同的ISBN。方法如下：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_item item1<span class="token punctuation">,</span> item2<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> item1 <span class="token operator">&gt;&gt;</span> item2<span class="token punctuation">;</span>
    <span class="token comment">// first check that item1 and item2 represent the same book</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> item2<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item1 <span class="token operator">+</span> item2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// indicate success</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Data must refer to same ISBN&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// indicate failure</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>此程序与上一版本的差别是if语句及其else分支。即使不了解这个if<br> 语句的检测条件，我们也很容易理解这个程序在干什么。如果条件成<br> 立，如上一版本一样，程序打印计算结果，并返回0，表明成功。如果<br> 条件失败，我们执行跟在else之后的语句块，打印一条错误信息，并返<br> 回一个错误标识。</p></li><li><p><mark>什么是成员函数？</mark></p></li><li><p>这个if语句的检测条件<code>item1.isbn() == item2.isbn()</code></p></li><li><p>调用名为isbn的成员函数（member function）。成员函数是定义为<br> 类的一部分的函数，有时也被称为方法（method）。</p></li><li><p>我们通常以一个类对象的名义来调用成员函数。例如，上面相等表<br> 达式左侧运算对象的第一部分<code>item1.isbn()</code></p></li><li><p>使用点运算符（.）来表达我们需要“名为item1的对象的isbn成员”。<br> 点运算符只能用于类类型的对象。其左侧运算对象必须是一个类类型的<br> 对象，右侧运算对象必须是该类型的一个成员名，运算结果为右侧运算<br> 对象指定的成员。</p></li><li><p>当用点运算符访问一个成员函数时，通常我们是想（效果也确实<br> 是）调用该函数。我们使用调用运算符（（））来调用一个函数。调用<br> 运算符是一对圆括号，里面放置实参（argument）列表（可能为空）。<br> 成员函数isbn并不接受参数。因此<code>item1.isbn()</code></p></li><li><p>调用名为item1的对象的成员函数isbn，此函数返回item1中保存的<br> ISBN书号。</p></li><li><p>在这个if条件中，相等运算符的右侧运算对象也是这样执行的——<br> 它返回保存在item2中的ISBN书号。如果ISBN相同，条件为真，否则为假。</p></li></ul><h3 id="_1-5-2节练习" tabindex="-1"><a class="header-anchor" href="#_1-5-2节练习" aria-hidden="true">#</a> 1.5.2节练习</h3><h4 id="练习1-23" tabindex="-1"><a class="header-anchor" href="#练习1-23" aria-hidden="true">#</a> 练习1.23</h4><p>编写程序，读取多条销售记录，并统计每个 ISBN（每本书）有几条销售记录。</p><h4 id="练习1-24" tabindex="-1"><a class="header-anchor" href="#练习1-24" aria-hidden="true">#</a> 练习1.24</h4><p>输入表示多个 ISBN 的多条销售记录来测试上一个程序，每个 ISBN 的记录应该聚在一起。</p><p>解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_item total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Sales_item trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                total <span class="token operator">+=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./main &lt; data/book_sales
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0-201-70353-X 4 99.96 24.99
0-201-82470-1 4 181.56 45.39
0-201-88954-4 16 198 12.375
0-399-82477-1 5 226.95 45.39
0-201-78345-X 5 110 22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-6-书店程序" tabindex="-1"><a class="header-anchor" href="#_1-6-书店程序" aria-hidden="true">#</a> 1.6　书店程序</h2><ul><li><p>现在我们已经准备好完成书店程序了。我们需要从一个文件中读取<br> 销售记录，生成每本书的销售报告，显示售出册数、总销售额和平均售<br> 价。我们假定每个ISBN书号的所有销售记录在文件中是聚在一起保存的。</p></li><li><p>我们的程序会将每个ISBN的所有数据合并起来，存入名为total的变<br> 量中。我们使用另一个名为trans的变量保存读取的每条销售记录。如果<br> trans和total指向相同的ISBN，我们会更新total的值。否则，我们会打印<br> total的值，并将其重置为刚刚读取的数据（trans）：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Sales_item.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 Sales_item total<span class="token punctuation">;</span> <span class="token comment">// variable to hold data for the next transaction</span>
 <span class="token comment">// read the first transaction and ensure that there are data to process</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Sales_item trans<span class="token punctuation">;</span> <span class="token comment">// variable to hold the running sum</span>
    <span class="token comment">// read and process the remaining transactions</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// if we&#39;re still processing the same book</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            total <span class="token operator">+=</span> trans<span class="token punctuation">;</span> <span class="token comment">// update the running total</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// print results for the previous book</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
            total <span class="token operator">=</span> trans<span class="token punctuation">;</span> <span class="token comment">// total now refers to the next book</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// print the last transaction</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// no input! warn the user</span>
    std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// indicate failure</span>
  <span class="token punctuation">}</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这是到目前为止我们看到的最复杂的程序了，但它所使用的都是我<br> 们已经见过的语言特性。</p></li><li><p>与往常一样，首先包含要使用的头文件：来自标准库的iostream和<br> 自己定义的Sales_item.h。在main中，我们定义了一个名为total的变量，<br> 用来保存一个给定的ISBN的数据之和。我们首先读取第一条销售记<br> 录，存入total中，并检测这次读取操作是否成功。如果读取失败，则意<br> 味着没有任何销售记录，于是直接跳到最外层的else分支，打印一条警<br> 告信息，告诉用户没有输入。</p></li><li><p>假定已经成功读取了一条销售记录，我们继续执行最外层if之后的<br> 语句块。这个语句块首先定义一个名为trans的对象，它保存读取的销售<br> 记录。接下来的while语句将读取剩下的所有销售记录。与我们之前的<br> 程序一样，while条件是一个从标准输入读取值的操作。在本例中，我<br> 们读取一个Sales_item对象，存入trans中。只要读取成功，就执行while<br> 循环体。</p></li><li><p>while的循环体是一个单个的if语句，它检查ISBN是否相等。如果相<br> 等，使用复合赋值运算符将trans加到total中。如果ISBN不等，我们打印<br> 保存在total中的值，并将其重置为trans的值。在执行完if语句后，返回<br> 到while的循环条件，读取下一条销售记录，如此反复，直至所有销售<br> 记录都处理完。</p></li><li><p>当while语句终止时，total保存着文件中最后一个ISBN的数据。我<br> 们在语句块的最后一条语句中打印这最后一个ISBN的total值，至此最外<br> 层if语句就结束了。</p></li></ul><h3 id="_1-6节练习" tabindex="-1"><a class="header-anchor" href="#_1-6节练习" aria-hidden="true">#</a> 1.6节练习</h3><h4 id="练习1-25" tabindex="-1"><a class="header-anchor" href="#练习1-25" aria-hidden="true">#</a> 练习1.25</h4><p>借助网站上的<code>Sales_item.h</code>头文件，编译并运行本节给出的书店程序。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ul><li>本章介绍了足够多的C++语言的知识，以使你能够编译、运行简单<br> 的C++程序。我们看到了如何定义一个main函数，它是操作系统执行你<br> 的程序的调用入口。我们还看到了如何定义变量，如何进行输入输出，<br> 以及如何编写if、for和while语句。本章最后介绍了C++中最基本的特性<br> ——类。在本章中，我们看到了，对于其他人定义的一个类，我们应该<br> 如何创建、使用其对象。在后续章节中，我们将介绍如何定义自己的类。</li></ul><h2 id="术语表" tabindex="-1"><a class="header-anchor" href="#术语表" aria-hidden="true">#</a> 术语表</h2><ul><li><p>参数（实参，argument）向函数传递的值。【实参和形参的区别？？？】</p></li><li><p>赋值（assignment）抹去一个对象的当前值，用一个新值取代之。</p></li><li><p>程序块（block）零条或多条语句的序列，用花括号包围。</p></li><li><p>缓冲区（buffer）一个存储区域，用于保存数据。IO设施通常将输<br> 入（或输出）数据保存在一个缓冲区中，读写缓冲区的动作与程序中的<br> 动作是无关的。我们可以显式地刷新输出缓冲，以便强制将缓冲区中的<br> 数据写入输出设备。默认情况下，读cin会刷新cout；程序非正常终止时<br> 也会刷新cout。</p></li><li><p>内置类型（built-in type）由语言定义的类型，如int。</p></li><li><p>Cerr 一个ostream对象，关联到标准错误，通常写入到与标准输出<br> 相同的设备。默认情况下，写到cerr的数据是不缓冲的。cerr通常用于输<br> 出错误信息或其他不属于程序正常逻辑的输出内容。</p></li><li><p>字符串字面值常量（character string literal）术语string literal的另一种叫法。</p></li><li><p>cin 一个istream对象，用来从标准输入读取数据。</p></li><li><p>类（class）一种用于定义自己的数据结构及其相关操作的机制。类<br> 是C++中最基本的特性之一。标准库类型中，如istream和ostream都是类。</p></li><li><p>类类型（class type）类定义的类型。类名即为类型名。</p></li><li><p>clog一个ostream对象，关联到标准错误。默认情况下，写到clog的<br> 数据是被缓冲的。clog通常用于报告程序的执行信息，存入一个日志文<br> 件中。</p></li><li><p>注释（comment）被编译器忽略的程序文本。C++有两种类型的注<br> 释：单行注释和界定符对注释。单行注释以//开始，从//到行尾的所有内<br> 容都是注释。界定符对注释以/＊开始，其后的所有内容都是注释，直<br> 至遇到＊/为止。</p></li><li><p>条件（condition）求值结果为真或假的表达式。通常用值0表示<br> 假，用非零值表示真。</p></li><li><p>cout 一个ostream对象，用于将数据写入标准输出。通常用于程序<br> 的正常输出内容。</p></li><li><p>花括号（curly brace）花括号用于划定程序块边界。左花括号<br> （{）为程序块开始，右花括号（}）为结束。</p></li><li><p>数据结构（data structure）数据及其上所允许的操作的一种逻辑组合。</p></li><li><p>编辑-编译-调试（edit-compile-debug）使程序能正确执行的开发过程。</p></li><li><p>文件结束符（end-of-file） 系统特定的标识，指出文件中无更多数据了。</p></li><li><p>表达式（expression）最小的计算单元。一个表达式包含一个或多<br> 个运算对象，通常还包含一个或多个运算符。表达式求值会产生一个结<br> 果。例如，假设i和j是int对象，则i+j是一个表达式，它产生两个int值的和。</p></li><li><p>for语句（for statement）迭代语句，提供重复执行能力。通常用来<br> 将一个计算反复执行指定次数。</p></li><li><p>函数（function）具名的计算单元。</p></li><li><p>函数体（function body）语句块，定义了函数所执行的动作</p></li><li><p>函数名（function name） 函数为人所知的名字，也用来进行函数<br> 调用。</p></li><li><p>头文件（header）使类或其他名字的定义可被多个程序使用的一种<br> 机制。程序通过#include指令使用头文件。</p></li><li><p>if语句（if statement）根据一个特定条件的值进行条件执行的语<br> 句。如果条件为真，执行if语句体。否则，执行else语句体（如果存在的<br> 话）。</p></li><li><p>初始化（initialize）在一个对象创建的时候赋予它一个值。</p></li><li><p>iostream头文件，提供了面向流的输入输出的标准库类型。</p></li><li><p>istream 提供了面向流的输入的库类型。</p></li><li><p>库类型（library type）标准库定义的类型，如istream。</p></li><li><p>main 操作系统执行一个C++程序时所调用的函数。每个程序必须<br> 有且只有一个命名为main的函数。</p></li><li><p>操纵符（manipulator）对象，如std：：endl，在读写流的时候用来“操纵”流本身。</p></li><li><p>成员函数（member function）类定义的操作。通常通过调用成员函数来操作特定对象。</p></li><li><p>方法（method）成员函数的同义术语。</p></li><li><p>命名空间（namespace）将库定义的名字放在一个单一位置的机<br> 制。命名空间可以帮助避免不经意的名字冲突。C++标准库定义的名字<br> 在命名空间std中。</p></li><li><p>ostream标准库类型，提供面向流的输出。</p></li><li><p>形参列表（parameter list）函数定义的一部分，指出调用函数时可<br> 以使用什么样的实参，可能为空列表。</p></li><li><p>返回类型（return type）函数返回值的类型。</p></li><li><p>源文件（source file）包含C++程序的文件。</p></li><li><p>标准错误（standard error）输出流，用于报告错误。标准输出和<br> 标准错误通常关联到程序执行所在的窗口。</p></li><li><p>标准输入（standard input）输入流，通常与程序执行所在窗口相关联。</p></li><li><p>标准库（standard library）一个类型和函数的集合，每个C++编译<br> 器都必须支持。标准库提供了支持IO操作的类型。C++程序员倾向于<br> 用“库”指代整个标准库，还倾向于用库类型表示标准库的特定部分，例<br> 如用“iostream库”表示标准库中定义IO类的部分。</p></li><li><p>标准输出（standard output）输出流，通常与程序执行所在窗口相关联。</p></li><li><p>语句（statement）程序的一部分，指定了当程序执行时进行什么<br> 动作。一个表达式接一个分号就是一条语句；其他类型的语句包括语句<br> 块、if语句、for语句和while语句，所有这些语句内都包含其他语句。</p></li><li><p>std 标准库所使用的命名空间。std：：cout表示我们要使用定义在<br> 命名空间std中的名字cout。</p></li><li><p>字符串常量（string literal）零或多个字符组成的序列，用双引号<br> 包围（&quot;a string literal&quot;）。</p></li><li><p>未初始化的变量（uninitialized variable）未赋予初值的变量。类<br> 类型的变量如果未指定初值，则按类定义指定的方式进行初始化。定义<br> 在函数内部的内置类型变量默认是不初始化的，除非有显式的初始化语<br> 句。试图使用一个未初始化变量的值是错误的。未初始化变量是bug的<br> 常见成因。</p></li><li><p>变量（variable）具名对象。</p></li><li><p>while语句（while statement）迭代语句，提供重复执行直至一个特<br> 定条件为假的机制。循环体会执行零次或多次，依赖于循环条件求值结果。</p></li><li><p>（）运算符（（） operator）调用运算符。跟随在函数名之后的一<br> 对括号“（）”，起到调用函数的效果。传递给函数的实参放置在括号内。</p></li><li><p>++运算符（++ operator）递增运算符。将运算对象的值加1，++i<br> 等价于i=i+1。</p></li><li><p>+=运算符（+= operator）复合赋值运算符，将右侧运算对象加到<br> 左侧运算对象上；a+=b等价于a=a+b。</p></li><li><p>.运算符（.operator）点运算符。左侧运算对象必须是一个类类型<br> 对象，右侧运算对象必须是此对象的一个成员的名字。运算结果即为该<br> 对象的这个成员。</p></li><li><p>：：运算符（：： operator）作用域运算符。其用处之一是访问命<br> 名空间中的名字。例如，std：：cout表示命名空间std中的名字cout。<br> =运算符（= operator）将右侧运算对象的值赋予左侧运算对象所<br> 表示的对象。</p></li><li><p>--运算符（-- operator）递减运算符。将运算对象的值减1，--i等价<br> 于i=i-1。</p></li><li><p><code>&lt;&lt;运算符（&lt;&lt;operator）输出运算符。将右侧运算对象的值写到左</code><br> 侧运算对象表示的输出流：cout &lt;&lt;&quot;hi&quot;表示将hi写到标准输出。输出运<br> 算符可以连接：cout &lt;&lt;&quot;hi&quot; &lt;&lt;&quot;bye&quot;表示将输出hibye。</p></li><li><p><code>&gt;&gt;运算符（&gt;&gt;operator）输入运算符</code>。从左侧运算对象所指定的输<br> 入流读取数据，存入右侧运算对象中：cin &gt;&gt;i表示从标准输入读取下一<br> 个值，存入i中。输入运算符可以连接：cin &gt;&gt;i &gt;&gt;j表示先读取一个值存<br> 入i，再读取一个值存入j。</p></li><li><p>#include头文件包含指令，使头文件中代码可被程序使用。</p></li><li><p><code>==运算符（== operator）相等运算符。检测左侧运算对象是否等于右侧运算对象。</code></p></li><li><p>！=运算符（！= operator）不等运算符。检测左侧运算对象是否<br> 不等于右侧运算对象。</p></li><li><p>&lt;=运算符（&lt;= operator）小于等于运算符。检测左侧运算对象是<br> 否小于等于右侧运算对象。</p></li><li><p><code>&lt;运算符（&lt;operator）小于运算符。检测左侧运算对象是否小于右侧运算对象。</code></p></li><li><p><code>&gt;=运算符（&gt;= operator）大于等于运算符。检测左侧运算对象是否大于等于右侧运算对象。</code></p></li><li><p><code>&gt;运算符（&gt;operator）大于运算符。检测左侧运算对象是否大于右侧运算对象。</code></p></li></ul>`,48);function B(E,X){const e=o("router-link"),l=o("ExternalLinkIcon");return c(),r("div",null,[k,v,u(" more "),m,n("nav",b,[n("ul",null,[n("li",null,[a(e,{to:"#第1章-开始-结束"},{default:t(()=>[s("第1章　开始[结束]")]),_:1})]),n("li",null,[a(e,{to:"#_1-1-编写一个简单的c-程序"},{default:t(()=>[s("1.1　编写一个简单的C++程序")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-1-1-编译、运行程序"},{default:t(()=>[s("1.1.1 编译、运行程序")]),_:1})]),n("li",null,[a(e,{to:"#_1-1节练习"},{default:t(()=>[s("1.1节练习")]),_:1})])])]),n("li",null,[a(e,{to:"#_1-2-初识输入输出"},{default:t(()=>[s("1.2　初识输入输出")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-2节练习"},{default:t(()=>[s("1.2节练习")]),_:1})])])]),n("li",null,[a(e,{to:"#_1-3-注释简介"},{default:t(()=>[s("1.3　注释简介")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-3节练习"},{default:t(()=>[s("1.3节练习")]),_:1})])])]),n("li",null,[a(e,{to:"#_1-4-控制流"},{default:t(()=>[s("1.4　控制流")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-4-1-while语句"},{default:t(()=>[s("1.4.1 while语句")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-1节练习"},{default:t(()=>[s("1.4.1节练习")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-2-for语句"},{default:t(()=>[s("1.4.2 for语句")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-2节练习"},{default:t(()=>[s("1.4.2节练习")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-3-读取数量不定的输入数据"},{default:t(()=>[s("1.4.3　读取数量不定的输入数据")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-3节练习"},{default:t(()=>[s("1.4.3节练习")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-4-if语句"},{default:t(()=>[s("1.4.4 if语句")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-4节练习"},{default:t(()=>[s("1.4.4节练习")]),_:1})])])]),n("li",null,[a(e,{to:"#_1-5-类简介"},{default:t(()=>[s("1.5　类简介")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-5-1-sales-item类"},{default:t(()=>[s("1.5.1 Sales_item类")]),_:1})]),n("li",null,[a(e,{to:"#_1-5-1节练习"},{default:t(()=>[s("1.5.1节练习")]),_:1})]),n("li",null,[a(e,{to:"#_1-5-2-初识成员函数"},{default:t(()=>[s("1.5.2　初识成员函数")]),_:1})]),n("li",null,[a(e,{to:"#_1-5-2节练习"},{default:t(()=>[s("1.5.2节练习")]),_:1})])])]),n("li",null,[a(e,{to:"#_1-6-书店程序"},{default:t(()=>[s("1.6　书店程序")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-6节练习"},{default:t(()=>[s("1.6节练习")]),_:1})])])]),n("li",null,[a(e,{to:"#小结"},{default:t(()=>[s("小结")]),_:1})]),n("li",null,[a(e,{to:"#术语表"},{default:t(()=>[s("术语表")]),_:1})])])]),h,n("ul",null,[g,n("li",null,[n("p",null,[s("无论你使用命令行界面或者IDE，大多数编译器都要求程序源码存"),f,s(" 储在一个或多个文件中。程序文件通常被称为源文件（source file）。在"),w,s(" 大多数系统中，源文件的名字以一个后缀为结尾，后缀是由一个句点后"),_,s(" 接一个或多个字符组成的。后缀告诉系统这个文件是一个C++程序。不"),y,s(" 同编译器使用不同的后缀命名约定，"),n("a",x,[s("最常见的包括.cc"),a(l)]),s("、.cxx、.cpp、.cp"),q,s(" 及.C。")])]),S]),C,n("p",null,[s("在网站"),n("a",I,[s("http://www.informit.com/title/032174113"),a(l)]),s(" 上，第1章的代码目录包含了头文件 Sales_item.h。将它拷贝到你自己的工作目录中。用它编写一个程序，读取一组书籍销售记录，将每条记录打印到标准输出上。")]),N])}const U=i(d,[["render",B],["__file","B-第一章开始.html.vue"]]);export{U as default};
