import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as r,d as i,a as s,e as p,w as e,b as a,f as c}from"./app-2a2d189a.js";const k={},u=s("h1",{id:"e-第5章网络配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#e-第5章网络配置","aria-hidden":"true"},"#"),a(" E-第5章网络配置")],-1),m=s("p",null,"E-第5章网络配置",-1),P=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"说明"),s("p",null,"主要是各种搜索找的学习；")],-1),d={class:"table-of-contents"},b=c(`<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="e-第5章网络配置-1" tabindex="-1"><a class="header-anchor" href="#e-第5章网络配置-1" aria-hidden="true">#</a> E-第5章网络配置</h2><h2 id="一、网络配置与系统管理操作" tabindex="-1"><a class="header-anchor" href="#一、网络配置与系统管理操作" aria-hidden="true">#</a> 一、网络配置与系统管理操作</h2><ul><li><p>我们现已了解 Linux 的文件系统目录结构，也掌握了 Vim 编辑器的基本用法，接下来有足够的基础学习 Linux 中的各类命令。</p></li><li><p>首先介绍网络配置和系统管理操作，主要因这部分涉及的 Linux 命令相对简单且较少，容易记忆，后续还有大量命令需记忆。此部分上手方便，实用性强，对后续特别是大数据管理的学习，是重要的基础。</p></li><li><p>首先看网络如何配置。在大数据处理场景中，通常面对的是由众多服务器构成的集群。这些服务器一般置于专业机房，机房内服务器排列整齐，运行时嗡嗡作响，门外常贴有“机房重地，闲人免进”的标识。因此，无法直接进入操作服务器，或者许多中小公司直接使用云服务器，更无法直接接触实体机器。</p></li><li><p>那如何操作和配置这些机器呢？此时需要一台远程控制电脑，通常个人电脑即可。控制电脑需与服务器集群建立连接，实现数据通信，即能发送指令，服务器的状态、数据也能返回控制台，从而实现远程登录操控、上传文件和下载数据等，这是理想的控制方案。</p></li><li><p>若要实现这种远程操控服务器的方式，前提是先配置好网络连接。若主机与服务器集群无法通信，就无法远程操控。所以，网络配置主要指此方面。不仅主机和服务器间需连接，服务器彼此间也要连接，因为大数据场景中的服务器并非各自为政，而是分布式集群，彼此间需有数据交流，所有机器能完美通信才行。</p></li><li><p>在当前实验场景中，未使用真实服务器。若条件允许，可购买云服务，如阿里云机器自行搭建测试。而当前需确保主机（物理机）和虚拟机间能完美通信，即主机能连接虚拟机并发送数据，虚拟机也能连接主机并接收数据。之前测试安装虚拟机时，曾用 Firefox 上网，发现虚拟机可连接百度，看似网络连接已配置好，但仍需测试与主机间能否连接通信。</p></li><li><p>这里介绍一个用于网络检测的经典小工具或命令——Ping。此命令在 Windows 和 Linux 中通用，用于检测两台机器间能否正常发送数据和通信。通常通过 Ping 一台主机，查看能否连接成功。其用法是在“Ping”后加上主机的 IP 地址，关键是要知道需 Ping 的机器的 IP。</p></li><li><p>实际操作时，打开终端或控制台，可放大字体。直接 Ping 时，不仅可加 IP，也可加域名或主机名，比如可直接 Ping 百度。若要 Ping 自己的主机，先按 Ctrl + c 停止当前操作。若要 Ping 主机，需先知晓主机的 IP 地址。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>PING www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span><span class="token function">com</span><span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b <span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b <span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b<span class="token punctuation">)</span><span class="token operator">:</span> icmp_seq<span class="token operator">=</span><span class="token number">1</span> ttl<span class="token operator">=</span><span class="token number">48</span> time<span class="token operator">=</span><span class="token number">15.5</span> ms
<span class="token number">64</span> bytes from <span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b <span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b<span class="token punctuation">)</span><span class="token operator">:</span> icmp_seq<span class="token operator">=</span><span class="token number">2</span> ttl<span class="token operator">=</span><span class="token number">48</span> time<span class="token operator">=</span><span class="token number">15.9</span> ms
q64 bytes from <span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b <span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b<span class="token punctuation">)</span><span class="token operator">:</span> icmp_seq<span class="token operator">=</span><span class="token number">3</span> ttl<span class="token operator">=</span><span class="token number">48</span> time<span class="token operator">=</span><span class="token number">15.3</span> ms
<span class="token number">64</span> bytes from <span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b <span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b<span class="token punctuation">)</span><span class="token operator">:</span> icmp_seq<span class="token operator">=</span><span class="token number">4</span> ttl<span class="token operator">=</span><span class="token number">48</span> time<span class="token operator">=</span><span class="token number">15.6</span> ms
<span class="token number">64</span> bytes from <span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b <span class="token punctuation">(</span><span class="token number">240</span>e<span class="token operator">:</span>ff<span class="token operator">:</span>e020<span class="token operator">:</span><span class="token number">9</span>ae<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span>ff<span class="token operator">:</span>b014<span class="token operator">:</span><span class="token number">8e8</span>b<span class="token punctuation">)</span><span class="token operator">:</span> icmp_seq<span class="token operator">=</span><span class="token number">5</span> ttl<span class="token operator">=</span><span class="token number">48</span> time<span class="token operator">=</span><span class="token number">15.8</span> ms
<span class="token operator">^</span>C
<span class="token operator">--</span><span class="token operator">-</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com ping statistics <span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">5</span> packets transmitted<span class="token punctuation">,</span> <span class="token number">5</span> received<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> packet loss<span class="token punctuation">,</span> time <span class="token number">4003</span>ms
rtt min<span class="token operator">/</span>avg<span class="token operator">/</span>max<span class="token operator">/</span>mdev <span class="token operator">=</span> <span class="token number">15.315</span><span class="token operator">/</span><span class="token number">15.620</span><span class="token operator">/</span><span class="token number">15.912</span><span class="token operator">/</span><span class="token number">0.215</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对于熟悉 Windows 系统的同学，这并非难事。比如，可先打开网络设置，点击属性进入网络和 Internet 配置，或在任务栏点击网络图标进入。对于 Win10、Win11 系统不熟悉的，可点击高级网络设置，再点击更多网络适配器选项，此页面展示了所有网络连接。</p></li><li><p>查看当前网络连接，虽有 6 个，但部分断开未连接，如 WLAN 未连接，当前使用的是有线网，即以太网网络 2，其中还有宽带、蓝牙等未使用。比较奇怪的是，有两个保持连接的网络，分别是“Vmware network Adapter VMNET1”和“VMNET8”，显然与 Vmware 有关。若要查看虚拟机与主机是否相通，应查看以太网网络 2 的 IP 能否 Ping 通。关键是要知道此 IP 是多少。</p></li><li><p>通常，在家或公司等场景，多连接到局域网，通过路由器自动分配 IP 即可上网。此时 IP 为自动获取，若要查看，可右键点击状态，再点击详细信息，可看到 IP 地址为 172.17.0.178。此为局域网中的 IP 地址，并非外网连接的 IP。可通过上网测试，很多网页有 IP 查询功能，比如查询结果可能为北京电信的 IP 为 115.171.202.120，与本地 IP 不同。</p></li><li><p>这是因当前架构中有路由器，如在公司上网，路由器接入外网（如光纤等），下面电脑连接路由器形成局域网。上网时使用的 IP 分两种，一种是外网 IP，由服务提供商分配；另一种是本地电脑在局域网中的 IP。对于为何是 172.17 开头，而非熟悉的 192.168，这涉及计算机网络知识。通常构建私有网络的 C 类地址，其子网网段以 192.168 开头；B 类地址则以 172.16 等开头，当前在公司上网，公网地址为 B 类，子网网段即 172 开头。</p></li><li><p>若觉得 IP 地址无法直接复制需背诵较麻烦，有简单方法。可按 Windows 徽标键 + r 打开运行窗口，输入 CMD 回车或确定，打开命令提示符服务。在 Windows 中有个著名命令“IPconfig”，用于查询当前 IP 网络配置，点击后所有网络连接信息都可看到，所需的是以太网适配器的 IPv4 地址 172.17.0.178。上面还有个以太网适配器不重要，其中的 WSL 是 Windows subsystem for Linux，即 Win10 及以后版本自带的 Linux 系统，相当于虚拟网卡构建的网络连接。</p></li><li><p>获取此 IP 后，选中并按 Ctrl + c 复制，回到虚拟机使用 Ping 命令，通过快捷键 Ctrl + Shift + v 粘贴进行连接，可 Ping 通，延迟仅零点几毫秒，能接收发送的数据，按 Ctrl + c 退出。说明虚拟机可接收主机信息。</p></li><li><p>反过来，主机能否接收虚拟机信息，即能否 Ping 通虚拟机，需知道虚拟机的 IP。虚拟机的 IP 可在图形界面点击获取，如通过系统工具、设置、网络中的有线连接查看，其 IPv4 地址为 192.168.111.129。若在 Linux 系统中敲命令，不是“IPconfig”，而是“ifconfig”，即“network interface config”（网络接口配置），回车后可看到当前局域网名称为 ENS33，IP 为 192.168.111.129，复制（Ctrl + Shift + c）。其中“LO”对应的 127.0.0.1 是回环地址，下面的“Vir”是 Linux 系统中创建的虚拟网络。</p></li><li><p>复制后到 Windows 中 Ping 虚拟机，可 Ping 通，Windows 回复 4 次后自动退出。由此可见，网络连接没问题，但存在两个问题：一是虚拟机网络地址为 192.168.111.129，Windows 主机 IP 为 172.17.0.178，不在同一网段却能 Ping 通；二是网络连接中为何 Vmware 创建了两个额外网络“VMNET1”和“VMNET8”。带着这两个问题，探讨 Vmware 创建的网络情况。</p></li></ul><h2 id="二、虚拟机网络连接模式" tabindex="-1"><a class="header-anchor" href="#二、虚拟机网络连接模式" aria-hidden="true">#</a> 二、虚拟机网络连接模式</h2><ul><li><p>通过刚才的测试，我们发现主机和虚拟机之间可以互相连接，能够互相 Ping 通。既然已连接，我们自然会想到，如果有相应的远程登录或远程传输文件的软件，并配置好连接，就可以进行远程操控。</p></li><li><p>但我们仍有疑问，虽然连接没问题，但主机的 IP 和虚拟机的 IP 不在同一网段，一个是 B 类地址对应的子网 IP，一个是 C 类地址子网的 IP，它们是如何互通的？此外，Vmware 为我们创建了两个虚拟网络，即“VMNET1”和“VMNET8”，这又是怎么回事？接下来我们将解答这些问题。</p></li><li><p>首先，查看已连接网络的状态信息和详细信息。比如，VMNET1 的地址是 192.168.116.1，这是 C 类地址的子网地址，其子网掩码是三个 255。但此地址与虚拟机的地址（前三位）不同，所以 VMNET1 与虚拟机不在同一网段。</p></li><li><p>再看 VMNET8 的详细信息，其地址为 192.168.111.1，与虚拟机地址的前三位相同，在同一局域网内，可互相连接和 Ping 通。若不相信，可在当前 Linux 环境下直接 Ping 此 IP，能 Ping 通。而若 Ping 192.168.116.1 则不通。</p></li><li><p>这涉及到 Vmware 对虚拟机网络连接和搭建模式的问题。还记得最初创建虚拟机时做过网络连接配置，当时选的是 NAT 模式。若忘记也没关系，在左边菜单栏右键当前创建的虚拟机名称，点击设置，可看到硬件设置，包括网络识别器（即网卡）的连接方式为 NAT。</p></li><li><p>当时网络连接，Vmware 为我们提供了三种不同的连接方式，即桥接模式、NAT 模式和仅主机模式，自定义模式暂不讨论，一般常用这三种模式，下面详细介绍其含义。</p></li><li><p>桥接模式指虚拟机直接连接到外部物理网络。此时主机起网桥作用，连接结构较简单。比如，有 Internet（外网），通常家里或公司上网会有路由器，所有电脑通过无线或有线方式连接到路由器。若配置自动获取 IP，路由器的 DHCP 服务器可动态分配 IP 避免冲突。如此，所有电脑构建了一个局域网，能看到对应的 IP 地址。</p></li><li><p>若在个人主机（PC）上创建虚拟机（VM），若 VM 要连接外网，在桥接模式下，采取的是简单粗暴的方式，即搭建虚拟网桥，可理解为简单的网络连接扩展设备。从 PC 的网卡虚拟出网桥，连接到虚拟机。若有多个虚拟机，需虚拟交换机扩展设备。如此，虚拟机通过此路径连接路由器上网。在此过程中，虚拟机和 PC 都直接连接到路由器，由路由器分配 IP，也可手动指定静态 IP，但不能冲突。本质上，它们处于同一局域网，是平等关系。</p></li><li><p>若在公司环境中，同事可访问此虚拟机，但无隐私，且会占用局域网内的 IP。若公司网络是 B 类地址，子网扩展的 IP 较多；若是 C 类地址，子网掩码前三位都是 255，只有最后一位可分配 IP 地址，即 1 到 254，虚拟机增多会导致 IP 不够用。因此，桥接模式架构虽简单，但实际应用较少。</p></li><li><p>那一般用哪种方式呢？通常用第二种方式，即 NAT 模式。NAT 是“network address transaction”（网络地址转换）的缩写，其含义是虚拟机和主机构建专用网络，通过 Nat 设备对 IP 进行转换，虚拟机不再直接通过外部路由器访问外网，而是共享主机的 IP 进行外部访问，外部网络无法直接访问虚拟机。</p></li><li><p>画图说明，外网（Internet）通过路由器使局域网内设备上网，个人主机上创建了 VM。之前的桥接模式用交换机、网桥，无路由功能。现在虚拟出类似路由器的东西，即创建了一个 Nat 服务器进行网络地址转换和一个 DHCP 服务器进行动态地址分配。</p></li><li><p>连接方式变成：主机网卡接到路由，路由接入外网，此路由是唯一入口，为虚拟机分配子网 IP。这相当于电脑上虚拟出一个局域网，主机的 172 开头的 IP 与虚拟机的 192.168 开头的 IP 不在同一网段，因为是两个不同的局域网，虚拟机是 Vmware 默认的 C 类地址子网。</p></li><li><p>若虚拟机访问 PC，如同 PC 访问外网，由路由做地址转换。进一步，路由转换虚拟机子网地址，再通过外部路由转换到外网，虚拟机可上外网和访问 PC，但 PC 无法访问虚拟机。</p></li><li><p>Vmware 的解决方案是为 PC 虚拟一个网卡，即“VMNET8”，其 IP 与虚拟机在同一网段、同一局域网，解决了通信问题。而“VMNET1”对应的是仅主机模式。</p></li><li><p>仅主机模式指虚拟机与主机共享专用网络，且只与主机共享，无外部通信渠道。可理解为之前的图中把路由器换成交换机，PC 虚拟出网卡直接连到交换机，与虚拟机构建局域网，VM 只能彼此访问和访问 PC，无法连接外网，PC 可上外网和访问 VM。</p></li><li><p>这三种模式各有利弊。桥接模式状态简单，配置要点是虚拟机和物理机必须在同一网段，配置 IP、子网掩码、默认网关、DNS 时需注意不能冲突，前三位相同，最后一位不同。但桥接模式存在占用 IP、不安全等问题。</p></li><li><p>NAT 模式安全性和私密性更好，可访问外网，外网不能访问，学习测试时常用。实际生产环境也可用，若做专门测试，不需要与外部连接，可用仅主机模式，绝对安全。</p></li><li><p>前面提到 NAT 模式虚拟出的网卡叫“VMNET8”，仅主机模式虚拟出的网卡叫“VMNET1”。</p></li><li><p>可在虚拟机中查看 Vmware 的相关网络设置获取答案。编辑虚拟网络编辑器，可看到“VMNET1”“VMNET8”。“VMNET1”对应仅主机模式，“VMNET8”对应 NAT 模式。开启管理员特权可编辑，桥接模式叫“VMNET0”。若配置桥接模式，需将能上网的网络适配器配置好相关信息。</p></li><li><p>NAT 模式的子网地址是 192.168.111.0，可看到 DHCP 设置自动分配的范围是 128 到 254，所以之前看到的虚拟机 IP 是 129。还可看到 NAT 设置中的网关，C 类子网掩码通常是三个 255 和一个 0，网关是 2。而主机虚拟网卡的地址是 1，因为虚拟网卡和虚拟机都连接到路由器，路由器 IP 是 111.2，作为网关实现上网。路由器的 NAT 服务将地址转换，主机访问外网时再经上层路由器转换地址，从而实现连接外网访问。</p></li><li><p>至此，之前提出的问题都得到了解答。</p></li></ul><h2 id="三、虚拟机网络连接配置与静态-ip-设置" tabindex="-1"><a class="header-anchor" href="#三、虚拟机网络连接配置与静态-ip-设置" aria-hidden="true">#</a> 三、虚拟机网络连接配置与静态 IP 设置</h2><ul><li><p>现已了解 Vmware 提供的三种网络连接模式，并知晓当前的连接状态为 NAT 模式，其主要组织结构是构建了一个虚拟子网，称为 VMNET8，子网地址为 192.168.111.0，网关地址设为 111.2。同时，主机这边还虚拟了一张网卡，地址为 192.168.111.1。在 DHCP 设置时避开了 1 和 2 这两个地址范围，当前分配的 IP 为 111.129。如此，它们可在虚拟子网中无 IP 冲突地共存，实现和谐访问。而且，NAT 模式能进行网络地址转换，通过此路由可连接外网访问。这便是当前的连接状态。</p></li><li><p>接下来，考虑对当前连接状态进行更改和网络配置。或许有人会疑惑，当前 NAT 模式完美，能上外网，主机与虚拟机能安全通信，IP 分配合理，无需更改。诚然，直接使用当前配置运行后续集群操作可行，但存在一个问题：当前使用 DHCP 服务器进行动态 IP 分配，若虚拟机或服务器重启、配置更改，IP 可能改变。在服务器管理场景中，这会带来诸多麻烦，每次都需查询服务器的新 IP。实际应用中，服务器通常使用静态 IP 地址，指定某台电脑为特定 IP，如 111.1，后续连接时直接输入该 IP 即可，无需查询动态分配的 IP。</p></li><li><p>接下来，探讨如何将当前 IP 改为静态。在 Windows 中，更改静态 IP 较简单，比如要更改 VMNET8 的 IP，打开 TCP/IP4，不选择自动获取，填写相应 IP 即可，网段与虚拟子网相同，如 192.168.111.1，子网掩码为 255.255.0.0，默认网关为 2，DNS 也可用 2。通常，将虚拟机设为静态 IP 以便主机远程操控，主机则无必要，虚拟机若要连接主机或上网，可通过虚拟路由器进行 NAT 地址转换获取，无需指定静态 IP。</p></li><li><p>重点讲解在虚拟机中指定静态 IP 的方法。在修改静态 IP 前，VMware 可修改虚拟子网的相关配置，开启超级管理员权限即可。比如，可将子网 IP 从 192.168.111.0 改为 100.0 等，同时注意修改网关及主机、虚拟机的 IP 配置。若不改，当前仍使用 111 网段也无妨。</p></li><li><p>在 Linux 中修改静态 IP，图形化界面与 Windows 类似，若在终端控制台操作，则需更改配置文件。回忆可知，所有配置文件位于 etc 目录下，对应的网络配置文件可使用 Vim 编辑器打开编辑。具体在 etc 目录下的 system config 目录中，与网络相关的为 network scripts 目录。进入该目录，要修改的是 ifconfig ENS33，这是之前查看 ifconfig 时得知的局域网设备名。</p></li><li><p>进入后，可看到当前启动协议为 DHCP（动态分配 IP），将其改为静态，可通过快捷操作实现。先将光标移至第 4 行（按下 4 后大写 G），再通过 w 移动到对应单词，使用 dw 删除 DHCP，小写 i 进入插入模式写入 static，按 ESC 完成编辑。若要撤销，可按 u，将光标移至末尾，再次演示操作：4 shift + G，然后 ww 移动，dw 删除，i 插入 static，ESC 结束。</p></li><li><p>除将其改为 static 外，还需添加配置选项。指定为静态后，需明确 IP 地址，设为 111.100（与主机名对应，便于记忆和查找），还需定义网关（111.2，即虚拟路由器）和 DNS 域名解析器（如 111.2）。若要在末尾添加，先移动光标至末尾，按小 o 可在下一行插入。可直接粘贴修改后的内容（Ctrl + Shift + V），将 202 替换为 111（:%s 202 111 g）。</p></li><li><p>完成配置后，在命令模式使用 wq 保存退出，最后重启网络服务。这属于系统管理的内容，使用“service network restart”命令。重启后，查看 ifconfig，IP 已变为 192.168.111.100。将其复制到主机 Windows 中 Ping 测试，连接正常，且能连接外网（如百度），表明更改静态 IP 成功且网络连接通畅。</p></li></ul><h2 id="四、虚拟机网络连接问题排查与主机名配置" tabindex="-1"><a class="header-anchor" href="#四、虚拟机网络连接问题排查与主机名配置" aria-hidden="true">#</a> 四、虚拟机网络连接问题排查与主机名配置</h2><ul><li><p>已了解如何修改虚拟机的静态 IP。测试过程中可能会遇到各种问题，总体而言多为 Ping 不通的情况。需明确是一开始就不通，还是修改后不通。若一开始不通，通常主机 Ping 虚拟机不通，而虚拟机 Ping 主机不通多因主机 Windows 防火墙问题，关闭防火墙即可。若虚拟机能 Ping 通主机但连不上外网（如 Ping 不通百度），一般是 DNS 服务器设置问题，需检查修改的相关选项。</p></li><li><p>若原本能通，修改后不通，主要检查以下几项：首先是 VMWare 虚拟网络配置中的子网 IP（特别是第三个数）及 Nat 设置中的网关，必须在同一局域子网和网段；其次是配置文件中写入的 IP 地址、网关、域名解析等信息，务必正确。若均无问题，通常互联应无异常。若仍有状况，可关闭 network manager 服务（stop 并禁用），也可能需检查配置文件内容，确保正确。</p></li><li><p>接下来讲解配置主机名。此部分内容与修改静态 IP 相辅相成。此前将 IP 改为 192.168.111.100，虽好记，但每次输入仍较繁琐，尤其他人访问时需记忆，较为麻烦。因此常为每台服务器或主机配置易记且有意义的主机名，如为搭建 Hadoop 集群，设主机名为 Hadoop100，后续可按 101、102 等顺延编号。</p></li><li><p>若仅更改当前虚拟机的主机名，操作较简单，修改配置文件即可。先查看当前主机名，命令为“hostname”，可知当前为 Hadoop100。配置文件位于 etc 目录下，名为“hostname”，可随意修改，如改为“Spark11”，保存。但此种方式修改后，退出再查看“hostname”，仍为原主机名 Hadoop100，因仅修改配置文件，需重启服务器使更改生效，下次读取配置文件时才会变更。</p></li><li><p>若不想重启，可使用“hostnamectl”命令。直接输入可查看与主机名相关的系统信息，当前为静态，主机名仍为 Hadoop100。若要更改，输入“hostnamectl set --hostname Spark10”，再次查看“hostnamectl”，静态主机名已变为 Spark10，此时输入“hostname”，也已更改，实时生效。打开新终端，主机名亦已更改，此为更便捷的修改主机名方式。</p></li><li><p>为后续搭建 Hadoop 集群方便，改回主机名 Hadoop100。修改后，“hostname”显示为 Hadoop100。</p></li><li><p>对于搭建集群，仅修改自身主机名只是第一步，关键是让他人能找到。改名后通知他人，保存主机名与 IP 的映射关系，他人方能通过主机名访问本机。这需要一个专门文件，类似通讯录，在电脑中，Windows 和 Linux 通用，名为“host”文件，非常著名。</p></li><li><p>接下来在当前 Hadoop100 机器上，编辑“host”文件，路径在 etc 目录下，直接回车，可见 127.0.1 为回环地址，在下边用小写“o”插入所需 IP 地址。若未复制，可手动输入，如 192.168.111.100，对应主机名 Hadoop100，还可加入自身 IP，方便后续操作。复制多行，修改为 101、102 等及对应主机名，保存退出。这定义了从 100 到 104 的主机名与 IP 映射关系。</p></li><li><p>修改虚拟机的“host”文件是为方便内部通信，主机也需与虚拟机通信，故主机也得修改“host”文件。复制虚拟机的“host”文件信息，因要粘贴到 Windows 环境，不能用快捷操作。在 Windows 中，“host”文件位于 C 盘 Windows\\system32\\drivers\\etc 目录下。Win7 系统可直接修改，Win10、Win11 不能直接修改，先打开尝试粘贴保存，只能另存到桌面，保存为文本文件，去掉后缀名 TXT，替换 etc 目录下的原文件（需管理员权限）。</p></li><li><p>之后即可进行相关操作，如在 Windows 中通过 CMD，之前 Ping 需输入 IP，现可直接 Ping 主机名（如 Hadoop100），解析为 192.168.111.100，后续连接直接输入主机名即可，也可添加 101、102 等。还可在 IP 后添加域名，但需注意“host”文件，小心黑客通过域名劫持攻击，更改“host”文件，将域名指向其搭建的服务器，导致信息泄露。配置好域名后，远程登录和连接将更便捷。</p></li></ul><h2 id="五、远程登录与文件传输" tabindex="-1"><a class="header-anchor" href="#五、远程登录与文件传输" aria-hidden="true">#</a> 五、远程登录与文件传输</h2><ul><li><p>完成网络配置后，可尝试进行远程登录操作服务器或虚拟机。远程登录最经典且简单的方式为 SSH，Windows 和 Linux 均提供基于 SSH 协议的远程登录方式。</p></li><li><p>在当前 Windows 环境中，打开命令提示符（CMD），若要远程登录虚拟机（主机名为 Hadoop100），可直接输入“SSH root@hadoop100”。登录时需指定用户身份，此处为 root 用户。随后会提示是否连接该机器并建立认证和授权，需输入 root 在 Hadoop100 上的密码，将密码保存本地后可实现免密登录。输入密码并确认（输入“yes”）后，即可成功登录至远程虚拟机，以 root 身份进行操作。例如，执行“LS”命令，可获取虚拟机中 root 用户主文件夹的目录和文件。还可查看之前更改过的配置文件，如“/etc/systemd/config/network/scripts”中的“IFCFG_ENS33”，其静态地址配置与之前更改的完全相同。若要退出，输入“:q”即可。通过 SSH 登录后，虽在 Windows 命令提示符中，但操作与在 Linux 终端中相同。若要退出登录，输入“exit”，连接即断开。</p></li><li><p>此方式虽简单，但功能有限。例如，环境和字体可进行编辑和属性调整以改变显示页面，但下次若仍以 Hadoop100 的 root 用户登录，还需重新输入 SSH 命令。自然会想到能否一次登录后保存设置，下次无需输入命令直接登录。若要实现，需使用工具。</p></li><li><p>远程登录工具众多，如知名的 XShell、SSH Secure Shell、SecureCRT、FinalShell（国产）、Putty 等，还有 TeamViewer 等。若为命令行登录，可使用 SSH 方式；若需图形化界面，可使用 VNC。其中，XShell 在稳定性和性能表现上佳，较为经典，国内使用人数众多。</p></li><li><p>XShell 商业版较贵，若非商业目的用于学习研究，可在官网申请免费版。以 XShell 为例，其最新版本已至 7.x，若已安装，可进行如下操作：双击打开，新建会话。可在会话窗口点击新建，或在文件中新建，也可点击快捷图标。新建会话时，将名称设为 Hadoop100，主机名自动补全，协议为 SSH（XShell 底层基于 SSH 协议，提供更便捷操作界面，类似远程控制台仿真器）。填写完毕后，还需输入登录用户（root）和密码。若希望调整控制台的外观，如背景颜色（改为白底）、字体大小（调为 12 号），可在外观设置中进行。设置完成后进行连接，会弹出 SSH 安全警告（未知主机密钥），选择接受并保存，此后可免密登录。登录后，状态与在虚拟机中直接登录相同，执行“LS”命令可进入 root 用户主文件夹。若要断开连接，点击相应操作即可。若需重新连接，点击“所有会话”中保存的连接（因已保存连接密钥和 SSH 密钥），或添加快捷方式方便点击。连接过程中，如需复制粘贴等操作，可在工具-选项-键盘和鼠标中设置鼠标按键功能（如将中键和右键设为粘贴剪贴板内容，并勾选“将选定的文本自动复制到剪贴板”），方便后续控制台操作。</p></li><li><p>除远程登录外，还可能需上传下载文件，此时需使用 XShell 的配套工具 XFTP（基于 FTP 协议）。也可使用其他工具，如 Windows 下的 WinSCP、FileZilla 等。双击打开 XFTP，新建会话，名称设为 Hadoop100，输入主机名、用户名（root）和密码，进行连接。连接成功后，左边页面为当前主机桌面，右边为远程虚拟机 Hadoop100 的 root 用户主文件夹。可将主机桌面的配置文件拖至虚拟机，或反之，实现远程文件上传下载。需注意，若 XFTP 中显示中文出现乱码，可在设置-选项中，将字符集编码设为“Unicode UTF-8”，避免因字符集选择错误导致乱码。</p></li><li><p>此外，还可使用命令“SCP”进行远程文件传输，但每次输入命令较麻烦。若追求极简，可使用 SSH 和 SCP 实现功能，不过使用 XShell 和 XFTP 更为方便。</p></li><li><p>以上为远程登录和远程文件上传下载的相关内容。</p></li></ul>`,15);function f(I,h){const n=t("router-link");return l(),r("div",null,[u,m,i(" more "),P,s("nav",d,[s("ul",null,[s("li",null,[p(n,{to:"#概述框架"},{default:e(()=>[a("概述框架")]),_:1})]),s("li",null,[p(n,{to:"#e-第5章网络配置-1"},{default:e(()=>[a("E-第5章网络配置")]),_:1})]),s("li",null,[p(n,{to:"#一、网络配置与系统管理操作"},{default:e(()=>[a("一、网络配置与系统管理操作")]),_:1})]),s("li",null,[p(n,{to:"#二、虚拟机网络连接模式"},{default:e(()=>[a("二、虚拟机网络连接模式")]),_:1})]),s("li",null,[p(n,{to:"#三、虚拟机网络连接配置与静态-ip-设置"},{default:e(()=>[a("三、虚拟机网络连接配置与静态 IP 设置")]),_:1})]),s("li",null,[p(n,{to:"#四、虚拟机网络连接问题排查与主机名配置"},{default:e(()=>[a("四、虚拟机网络连接问题排查与主机名配置")]),_:1})]),s("li",null,[p(n,{to:"#五、远程登录与文件传输"},{default:e(()=>[a("五、远程登录与文件传输")]),_:1})])])]),b])}const N=o(k,[["render",f],["__file","E-第5章网络配置.html.vue"]]);export{N as default};
