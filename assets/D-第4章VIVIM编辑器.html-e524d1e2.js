import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,d as r,a as n,e as l,w as i,b as a,f as t}from"./app-2a2d189a.js";const u="/assets/figure4-1-90189c55.png",d={},m=n("h1",{id:"d-第4章vivim编辑器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#d-第4章vivim编辑器","aria-hidden":"true"},"#"),a(" D-第4章VIVIM编辑器")],-1),h=n("p",null,"D-第4章VIVIM编辑器",-1),v=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"说明"),n("p",null,"主要是各种搜索找的学习；")],-1),b={class:"table-of-contents"},k=t(`<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="d-第4章vivim编辑器-1" tabindex="-1"><a class="header-anchor" href="#d-第4章vivim编辑器-1" aria-hidden="true">#</a> D-第4章VIVIM编辑器</h2><h2 id="一、vim-编辑器" tabindex="-1"><a class="header-anchor" href="#一、vim-编辑器" aria-hidden="true">#</a> 一、Vim 编辑器</h2><ul><li><p>我们现已了解 Linux 的目录结构，也知晓 Linux 中“一切皆文件”，诸多操作都需直接对文件进行处理。那么，一个文件该如何操作呢？此前，我们曾有过类似做法，比如想要编辑一个文件，不妨复制一份出来，比如复制“cfg”文件到桌面，若要修改，直接双击打开，添加内容后，如同在 Windows 中，界面上会有修改标识，若要保存，点击保存按钮或使用快捷键 Ctrl + S ，操作完毕退出即可，这种在图形化界面中编辑文档的方式十分简单。</p></li><li><p>然而，在后续的学习和工作中，我们不会像在 Windows 中那样编辑操作。当然，这样做并非不可，但效率欠佳。在服务器上操作时，为优化性能，桌面环境因占用系统资源，服务器甚至可能不安装，此时若要编辑文档，就得依靠终端控制台进行操作。如此一来，就需要掌握一种在终端中进行文本编辑的方法，即熟悉一种文本编辑器。接下来要介绍的著名文本编辑器，便是 Vim 。</p></li><li><p>这里提到的是 VI 和 Vim 编辑器。简单来说，VI 诞生于 Unix 系统，Linux 借鉴 Unix 后，对 VI 进行优化和扩展，形成了功能更强大的 Vim 文本编辑器。早期，VI 在 Unix 系统的控制台中，模拟出一个文本编辑窗口，即在黑屏或白屏中，可上下移动的一页内容，被视为文本文档编辑页面。VI 可对文本进行各种操作，有众多快捷键，若熟练使用，效率极高。相对而言，Vim 更好用，比如具有自动字体颜色辨别和语法正确性检查，方便编写程序代码，且与 VI 完全兼容。使用 Vim 编辑文本文件，效率甚高，还能通过脚本进行各种扩展，功能强大。</p></li></ul><br><ul><li><p>在此，多说一句，很多人认为学习 Vim 是件痛苦的事，但在 Linux 上操作又不得不学，否则就得学习其他编辑器。这里可对比两个不同的编辑器，即传说中的 Vim 和 Emacs 。Vim 被誉为“编辑器之神”，Emacs 则被称为“神之编辑器”。为何有此名号？主要是因为 Emacs 本质上是由 GNU 开源项目倡导者理查德·斯托曼（自由软件之父）用 Lisp 语言编写的一个解释器。Emacs 不仅能进行文本编辑，功能还可扩展得极为强大，能管理文件系统，能当作 Email 收发工具，还能上网当浏览器，可谓无所不能，其设计理念是“All in one”，即在一个工具中可做任意想做的事。但它也有缺点，比如有人诟病其体积庞大，启动缓慢。写 Linux 内核的李纳斯大神（Minix 之父）使用的文本编辑器，是 Emacs 的简版，叫 Micro Emacs （微型 Emacs ）。正因诸多大神和程序员使用 Emacs ，所以它被称为“神之编辑器”。Vim 也有众多大神和厉害的程序员使用，其特点是不像 Emacs 大而全，而是专注于文本编辑，做到极致，若熟练使用，进行文本编辑时速度飞快，功能强大，故而被称为“编辑器之神”。</p></li><li><p>在 CentOS 中，自带 Vim 编辑器。仔细观察会发现，打开计算机，在“bin”目录下能找到 VI 和 Vim ，相当于提供了两个工具，它们有何区别？简单来说，Vim 是更强大的 VI 。下面做个简单测试，就能看出区别。</p></li><li><p>直接切换到终端控制台，调大字号以便看清。首先输入“vi”，使用方法很简单，在其后跟上要打开的文本文件名即可。但要注意，进入终端后，当前位于用户的主文件夹，若在此直接编辑，会编辑原始文件，这并非我们想要的。所以，应先进入桌面目录再打开文件。此时，需先使用“cd”命令切换到桌面目录。然而，会发现“桌面”是中文，若要切换输入法，可使用系统工具，进入设置，找到“region and language”（区域语言），选取“汉语（中国）”并添加“Intelligent 拼音”，默认切换输入法的快捷键是“Super 键（即 Windows 徽标键） + 空格”，可在两者间切换。切换到拼音输入法，输入“桌”，按“Tab”键可自动补全。如此，便可切换到桌面目录。切换输入法后，找到“iniso setup.cfg”配置文件，输入“in”，按“Tab”键自动补全。可看到打开的页面，其中不同字符和内容有不同颜色显示，更为友好。若用 VI 直接打开，会是纯粹的白底黑字，界面不太友好。通常，直接用 Vim 打开即可。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux$ vi test0831<span class="token punctuation">.</span><span class="token function">txt</span>
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux$ vim test0831<span class="token punctuation">.</span>txt<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>打开文件后，可对当前文本文件进行操作，但 Vim 较为复杂。可看到，整个控制台界面被视为文本编辑工具，用键盘上下键可浏览整个文档内容。当光标移到最上面一行，下方会有提示，比如“1:1”，这是光标位置。按向右箭头，光标右移一格，变成“1:2”，即第一行第二个字符。若往下，超过中间某些位置，会显示百分比，到最后会显示“底端”。一般按百分比划分当前显示内容。这便是 Vim 编辑器的显示状态。</p></li><li><p>或许会想，能否直接在此输入文字？比如随便敲个“m”，发现不起作用，往后移动光标，到最后一个字母时无法再往后，使劲也不行。那么，该如何进行编辑呢？先来介绍 Vim 编辑器的三种不同模式。</p></li><li><p>在文档 4.6 节介绍了 Vim 编辑器中三种模式的转换方式。三种模式分别是：一种叫一般模式或普通模式，这就是直接进入看到的页面，此模式下不能直接编辑文本，这也是之前输入字母“m”无用的原因。此模式主要进行删除、复制和粘贴等操作。若要修改文本、输入大量内容，则需进入编辑模式或插入模式。此外，还有一种特殊模式叫命令模式，有些资料或书籍将此模式视为一般模式中的特殊操作。<mark>此模式主要是在一般模式下输入冒号或斜杠进行命令操作</mark>。</p></li><li><p><mark>这三种模式中，最核心的是一般模式，即一进入的模式。若要进入命令模式，常见操作是按下冒号&quot;:&quot;；若要进入编辑模式，常见操作是按下小写的“i”。若要退出编辑模式和命令模式，直接按 ESC （左上角的退出键），回到一般模式。整体转换过程便是如此。接下来进行具体操作</mark>。</p></li><li><p>比如，当前处于一般模式无法输入内容，按下小写的“i”，下方提示“插入”，此时模式变为插入模式，可移动光标到后面并输入内容。若要退出插入模式，按 ESC 键，又回到一般模式，此时光标无法再移动到后面，输入“m”也无用。若要进行命令操作，比如保存输入的内容，在一般模式下输入冒号，再输入“w”（write ，写入），回车后提示“已写入”，文件便保存成功。若不想要刚才的更改，在已写入的状态（即普通模式）下，按“u”可回退更改，相当于撤回操作。此时若要保存，需输入冒号“:”加“w”。最后，若要退出当前文件，回到终端控制台，操作是输入冒号“:”加“q”。这便是三种模式的转换和一些文本编辑的基本操作。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux$ touch test31<span class="token punctuation">.</span><span class="token function">txt</span>
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux$ ls
test31<span class="token punctuation">.</span><span class="token function">txt</span>
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux$ vim test31<span class="token punctuation">.</span><span class="token function">txt</span> 
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux$ cat test31<span class="token punctuation">.</span>txt 

编辑的话就是： i  进行编辑模式修改之后 再 Esc 返回到 一般模式
然后 <span class="token operator">:</span>  进入 命令模式  <span class="token operator">:</span>w 是写入，  <span class="token operator">:</span>q 返回终端 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="figure4-1" tabindex="0" loading="lazy"><figcaption>figure4-1</figcaption></figure><h2 id="二、vim-一般模式下的常见操作" tabindex="-1"><a class="header-anchor" href="#二、vim-一般模式下的常见操作" aria-hidden="true">#</a> 二、Vim 一般模式下的常见操作：</h2><ul><li><p>我们现已了解 Vim 的基本用法和模式转换。接下来，分不同模式具体查看 Vim 中的常见操作。首先打开当前文件，进入的自然是一般模式。先来看看一般模式下能进行哪些操作。</p></li><li><p>首先要提及的是，一般模式主要能进行删除、复制和粘贴操作。先看复制粘贴，其语法结构简单。直接输入“YY”，可复制光标所在的当前一行。若要复制某一行内容，直接敲“YY”即可。在此操作后，可能没有明显显示。随后，到另一行，按“p”键进行粘贴，会发现此前复制的“run the setup agent for first boot”这句已被粘贴过来。若要连续粘贴，可继续按“p”。若要重复粘贴多次，可先输入数字，如“5p”，会将内容粘贴 5 行。仔细观察，在上方输入“3p”，下方会有提示“3 次”。操作后会有提示，能明确知晓执行的操作。这便是复制粘贴的基本操作。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>主要是 进行 复制粘贴的过程
yy    p

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),f=n("ul",null,[n("li",null,[n("p",null,"若要复制多行，比如从“run the set up agent for first boot”这一行开始，到“LAN zh 中文 UTF-8”这 8 行全部复制。数数共有 8 行，操作方式类似，若“YY”是复制一行，那复制 8 行则输入“8YY”，下方会有提示已复制 8 行。接着找个位置，比如在此处按“p”，这 8 行便完整复制过来。在 Linux 中，一般模式下能快速实现大段的复制粘贴。")]),n("li",null,[n("p",null,"对于复制粘贴，还有另一种做法，可将数字插在中间，先输入“YY”再输入数字，效果相同，可自行测试。")]),n("li",null,[n("p",null,"除了复制粘贴，还有删除操作。普通模式下，删除当前行很简单，按“dd”（连续按两个“d”），当前行即被删除。若要不停删除后续行，可连续按“dd”。若要从当前行开始删除下面的几行，比如从“network information”开始，删除下面带注释的 3 行，输入“3dd”，下方会有提示已删除 3 行。操作简单且一致。")]),n("li",null,[n("p",null,"此外，若有误删，可按撤销操作，即按键盘上的“u”键。按一次“u”，刚删除的 3 行便会恢复。可不停回滚，按多次“u”，之前删除的行都会回来。")]),n("li",null,[n("p",null,[a("除了行的复制、粘贴和删除，若并非针对整行，比如将光标移到某处，想复制“configuration information”后面两个词并粘贴到其他地方，该如何操作？复制依然用“y”，接着输入“"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"”（在"),n("mi",null,"L"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"x"),n("mtext",null,"文本编辑中，“")]),n("annotation",{encoding:"application/x-tex"},"”（在 Linux 文本编辑中，“")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},"”"),n("span",{class:"mord cjk_fallback"},"（在"),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"ux"),n("span",{class:"mord cjk_fallback"},"文本编辑中，"),n("span",{class:"mord"},"“")])])]),a("”通常表示行尾），即“Shift + 4”。然后将光标移到此处按“p”，“configuration information”便被复制过来。")])]),n("li",null,[n("p",null,"若在下方随便找个位置，比如从“up”这里开始复制，输入“y$”，再按“p”，会看到不断出现“up agent on first boot”。此操作更为灵活方便。")]),n("li",null,[n("p",null,"若想从某一光标位置之前的所有内容进行复制粘贴，比如从“on”这个位置开始，即从“#”开始到“run the setup agent”（包括空格）这部分，应输入“y”加上“^”（“Shift + 6”，在 Linux 文本编辑中表示行首）。接着在此处追加按“p”，能看到“# run the setup agent”及空格被复制粘贴下来。")]),n("li",null,[n("p",null,"对于每行中的部分内容，若要对某一个词进行操作。词的操作使用“w”（“word”单词），若直接按“w”，光标会跳到当前的下一个单词。此时若要复制，输入“yw”，复制的便是当前单词，比如此时复制的是“set up”，后续按“p”，粘贴的便是“set up”，且带有后面的空格，这是复制词的效果。")]),n("li",null,[n("p",null,"若要删除一个词，输入“dw”。需注意，删除是从当前光标位置开始到当前词的结束，会连同后面的空格一起删掉。若要完整删除一个词，比如“first”，应先将光标移到词的开头，再输入“dw”，“first”这个词便会被删除。")]),n("li",null,[n("p",null,[a("复制当前行之后的所有内容是“y"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"”，复制之前所有内容是“"),n("msup",null,[n("mi",null,"y"),n("mtext",null,"”")]),n("mtext",null,"。若要删除，相应的便是“"),n("mi",null,"d")]),n("annotation",{encoding:"application/x-tex"},"”，复制之前所有内容是“y^”。若要删除，相应的便是“d")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0435em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"”"),n("span",{class:"mord cjk_fallback"},"，复制之前所有内容是"),n("span",{class:"mord"},"“"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8491em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"”")])])])])])])]),n("span",{class:"mord cjk_fallback"},"。若要删除，相应的便是"),n("span",{class:"mord"},"“"),n("span",{class:"mord mathnormal"},"d")])])]),a("”和“d^”。由此可见，Vim 的设计有其合理性，比如复制操作使用“YY”，因复制对象可能不同。比如输入“d$”，会删除当前行光标后的所有内容。")])]),n("li",null,[n("p",null,"常见的还有单个字符的操作。比如，按小写“x”，相当于剪切，光标所在位置的字符会被删除，若在后面按“p”，刚删除的字符会被复制出来，如同 Windows 中“Ctrl + X”的剪切操作。此操作类似 Windows 中按“DELETE”键，但光标是从左往右移动。若要从右往左逐个删除，可按大写“X”（即同时按下“Shift”再按“x”），光标之前的内容会逐个被删除。")]),n("li",null,[n("p",null,"此外，还可按“r”，表示更改当前光标位置的字符。比如将“大 S”改为“小写 s”，输入“r”再输入“s”，字符便会更改，实现单个字符的替换。若要更改一串字符，可按下“Shift + r”（即大写“R”），会进入替换模式，输入的内容会依次替换后面的所有内容，类似 Word 文档中的“Insert”模式。")]),n("li",null,[n("p",null,"这便是普通模式下的复制、粘贴和删除操作，可针对一行、多行、单个单词、单个字符进行各种操作。")]),n("li",null,[n("p",null,"还需为大家总结一下光标的移动操作。关键在于能快速移动和定位光标。比如，“Shift + 6”（上尖号）可移动到当前行的行头，若外加“上尖号”，则表示复制当前光标位置到行头的所有内容。“$”（“Shift + 4”，“dollar”符）可移动光标到当前行的行尾。可按“w”根据当前词移动，“e”可移动到当前词的词尾。若要跳到上一个词的词头，按“b”。这些光标的转换操作方便易用，比如要跳到下一个词的词尾按“e”。下一个字符可通过左右键移动，下一行可通过上下键移动。")]),n("li",null,[n("p",null,"还能快速移动到整篇文档的开头或结尾。移动到整篇文档开头，可连续按两次小写“g”（“GG”），或按大写“H”（“Shift + h”）。要移动到整个文档的结束位置（页尾），可使用大写“G”，或使用大写“L”，直接跳转到最后一行的行头。此功能实用，比如要在文档末尾追加内容，无需逐行按下箭头，直接按“Shift + j”即可。")]),n("li",null,[n("p",null,"此外，可跳转到指定某一行的行头，比如先输入“3”，再按“Shift + G”，会直接跳转到第 3 行的行头。若要跳转到第一行，输入“1Shift + G”即可。若已知某一行的内容，比如“graphical”，想直接跳转到这一行，可先进入命令模式，输入冒号，然后输入“set nu”（“nu”指“number”，列出行号），回车后行号会全部列出，可看到“graphical”这一行是第 11 行，输入“11Shift + G”即可跳转。若不想要行号，再次输入冒号，输入“set nonu”即可取消。")]),n("li",null,[n("p",null,"总体而言，一般模式下的编辑功能强大且方便。")])],-1),g=t(`<h2 id="三、vim-编辑器的插入模式" tabindex="-1"><a class="header-anchor" href="#三、vim-编辑器的插入模式" aria-hidden="true">#</a> 三、Vim 编辑器的插入模式：</h2><ul><li><p>了解了 Vim 编辑器的普通模式后，接下来介绍编辑模式，即插入模式。前面已提及，在普通模式下，按小写“i”即可进入插入模式，此过程简单。普通模式中有诸多复杂的快捷键和操作命令，而插入模式相对简单，进入后可进行各种编辑操作，在此处打字，内容会插入到当前光标位置。插入后，可移动光标，也可删除内容，如按退格键或“DELETE”键，回车键亦可正常使用，与在 Windows 中编辑文档的操作无异。</p></li><li><p>通常，若要更高效地编辑文档，<mark>大段的复制、粘贴和删除最好在普通模式完成</mark>，在插入模式中主要进行内容追加。</p></li><li><p>先退出插入模式，按左上角的“ESC”（“escape”）键，还可通过“u”键恢复到之前的编辑状态。</p></li><li><p>关于插入模式，主要需介绍其不同的进入方法。插入模式只能从普通模式通过按键进入，常见的是“i”键，按此键可在当前光标之前插入内容，且光标位置不变。</p></li><li><p>除此之外，若想在光标之后输入内容，可按小写“a”键，进入后光标会往后移一格，随后即可输入。</p></li><li><p>还有一种使用较多且较为特别的方式，按小写“o”键，进入插入模式后会跳转到当前光标的下一行，相当于在当前行下方换行，便于在两行之间插入内容。</p></li><li><p>除上述“i”“a”“o”这三个小写字母的方式外，还可用它们的大写形式。先退出回到之前状态，小写“i”是在当前光标位置插入，大写“I”（“Shift + i”）在某些光标位置似乎无变化，但更换光标位置后，会发现其直接跳转到当前行的行头进行插入。若不想进行光标跳转操作，也可通过这种方式快捷进入插入模式。当然，也可在普通模式下先通过“Shift + 6”跳转到行头，再按小写“i”，效果相同，掌握一种操作即可。</p></li><li><p>此外，大写“A”（“Shift + a”）是直接跳转到当前行的最后进行插入，在某些场景下较为常用。若在普通模式忘记通过“Shift + $”跳转到行尾，在此处直接按“Shift + a”进入插入模式进行跳转即可。</p></li><li><p>还有大写“O”，与小写“o”相反，是在当前行之上插入一行。</p></li><li><p>这几种模式中，使用最多的是直接按小写“i”，即在当前光标位置插入；有时也会用到小写“o”，即在当前行的下一行插入内容。</p></li><li><p>若要退出编辑模式，直接按“ESC”键即可。</p></li></ul><h2 id="四、vim-编辑器的指令模式-命令模式" tabindex="-1"><a class="header-anchor" href="#四、vim-编辑器的指令模式-命令模式" aria-hidden="true">#</a> 四、Vim 编辑器的指令模式（命令模式）</h2><ul><li><p>最后，详细介绍一下指令模式，也称为命令模式。前面在介绍模式转换时曾提到，它可视为一般模式下的特殊操作，有些文档将命令模式划归在一般模式内。</p></li><li><p>命令模式主要用于在一般模式下，通过按冒号或斜杠来输入命令进行操作。例如，可以保存文档、直接退出当前文档编辑，或者如之前所做的“set Nu”来显示所有行号。它针对的是整个文档的操作，而非修改文档中的具体内容，这与编辑模式有本质区别，可看作一般模式下的特殊操作。</p></li><li><p>通过示例来看其具体使用方法。首先，在当前文档的第一行之上进行操作。若要在第一行之上直接插入内容，可使用快捷方式“Shift + o”，随后可输入内容。输入一些乱码后，退出编辑模式。此时，若输入“:q”直接退出，会发现无法退出，提示“已修改但尚未保存，可用感叹号强制执行”。这代表了保存和退出的几种典型命令操作。</p></li><li><p>常见的操作如下：直接输入“:w”，表示保存当前更改；输入“:q”，表示直接退出；<mark>“:wq”则是保存并退出</mark>。若不想保存插入的乱码直接退出，可输入“:q!”，强制退出，不会有提示，更改也不会生效。可尝试输入“:q!”，果然退出，再次查看文档，第一行未更改。</p></li><li><p>若再次进入编辑，乱敲一通后，先退出（注意在编辑模式中输入冒号会追加到文档中，要输入命令需先按“ESC”退回到普通模式），然后输入“:wq”，保存并退出，再次进入时会发现更改已保存。</p></li><li><p>另外，还有一个特殊操作，即“:wq!”。对于当前文档，此操作意义不大，因为“:wq”已能满足保存退出需求。但当文件为只读属性，而用户有足够权限更改文件属性（如为超级管理员或文件所有者，可将只读改为可编辑）时，“:wq!”可强制对只读文件进行保存退出。</p></li><li><p>关于冒号后的常用操作，还包括之前提到的“set Nu”直接显示所有行号，若不想显示，输入“set nonu”即可取消。</p></li><li><p>除了通过冒号进入命令模式，还有一种特殊方式，即输入斜线。输入斜线后用于查找，例如查找“boot”这个词，输入“boot”后回车，文档中所有“boot”会被高亮显示，光标会跳转到第一个“boot”处。若要查找下一个“boot”，按“n”键，若要往上查找，按“Shift + n”。查找至结尾会从头开始继续查找，这是 Vim 编辑器的查找功能。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token operator">:</span><span class="token operator">/</span>boot

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>此外，还有一个强大的功能——替换。例如，要将文档中的“boot”替换为多个“o”，可先取消高亮显示（输入“:noh”），然后进入命令模式。输入<code>“:s boot”</code>加上要替换成的词，会发现仅当前光标所在行的一个“boot”被替换。若要替换当前行所有匹配的词，需在命令后加“g”（“global”全局替换）。若要替换整篇文档中的所有“boot”，需输入“:%s boot”加上要替换成的词，若要全部替换，还需加上“g”。</p></li><li><p>总结来看，模式间转换的关键核心在一般模式。按冒号或斜杠，进入命令模式，可进行查找、高亮显示等针对当前文档的命令操作；按“i”“A”“o”（大小写均可），进入编辑模式，可对文档进行编辑插入。在一般模式下，可方便地移动光标、复制粘贴和进行大段删除等操作。</p></li><li><p>若感兴趣，可查看文档中的一张图，双击打开能看到，Vim 编辑器充分利用了键盘上的每个按键，绿色可能表示光标移动动作或定义操作范围，黄色代表命令，如添加、删除、修改等，橙色则是针对文本的具体操作，如拷贝复制、删除修改等。每个按键代表的指令在图上均有显示，感兴趣的同学可研究，常用指令在课堂介绍的已足够，若想提高编辑速度，可在使用过程中进一步了解。若能记住所有指令，使用 Vim 进行文本编辑将效率极高，不愧是“编辑器之神”。</p></li></ul>`,6);function x(V,_){const s=p("router-link");return o(),c("div",null,[m,h,r(" more "),v,n("nav",b,[n("ul",null,[n("li",null,[l(s,{to:"#概述框架"},{default:i(()=>[a("概述框架")]),_:1})]),n("li",null,[l(s,{to:"#d-第4章vivim编辑器-1"},{default:i(()=>[a("D-第4章VIVIM编辑器")]),_:1})]),n("li",null,[l(s,{to:"#一、vim-编辑器"},{default:i(()=>[a("一、Vim 编辑器")]),_:1})]),n("li",null,[l(s,{to:"#二、vim-一般模式下的常见操作"},{default:i(()=>[a("二、Vim 一般模式下的常见操作：")]),_:1})]),n("li",null,[l(s,{to:"#三、vim-编辑器的插入模式"},{default:i(()=>[a("三、Vim 编辑器的插入模式：")]),_:1})]),n("li",null,[l(s,{to:"#四、vim-编辑器的指令模式-命令模式"},{default:i(()=>[a("四、Vim 编辑器的指令模式（命令模式）")]),_:1})])])]),k,f,g])}const E=e(d,[["render",x],["__file","D-第4章VIVIM编辑器.html.vue"]]);export{E as default};
