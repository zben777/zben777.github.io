import{_ as h}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as r,c,d as _,a as e,e as t,w as i,b as l,f as s}from"./app-2a2d189a.js";const d={},p=e("h1",{id:"e-第5章条件判断",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#e-第5章条件判断","aria-hidden":"true"},"#"),l(" E-第5章条件判断")],-1),u=e("p",null,"E-第5章条件判断",-1),f=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"说明"),e("p",null,"主要是各种搜索找的学习；")],-1),x={class:"table-of-contents"},m=s('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="e-第5章条件判断-1" tabindex="-1"><a class="header-anchor" href="#e-第5章条件判断-1" aria-hidden="true">#</a> E-第5章条件判断</h2>',3),E=s("<li><p>接下来继续介绍 Linux Shell 中的语法结构。作为编程语言，必然少不了对流程的控制，其中关键在于能对条件进行判断，判断其真假，基于此进行相应的流程控制。</p></li><li><p>首先要介绍的是语法中如何进行条件判断，即给出一个表达式，判断其为真（true）还是假（false）。对于 Shell 而言，可以使用基本命令“test”，“test”后跟着一个条件表达式，然后根据其返回结果判断当前值的真假。</p></li><li><p>这种说法可能较抽象，在控制台中进行具体测试。首先直接“test”，比如先定义一个变量“a”，“a”的值设为“hello”，要判断“a”的值是否为“hello”，一种方式是直接“echo $a”查看其值，但在脚本中编写程序代码，需有特定的判断方式，即“test $a == hello”。但这样写无法得知真假，因为执行结果有返回值。若测试通过，应返回正确，之前提到命令正确返回为 0 ，所以若表达式为假，应返回 1 报错。</p></li><li><p>通过“$?”获取返回值验证，发现等于 0 ，说明“a == hello”的测试通过，即“a”的值确实为“hello”。为验证此想法，更改测试为“a == Hello”，结果变为 1 ，测试未通过，表明“a”不等于“Hello”。再将“a”的值改为“Hello”，再次测试，结果又为 0 ，测试通过。</p></li><li><p>这便是在 Linux Shell 中进行条件判断的基本方法，使用“test”并捕获其返回结果是 0 还是 1 。需注意，在很多编程语言中，底层的“true”通常相当于 1 ，“false”相当于 0 ，但在 Shell 中，因使用命令的返回值来表示真值，所以刚好相反，表达式为真返回 0 ，为假返回 1 ，一定要区分开。</p></li><li><p>每次测试都调用“test”命令较麻烦，如同之前的运算需写“Expr”一样。有简化方法，即直接使用中括号，省去“test”，将判断的条件表达式放入其中，但前后需有空格，这是 Shell 较严格的限制，易出错，务必留出空格。上述测试可改写为“[ $a == hello ]”，“echo $?”，同样能判断真假。</p></li><li><p><code>需特别注意，条件表达式中，如“$a == hello”，等号两侧要空格，若不空格，可能会得出错误结果。比如判断“$a == hello”（“a”为大写“Hello”），不空格时回车，结果为 0 ，因为连在一起可能被识别为一个值，认为表达式为真。所以处理时中间一定要空格。</code></p></li><li><p>了解上述内容后，若表达式中什么都不给，直接“echo”，结果为 0 ，若为空值（全是空格），结果为 1 ，有时会通过这种方式判断表达式中是否有内容。</p></li><li><p>前面介绍的是字符串的比较判断是否相等，若判断不相等，在等号前加感叹号，这与很多编程语言中不等的表达相同。对于字符串不相等的判断，若“a”等于“Hello”，判断其是否不等于“hello”，结果为 1 ，若判断其是否不等于“Hello”，结果为 0 。</p></li><li><p>上述都是字符串的比较，更关心的可能是数值的比较。比如比较 2 和 8 ，直接写“2 = 8”无法进行判断，结果提示“8 ：没有那个文件或目录”。在 Linux Shell 中，不能用常见的大于、小于号进行数值判断。结合前面介绍的用法，大于号表示输出重定向，小于号表示输入重定向。</p></li><li><p>对于整数的比较，大于、小于、等于不是熟悉的符号，而是用“-”加两个字符判断。如“-eq”表示等于，“-lt”表示小于，“-gt”表示大于，“-ne”表示不等于，“-le”表示小于等于，“-ge”表示大于等于。比如判断 2 小于 8 ，应写为“2 -lt 8”，结果为 0 ，若写为“2 -gt 8”，结果为 1 。</p></li>",11),S={href:"http://hello.sh",target:"_blank",rel:"noopener noreferrer"},$={href:"http://add.sh",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,[e("p",null,"条件判断的用法主要就是这些。接下来会想到在实际判断中可能涉及多个条件的组合判断，即多条件判断。对于多个条件，若要同时成立表达式才为真，这是逻辑与（AND）的关系，在 Linux Shell 中用两个“&”号表示，与很多编程语言类似。若两个条件中有一个满足表达式就为真，这是逻辑或（OR）的关系，在 Linux Shell 中用两条竖线“||”表示，用法基本相同。")],-1),k=e("li",null,[e("p",null,"有了这些，在 Linux Shell 中经常会使用多条件判断，比如两个“&”号表示前一条命令执行成功才执行下一条命令，“||”表示上一条执行失败才执行下一条。这种表示可实现类似三元运算符的功能，判断表达式真假，若为真执行下面语句，为假执行“||”后面的语句。")],-1),b=e("li",null,[e("p",null,"在控制台中进行简单测试，比如给“a”赋值 15 ，判断“$a < 20”，若小于 20 ，“&&”后“echo $a 小于 20”，“||”后“echo $a 大于等于 20”。执行后得到“15 小于 20”。若“a”的值改为 27 ，执行得到“27 大于等于 20”。")],-1),g=e("li",null,[e("p",null,"若使用文档中的示例，前面无判断，直接“[ atguigu ] && echo OK || echo not OK”，中括号内有内容返回值为真，所以返回“OK”，若中括号内为空，返回“not OK”，可进行测试。")],-1),H=e("li",null,[e("p",null,"以上就是关于条件判断的相关内容。")],-1);function N(O,v){const o=a("router-link"),n=a("ExternalLinkIcon");return r(),c("div",null,[p,u,_(" more "),f,e("nav",x,[e("ul",null,[e("li",null,[t(o,{to:"#概述框架"},{default:i(()=>[l("概述框架")]),_:1})]),e("li",null,[t(o,{to:"#e-第5章条件判断-1"},{default:i(()=>[l("E-第5章条件判断")]),_:1})])])]),m,e("ul",null,[E,e("li",null,[e("p",null,[l("除了整数和字符串的比较，在 Linux Shell 中还能针对文件的权限进行判断。比如“-r”后跟文件名，表示判断文件是否有可读（read）权限，“-w”判断是否有写权限，“-x”判断是否有可执行权限。可进行测试，新建“test”文件，其无可执行权限，测试“"),e("a",S,[l("hello.sh"),t(n)]),l("”的可读权限，结果为 0 ，表示有可读权限，测试写权限和执行权限也为 0 。测试“test”文件的可执行权限，结果为 1 ，表示无。")])]),e("li",null,[e("p",null,[l("还能按文件类型判断，“-e”判断文件是否存在，“-f”判断是否存在且为普通文件，“-d”判断是否存在且为目录文件。进行测试，判断“infer”文件是否存在，结果为 1 ，表示不存在，判断存在的文件，结果为 0 。判断“"),e("a",$,[l("add.sh"),t(n)]),l("”是否存在且为普通文件，结果为 0 ，判断是否为目录，结果为 0 。")])]),L,k,b,g,H])])}const C=h(d,[["render",N],["__file","E-第5章条件判断.html.vue"]]);export{C as default};
