import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as r,d as u,a as n,e as a,w as t,b as s,f as l}from"./app-2a2d189a.js";const d="/assets/figure3-1-e5a83c2b.png",m={},k=n("h1",{id:"c-第3章git常用命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-第3章git常用命令","aria-hidden":"true"},"#"),s(" C-第3章Git常用命令")],-1),v=n("p",null,"C-第3章Git常用命令",-1),b=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"说明"),n("p",null,"主要是各种搜索找的学习；")],-1),g={class:"table-of-contents"},h=l('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="c-第3章git常用命令-1" tabindex="-1"><a class="header-anchor" href="#c-第3章git常用命令-1" aria-hidden="true">#</a> C-第3章Git常用命令</h2><ul><li><p>Git 命令众多，如同 Linux 一样，虽然上手使用较快，但鲜有人敢称自己精通。在使用 Git 时，只需记住几个常用命令即可。</p></li><li><p>此处列出了在公司中使用较多的一些命令，其中前两个为黑色，后一个为红色。前两个黑色命令用于设置 Git 的用户签名。在安装好 Git 后，用户签名只需设置一次。若不设置，将来提交代码时 Git 会报错。<br><img src="'+d+'" alt="figure3-1" loading="lazy"></p></li></ul><h2 id="_3-1-设置用户签名" tabindex="-1"><a class="header-anchor" href="#_3-1-设置用户签名" aria-hidden="true">#</a> 3.1 设置用户签名</h2>',5),f={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),_={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},G=n("br",null,null,-1),A=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>全局范围的签名设置：
Layne@LAPTOP<span class="token operator">-</span>Layne MINGW64 <span class="token operator">/</span>d<span class="token operator">/</span>Git<span class="token operator">-</span>Space<span class="token operator">/</span><span class="token function">SH0720</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name Layne
Layne@LAPTOP<span class="token operator">-</span>Layne MINGW64 <span class="token operator">/</span>d<span class="token operator">/</span>Git<span class="token operator">-</span>Space<span class="token operator">/</span><span class="token function">SH0720</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email Layne@atguigu<span class="token punctuation">.</span>com

好像是随意设置，并不会去求证，但是最好设置的自己的真实的邮箱；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如何证明用户签名已设置成功？可以前往 Windows 的家目录查看配置文件。Windows 的家目录位于 C 盘的“用户”文件夹中，打开当前正在使用的用户文件夹。在 Git 客户端中能看到当前使用的是“Asus”用户，进入该用户的家目录，会看到一个以“.”开头的 Git 配置文件“git config”。使用“notepad++”打开此配置文件，能明显看到刚才设置的用户签名，这表明用户签名已配置成功。</p></li><li><p>注意：首次安装 Git 务必设置用户签名，否则提交代码会报错。签名的作用是区分提交代码的操作者，例如使用当前 Git 客户端提交代码，后台能查看到是“lay”提交，而非他人。这里需要说明，用户签名与将来登录 GitHub 或其他代码托管中心的账号没有任何关系，它仅代表 Windows 上本地的 Git 客户端，需与登录账号区分清楚。设置用户签名的操作较为简单，大家按需设置即可。</p></li></ul><h2 id="_3-2-初始化本地库" tabindex="-1"><a class="header-anchor" href="#_3-2-初始化本地库" aria-hidden="true">#</a> 3.2 初始化本地库</h2><ul><li><p>设置好用户签名后，接下来讲解命令“git init”。此命令用于初始化本地库。</p></li><li><p>初始化本地库的概念是：若要用 Git 管理某个目录，需先让 Git 获取该目录的管理权，即进行初始化操作。</p></li><li><p>下面通过一个开发中的小案例演示如何初始化本地库。打开电脑的 D 盘，D 盘目录下有“git space”，这是 Git 的空间。在该目录中进行演示，例如现在有一个项目，新建一个文件夹并命名为“git demo”，假设此文件夹为项目目录。</p></li><li><p>若要用 Git 管理这个项目，有两种方式。一种是通过已打开的客户端进入该目录，但由于 Windows 存在盘符，D 盘等不太好进。所以建议另一种方式，先关闭已打开的客户端，通过图形化界面进入“git demo”目录，然后在该目录中右键，点击“Git Bash Here”，此时客户端会默认进入“git demo”目录。</p></li><li><p>在“git demo”目录中，需执行命令初始化本地库。注意，此时该目录 Git 还无法管理，因为未初始化，Git 没有此目录的权限。初始化本地库的命令为“git init”，执行后很快完成初始化。初始化完毕后，Git 会提示有一个空的 Git 库，位于“git demo”目录下，并生成一个“.git”目录。</p></li><li><p>关闭客户端，在 Windows 中也能看到“.git”目录，但此目录在 Windows 中默认隐藏。若要查看，需点击“查看”，勾选“隐藏的项目”，即可看到“.git”目录。若想查看其内部文件，可进入目录查看，但这些文件切勿修改，否则 Git 可能无法运行。后续会带领大家简单查看这些文件，目前暂时不动。</p></li><li><p>此时，相当于已将本地库初始化完成。在黑框中，使用 Linux 的查看命令“ll”，发现无内容，这是因为“.git”为隐藏文件。在 Linux 中，查看隐藏文件需添加参数“ll -a”，这样就能查看到“.git”。若想查看其内部，可进入“.git”目录再执行“ll”。需说明的是，Git Bash 客户端中使用的命令与 Linux 通用，可以尽情使用 Linux 命令。</p></li><li><p>进行 ls 是空的 但是 ls -a 是可以看到的；</p></li></ul><h2 id="_3-3-查看本地库状态" tabindex="-1"><a class="header-anchor" href="#_3-3-查看本地库状态" aria-hidden="true">#</a> 3.3 查看本地库状态</h2><ul><li>在 Git 命令行客户端中初始化好本地库后，即可查看本地库的状态。查看状态的命令较好记，即“git status”。执行此命令后，会输出三行日志，需简单查看和了解。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git status
On branch master

No commits yet

nothing to <span class="token function">commit</span> <span class="token punctuation">(</span>create<span class="token operator">/</span>copy files <span class="token operator">and</span> use <span class="token string">&quot;git add&quot;</span> to track<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>首先，第一行日志提示当前本地库所在的分支，位于“master”分支。在安装 Git 时若选择让 Git 决定默认分支的名字，其默认分支即为“master”，可在后面的小括号中看到此信息。</p></li><li><p>第二行日志“no commits yet”，表明目前没有东西需要提交，也可理解为当前还未提交过任何东西，即本地库为空。</p></li><li><p>第三行“nothing to commit”，说明不仅未提交过，也没有东西需要提交，因为当前本地库为空，在该目录下未创建任何文件。</p></li><li><p>此时，可以新增一个文件。例如，使用“vim hello.txt”，在其中输入“hello git”“hello 硅谷”等内容，然后退出插入模式，通过“YY”复制、“p”粘贴生成 16 行内容（仅为模拟代码生成），使用“:wq”保存。保存后，通过“ll”查看，在“git demo”项目目录下会有“hello.txt”文件。可以使用“cat hello.txt”查看文件内容，也可用“tail -n”查看文件末尾的行。再次强调，在 Git Bash 客户端中，Linux 命令是通用的，因为 Git 与 Linux 同源。</p></li><li><p>此时再次查看本地库状态，执行“git status”，会发现日志与之前不同。前两行未变，仍表明在“master”分支且未提交过任何东西。但第三行有变化，显示“untracked files”，即未被追踪的文件，“hello.txt”为红色，代表该文件存在于工作区，但 Git 未曾追踪。同时给出提示：“nothing add to commit but untracked files present”，即未添加过任何东西，但存在未被追踪的文件。应使用“git add”命令追踪，此内容在下个视频中讲解如何将文件添加到暂存区。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git status
On branch master

No commits yet

Untracked files<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to include in what will be committed<span class="token punctuation">)</span>
        hello<span class="token punctuation">.</span>txt

nothing added to commit but untracked files <span class="token function">present</span> <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> to track<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-4-添加暂存区" tabindex="-1"><a class="header-anchor" href="#_3-4-添加暂存区" aria-hidden="true">#</a> 3.4 添加暂存区</h2><ul><li><p>将本地文件添加到暂存区</p></li><li><p>接下来讲解如何将本地文件添加到暂存区，这也是 Git 追踪文件的过程。此时操作很简单，使用“git add”命令，其后直接跟上“hello.txt”。执行此操作后，会出现两个警告。“warning”即警告，其提示的内容为 Git 默认帮你转换了行末换行符，表示“LF will be replaced by CRLF in hello.txt”，即提交到暂存区时，将把“CRLF”用“LF”替换。</p></li><li><p>在 Windows 中换行符是“CRLF”，在 Linux 中换行符是“LF”。安装 Git 时选择了自动转换换行符，所以会进行转换。需注意，对于此类警告，程序员通常无需理会。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git add hello<span class="token punctuation">.</span>txt
warning<span class="token operator">:</span> LF will be replaced by CRLF in hello<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>
The file will have its original line endings in your working directory<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将文件添加到暂存区后，继续查看本地库状态，执行“git status”。会发现日志又有变化，前两行不变，关键是第三行，“hello.txt”由红色变为绿色，这表明当前 Git 已追踪到该文件。需注意，此时文件只是存在于暂存区，起初讲过，暂存区的文件可以删除。若此时不想让“hello.txt”保存历史版本，可以使用“git rm --cached”后跟文件名进行删除。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git status
On branch master

No commits yet

Changes to be committed<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>
        <span class="token keyword">new</span> file<span class="token operator">:</span>   hello<span class="token punctuation">.</span>txt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下面演示此功能，执行“git rm --cached hello.txt”，会提示已删除文件。需注意，此删除操作只是将暂存区中的文件删除，工作区中仍存在。直接“ll”查看，会发现“hello.txt”仍老老实实地存在于“git demo”目录下。反复强调，“git demo”只是工作区。若此时再次查看“git status”，会发现“hello.txt”又变为红色，表明 Git 未再追踪它，即已从暂存区删除。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git status
On branch master

No commits yet

Changes to be committed<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>
        <span class="token keyword">new</span> file<span class="token operator">:</span>   hello<span class="token punctuation">.</span>txt


ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git rm <span class="token operator">--</span>cached hello<span class="token punctuation">.</span>txt
rm <span class="token char">&#39;hello.txt&#39;</span>

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git status
On branch master

No commits yet

Untracked files<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to include in what will be committed<span class="token punctuation">)</span>
        hello<span class="token punctuation">.</span>txt

nothing added to commit but untracked files <span class="token function">present</span> <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> to track<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当然，这是为了让大家明白暂存区的文件可以删除。此时继续将文件添加到暂存区，执行“git add hello.txt”，添加完成后再次查看状态，文件又变为绿色，即重新添加成功。</li></ul><h2 id="_3-4-提交本地库" tabindex="-1"><a class="header-anchor" href="#_3-4-提交本地库" aria-hidden="true">#</a> 3.4 提交本地库</h2><ul><li><p>文件添加到暂存区后，接下来要做的是提交本地库。</p></li><li><p>曾说过，文件添加到暂存区后，只是存于暂存区，尚未形成历史版本。而提交本地库这一步，就是将暂存区的文件提交到本地库，形成一个历史版本。</p></li><li><p>提交操作会用到“commit”命令，即“git commit”。“-m”的作用是写一个版本日志信息，若不加“-m”，也会打开文件框让输入日志信息。所以在提交时，通常手动添加“-m”，然后写上本次提交的版本信息，其后跟上文件。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>git commit <span class="token operator">-</span>m <span class="token string">&quot;日志信息&quot;</span> 文件名

$ git commit <span class="token operator">-</span>m <span class="token string">&quot;first&quot;</span> hello<span class="token punctuation">.</span>txt
<span class="token punctuation">[</span><span class="token function">master</span> <span class="token punctuation">(</span>root<span class="token operator">-</span>commit<span class="token punctuation">)</span> <span class="token number">3</span>c068a0<span class="token punctuation">]</span> first
 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> hello<span class="token punctuation">.</span>txt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>现进行提交操作，例如：“git commit -m”，版本信息写“first commit”（第一次提交），然后跟上“hello.txt”。此时会有提示，首先是关于转换行末换行符的警告，可忽略。关键是下面显示“master 主干分支，有一个第一次提交的版本，一个文件被改变，16 行内容被插入”，这表明文件提交成功。</p></li><li><p>需注意一个 7 位的字符码<code>3c068a0</code>，这就是版本号，说明首次提交版本成功。</p></li><li><p>文件提交到本地库后，再次执行查看本地库的命令，会发现日志信息变化。首先前两行显示当前为主干分支，未变。关键是“no commits yet”这一行没有了，因为已提交过，所以不再显示。下面一行“nothing to commit”，表示已提交过，且提交后文件既未新增也未修改，工作区干净，无再次提交的内容。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git status
On branch master
nothing to commit<span class="token punctuation">,</span> working tree clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时，可提前了解查看版本信息的命令。其一为“git reflog”，查看引用日志信息，能明显看到已有一个版本，即“first commit”版本，前面的“3c068a0”为版本号，说明当前指针指向“master”分支的首次提交版本。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git reflog
<span class="token number">3</span>c068a0 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token function">commit</span> <span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token operator">:</span> first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其二为“git log”，此命令查看详细日志。不仅能看到“first commit”版本，还能看到提交该版本的用户签名，即设置的用户签名在此处被用到，所以用户签名一定要设置。但“git log”中的版本号很长，是完整版，而“git reflog”查看的是完整版的前七位精简版版本号，这点需注意。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git log
commit <span class="token number">3</span>c068a03a964f5d3934d84f030575726ea05632f <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span>
Author<span class="token operator">:</span> zbenabc <span class="token operator">&lt;</span><span class="token number">76135327</span>@qq<span class="token punctuation">.</span>com<span class="token operator">&gt;</span>
Date<span class="token operator">:</span>   Sun Aug <span class="token number">18</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">20</span> <span class="token number">2024</span> <span class="token operator">+</span><span class="token number">0800</span>

    first


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-6-修改文件-hello-txt" tabindex="-1"><a class="header-anchor" href="#_3-6-修改文件-hello-txt" aria-hidden="true">#</a> 3.6 修改文件（hello.txt）</h2><ul><li><p><mark>文件修改与版本迭代</mark></p></li><li><p>学会添加暂存区及提交本地库后，接下来再次修改文件以多次演示相关操作，模拟企业开发中代码版本的迭代。</p></li><li><p>此时可以看到“hello.txt”的当前状态。某天，想要修改此代码，这当然可行。修改方式很简单，直接使用“vim”命令。作为程序员，对“hello.txt”进行修改。点击“i”，在第一行代码后添加 10 个“2”，代表代码的第二个版本。然后“:wq”保存。</p></li><li><p>一旦修改文件后，再次查看本地库状态，会发现状态变化，提示文件被修改，即“modified hello.txt”，且此信息为红色。红色表明此次文件修改尚未添加到暂存区，未追踪此次修改。此时需追踪，方法与之前相同，使用“git add hello.txt”。添加后再次查看本地库状态，“hello.txt”变绿，说明文件已添加到暂存区。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git status
On branch master
Changes <span class="token operator">not</span> staged <span class="token keyword">for</span> commit<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="token punctuation">)</span>
        modified<span class="token operator">:</span>   hello<span class="token punctuation">.</span>txt

no changes added to <span class="token function">commit</span> <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>





ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git add hello<span class="token punctuation">.</span>txt

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git status
On branch master
Changes to be committed<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>
        modified<span class="token operator">:</span>   hello<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>仅添加到暂存区还不够，还需提交本地库。此时使用“git commit”命令，版本信息为“second commit”，然后跟上“hello.txt”。查看日志信息，会显示一个文件被修改，一行新增，一行删除。需注意，在 Git 中，它按行维护文件，修改一行时，会先删除修改前的行，再新增修改后的行，所以提示一行新增，一行删除。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git commit <span class="token operator">-</span>m <span class="token string">&quot;second&quot;</span> hello<span class="token punctuation">.</span>txt
<span class="token punctuation">[</span>master <span class="token number">08</span>c7884<span class="token punctuation">]</span> second
 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">deletion</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>提交本地库后再次查看本地库状态，会发现本地库干净。此时查看版本信息“git reflog”，会发现已有两个版本，分别是“first commit”和“second commit”，且指针指向第二个版本。查看“hello.txt”，能看到第二版本的修改。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git reflog
<span class="token number">08</span>c7884 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> second
<span class="token number">3</span>c068a0 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token function">commit</span> <span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token operator">:</span> first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>为防大家没学会，再演示更新一个版本。使用“vim hello.txt”，在第二行添加 10 个“3”，模拟第三个版本，“:wq”保存。只要有文件修改，就可查看本地库状态，会发现检测到文件修改且未被追踪。像之前一样添加到暂存区“git add hello.txt”，添加完成查看本地库状态变为绿色，就可提交到本地库，形成第三个版本。提交时使用“git commit -m”，版本信息为“THIRD commit”，然后跟上“hello.txt”。</p></li><li><p>提交完成后再次查看本地库状态，会再次变干净。此时查看版本信息“git reflog”，能看到第三个版本已存在，且当前指针指向第三个版本。查看“hello.txt”能看到带有“333”的内容。同时，在“git demo”工作区中，永远只会显示一个文件。Git 控制版本并非通过复制文件副本，不像有的同学写论文为保存多个版本而复制多份文件，Git 底层是利用指针控制，这部分内容后续会讲解。</p></li></ul><h2 id="_3-7-历史版本" tabindex="-1"><a class="header-anchor" href="#_3-7-历史版本" aria-hidden="true">#</a> 3.7 历史版本</h2><ul><li><p><mark>历史版本与版本穿梭</mark></p></li><li><p>在 3.7 章节，为大家讲解历史版本以及版本穿梭的问题，了解版本是如何穿梭的。</p></li><li><p>首先，有两个命令：“git reflog”和“git log”，一个用于查看精简版的版本信息，一个用于查看详细版本信息。可以再次演示这两个命令。若进入公司，打开 Git 却不了解当前有多少版本的代码，可先查看精简版，即“git reflog”，能明显看到项目经历的版本更替次数。若还不过瘾，想看每个版本的详细信息，包括提交作者和提交日期，以了解项目历经的时间和版本情况，可去掉“ref”，使用“git log”，还能看到详细的版本号。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git reflog
<span class="token number">2</span>a154a6 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> three
<span class="token number">08</span>c7884 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> second
<span class="token number">3</span>c068a0 HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token function">commit</span> <span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token operator">:</span> first

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git log
commit <span class="token number">2</span>a154a63efc60d6b1c072e65fec60a13d112e578 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span>
Author<span class="token operator">:</span> zbenabc <span class="token operator">&lt;</span><span class="token number">76135327</span>@qq<span class="token punctuation">.</span>com<span class="token operator">&gt;</span>
Date<span class="token operator">:</span>   Sun Aug <span class="token number">18</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">09</span> <span class="token number">2024</span> <span class="token operator">+</span><span class="token number">0800</span>

    three

commit <span class="token number">08</span>c78843550b762a0435fc2e4684e105000e0944
Author<span class="token operator">:</span> zbenabc <span class="token operator">&lt;</span><span class="token number">76135327</span>@qq<span class="token punctuation">.</span>com<span class="token operator">&gt;</span>
Date<span class="token operator">:</span>   Sun Aug <span class="token number">18</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">06</span> <span class="token number">2024</span> <span class="token operator">+</span><span class="token number">0800</span>

    second

commit <span class="token number">3</span>c068a03a964f5d3934d84f030575726ea05632f
Author<span class="token operator">:</span> zbenabc <span class="token operator">&lt;</span><span class="token number">76135327</span>@qq<span class="token punctuation">.</span>com<span class="token operator">&gt;</span>
Date<span class="token operator">:</span>   Sun Aug <span class="token number">18</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">20</span> <span class="token number">2024</span> <span class="token operator">+</span><span class="token number">0800</span>

    first

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若某天老板认为当前较新的代码版本不佳，想进行版本穿梭，比如在本案例中，起初没有“2”和“3”，后来添加了“2”和“3”，但感觉“3”添加得不好，想回到“2”号版本。操作如下：先通过版本信息查找到“2”号版本的版本号并复制，然后使用“git reset --hard”命令，跟上要穿越回去的版本号，如“5770506”（即第二个版本的版本号）。一旦穿越成功，再次查看“git reflog”，会发现指针已移到第二个版本，<code>同时会生成新的操作日志</code>，表明指针已穿越到该版本。查看“hello.txt”，会发现文件内容已无“333”，只有“222”，说明文件版本发生变化。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git reflog
<span class="token number">2</span>a154a6 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> three
<span class="token number">08</span>c7884 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> second
<span class="token number">3</span>c068a0 HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token function">commit</span> <span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token operator">:</span> first

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git reset <span class="token operator">--</span>hard <span class="token number">08</span>c7884
HEAD is now at <span class="token number">08</span>c7884 second


$ git reflog
<span class="token number">08</span>c7884 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">:</span> reset<span class="token operator">:</span> moving to <span class="token number">08</span>c7884 <span class="token punctuation">(</span>新生成的版本操作日志：remove<span class="token punctuation">)</span>
<span class="token number">2</span>a154a6 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> three
<span class="token number">08</span>c7884 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> second
<span class="token number">3</span>c068a0 HEAD@<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token function">commit</span> <span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token operator">:</span> first

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>此外，还可查看“git demo”。在“.git”目录下，有“HEAD”配置文件，右键打开，会发现指针指向“master”，表明当前在“master”分支。要知道在“master”分支的具体版本，需查看“REFS”目录下的“master”文件，打开后能看到记录的版本号，如“5770506”，说明指针指向“master”分支的第二个版本。</p></li><li><p>若还没看懂，再进行穿梭演示。若想回到最初版本，先查看版本信息，复制第一个版本号，然后执行“git reset --hard”并跟上版本号。再次查看应用日志，指针已指向首次提交的版本。更新“master”文件，会发现分支发生变化，指向第一个版本。查看“git Demo”下的“hello.txt”，文件内容变回初始版本。</p></li><li><p>不仅能往前穿越，还能往后穿越。复制第三个版本的版本号，调用命令重新将指针指向第三个版本。再次查看，会发现“master”文件的指针指向第三个版本，“hello.txt”中的“222”和“333”也回来了。</p></li><li><p>这就是 Git 中常用的版本穿梭，希望大家多尝试。关于版本穿梭暂时讲到这里。</p></li><li><p>其实下面还有一个 PPT。经过前面的演示，大家应该能明白：Git 控制版本并非通过 Ctrl+C、Ctrl+V 复制多个副本，而是在本地库内存中记录多个版本信息，通过指针指向不同版本。</p></li><li><p>例如，开始只有一个“first”版本和“master”分支，“HEAD”指针指向“master”分支，“master”分支指向“first”版本。后来新增“second”版本，“master”分支的指针指向“second”版本。再后来新增“third”版本，指针又指向“third”版本。若要穿梭回之前的版本，只需调整指针位置即可。关于版本穿梭的原理就讲解到这里，希望大家好好体会，Git 切换版本底层就是移动“HEAD”指针。</p></li></ul>`,40);function D(E,q){const e=p("router-link"),i=p("ExternalLinkIcon");return c(),r("div",null,[k,v,u(" more "),b,n("nav",g,[n("ul",null,[n("li",null,[a(e,{to:"#概述框架"},{default:t(()=>[s("概述框架")]),_:1})]),n("li",null,[a(e,{to:"#c-第3章git常用命令-1"},{default:t(()=>[s("C-第3章Git常用命令")]),_:1})]),n("li",null,[a(e,{to:"#_3-1-设置用户签名"},{default:t(()=>[s("3.1 设置用户签名")]),_:1})]),n("li",null,[a(e,{to:"#_3-2-初始化本地库"},{default:t(()=>[s("3.2 初始化本地库")]),_:1})]),n("li",null,[a(e,{to:"#_3-3-查看本地库状态"},{default:t(()=>[s("3.3 查看本地库状态")]),_:1})]),n("li",null,[a(e,{to:"#_3-4-添加暂存区"},{default:t(()=>[s("3.4 添加暂存区")]),_:1})]),n("li",null,[a(e,{to:"#_3-4-提交本地库"},{default:t(()=>[s("3.4 提交本地库")]),_:1})]),n("li",null,[a(e,{to:"#_3-6-修改文件-hello-txt"},{default:t(()=>[s("3.6 修改文件（hello.txt）")]),_:1})]),n("li",null,[a(e,{to:"#_3-7-历史版本"},{default:t(()=>[s("3.7 历史版本")]),_:1})])])]),h,n("ul",null,[n("li",null,[s("下面为大家演示如何设置用户签名：在桌面或任意位置右键，打开 Git 客户端，将框调大并放大字体。然后进行如下操作：输入“git”，接着输入“config”，再输入“--global”（“global”意为全局），之后输入“"),n("a",f,[s("user.name"),a(i)]),s("”。例如，为当前 Git 客户端设置名称为“lay”（这是我的英文名）。设置好用户名后，还需设置用户邮箱，即“user.email”。比如设置邮箱为“lay@sv.com”（此为虚拟邮箱，在公司中建议设置真实邮箱），然后点击回车。"),x,s(" git config --global "),n("a",_,[s("user.name"),a(i)]),s(" 用户名"),G,s(" git config --global user.email 邮箱")])]),A])}const H=o(m,[["render",D],["__file","C-第3章Git常用命令.html.vue"]]);export{H as default};
