import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as u,c as s,d,a as i,e as a,w as e,b as l,f as r}from"./app-2a2d189a.js";const G="/assets/figure1-1-49142acd.png",o="/assets/figure1-2-e8957347.png",b="/assets/figure1-3-80d9c75a.png",h="/assets/figure1-4-79033c59.png",c="/assets/figure1-5-82a6fe15.png",_="/assets/figure1-6-04e2811f.png",g={},f=i("h1",{id:"a-第1章git概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#a-第1章git概述","aria-hidden":"true"},"#"),l(" A-第1章Git概述")],-1),m=i("p",null,"A-第1章Git概述",-1),x=r('<div class="hint-container info"><p class="hint-container-title">说明</p><p>主要是各种搜索找的学习；<br><strong>百度链接：</strong><br> :<br> :</p><p><strong>知乎链接：</strong><br> :<br> :</p><p><strong>B站链接：</strong><br> ：<br> ：</p><p><strong>博客链接：</strong><br> ：<br> ：</p><p><strong>GitHub链接：</strong><br> ：<br> ：</p></div>',1),L={class:"table-of-contents"},V=r('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="a-第1章git概述-1" tabindex="-1"><a class="header-anchor" href="#a-第1章git概述-1" aria-hidden="true">#</a> A-第1章Git概述</h2><h2 id="一、知识总体介绍" tabindex="-1"><a class="header-anchor" href="#一、知识总体介绍" aria-hidden="true">#</a> 一、知识总体介绍：</h2><ul><li><p><mark>Git</mark></p></li><li><p>Git是什么？(当你在做JAVA开发or大数据开发or前端开发 都会使用到Git)</p></li><li><p>Git 是一个免费的、开源的<code>分布式版本控制系统</code>，可以快速高效地处理从小型到大型的各种项目。</p></li><li><p>使用Git管理 or 其它的代码；差不多就是 需要写代码进行管理的话就需要使用到Git</p></li><li><p>第一步是Git的介绍：Git是一个分布式版本控制工具；除了这个分布式的，还有个叫集中式版本控制工具</p></li><li><p>本课程旨在介绍分布式版本控制与集中式版本控制的区别。首先，将介绍Git的基本概念，并基于Windows系统安装最新版本的Git（2.31.1）。新版本包含一些新特性，因此本课程将重点介绍这些最新特性。</p></li><li><p>安装完成后，将详细介绍Git的常用命令，这些命令是基于开发案例的详细讲解Git的常用命令。希望大家能够尽可能多地记住这些命令。接着，将讲解Git的分支功能，这是Git的一个核心特性。如果公司使用Git进行代码管理，分支功能肯定会被用到。将详细介绍分支的创建、转换和合并，以及在分支合并中可能遇到的代码冲突问题，并演示如何解决这些冲突：代码合并冲突解决，当代码冲突了如何进行解决？。</p></li><li><p>此外，本课程还将重点讲解如何在流行的开发工具IntelliJ IDEA中集成和使用Git：：Idea 集成Git。</p></li></ul><br><ul><li><p><mark>Github</mark></p></li><li><p>接下来，将介绍Git的官方代码托管中心(用来在服务器上存放代码的)——GitHub。将讲解如何创建远程仓库，以及如何使用推送（push）和拉取（pull）命令来管理代码。还会介绍代码的克隆（clone）操作，这是在加入新公司时经常需要执行的任务。</p></li><li><p>本课程还会提到Git和Maven，它们被称为实习生的两大杀手。虽然这两个工具都不难，但在公司中会经常用到。例如，项目经理可能会通过即时通讯软件发送代码链接，并要求你先熟悉代码。如果不知道如何克隆代码，可能会给项目经理留下不好的印象。在clone学会之后，基本上Github就结束了；<br> 但是Github的服务器是在国外的，因此会受到网络的影响，速度会非常慢，还有可能连接不上；因此SSH免密登录；</p></li><li><p>课程还将讲解GitHub的SSH免密登录，这是一种更为安全和便捷的登录方式。此外，还会介绍如何在IntelliJ IDEA中集成GitHub。</p></li></ul><br><ul><li><p><mark>Gitee</mark></p></li><li><p>除了GitHub，还有Gitee（被称为国内版本的GitHub），它是一个基于局域网的代码托管中心，适合那些不打算将代码放在互联网上的公司使用。将讲解如何在Gitee上创建远程仓库，以及如何在IntelliJ IDEA中连接Gitee进行代码推送即IDEA集成Gitee。</p></li><li><p>码云连接GitHub进行代码的复制和迁移</p></li></ul><br><ul><li><p><mark>GitLab</mark></p></li><li><p>最后，将介绍GitLab，这是一个基于局域网的代码托管平台。将讲解GitLab服务器的搭建和部署，以及如何在IntelliJ IDEA中集成GitLab。</p></li><li><p>在讲完 Gitee 之后，为大家讲解了 GitLab 。GitLab 是一个基于局域网的代码托管中心。比如公司不是开源的，且不打算将代码放到互联网上，就可以搭建公司内部的 GitLab 服务器，然后上传代码。由于市面上讲解 GitLab 的课程不多，所以这里讲解了 GitLab 服务器的搭建和部署。搭建好服务器后，还讲解了在 IntelliJ IDEA 中如何连接 GitLab 服务器，即 GitLab 与 IntelliJ IDEA 的集成。</p></li></ul><h2 id="二、git总体介绍" tabindex="-1"><a class="header-anchor" href="#二、git总体介绍" aria-hidden="true">#</a> 二、Git总体介绍</h2><ul><li>本课程旨在教授Git的使用，开始学习之前，首先了解文档结构。文档共分为10个章节：<br> 第一章：介绍Git的基本概念，让不熟悉Git的学员了解Git是什么。<br> 第二章：基于官网的最新版本2.31.1，讲解Git的安装过程。<br> 第三章：介绍Git的常用命令。<br> 第四章：讲解Git的分支功能。<br> 第五章：介绍Git中的团队协作机制，包括团队内协作和跨团队协作。<br> 第六章：讲解GitHub的操作。<br> 第七章和第八章：讲解如何在IntelliJ IDEA中集成Git和GitHub。<br> 第九章：介绍国内版本的GitHub，即Gitee（码云）的使用方式。<br> 第十章：指导如何自建代码托管中心，包括GitLab服务器的安装和部署。</li></ul><h3 id="_2-1-git概述" tabindex="-1"><a class="header-anchor" href="#_2-1-git概述" aria-hidden="true">#</a> 2.1 Git概述：</h3><ul><li><p>Git是一个免费、开源的分布式版本控制系统，具有以下特点：<br> 完全免费、开源。<br> 分布式版本控制系统。<br> 在公司快速方便的适用于从小型到大型的各类项目。<br> 易于学习，占用空间小，性能极快。<br> 本地库方便且成本低廉。（Git 的本地库位于本地磁盘上，正因如此，我们称其具有廉价的本地库这一特性。）<br> 性能优于SVN、CVS等老牌版本控制工具。<br> 拥有方便的暂存区和多工作流分支特性。</p></li><li><p>分布式版本控制系统与集中式版本控制系统的区别：分布式版本控制系统在本地磁盘上拥有完整的仓库副本，而集中式版本控制系统通常依赖于中央服务器。</p></li><li><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作<br> 流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p></li><li><p>建议学习者熟悉Git官网，以便更好地理解Git的使用方法和特性。<br> Git官网提供了Git的图标和分支功能的描述，强调了分支功能的重要性。<br> 官网上列出了使用Git的知名公司，如谷歌、Facebook、微软、推特、领英和Linux等。</p></li><li><p><mark>Git版本下载：</mark><br> 官网提供了最新版本Git 2.31.1的下载链接。<br> 根据用户系统的位数（32位或64位），官网会自动推荐合适的版本进行下载。</p></li><li><p>查看系统版本号：用户可以通过打开“此电脑”，右键选择“属性”来查看操作系统的位数。</p></li></ul><h2 id="三、版本控制" tabindex="-1"><a class="header-anchor" href="#三、版本控制" aria-hidden="true">#</a> 三、版本控制</h2><h3 id="_3-1-何为版本控制" tabindex="-1"><a class="header-anchor" href="#_3-1-何为版本控制" aria-hidden="true">#</a> 3.1 何为版本控制</h3><ul><li><p>版本控制是一种记录文件内容变化的系统。它不仅可以记录文件内容随时间的变化，还可以让用户查询特定版本的文件状态，甚至在不同版本之间进行切换。版本控制的核心价值在于记录文件修改的历史，允许用户查看历史版本，实现版本间的比较和切换。</p></li><li><p>版本控制的实际应用示例：</p></li><li><p>在帮助一位同学修改本科毕业论文时，发现他采用了一种朴素的版本控制方法。该同学在给导师提交初稿后，导师反馈并打回论文。同学没有直接在原稿上修改，而是通过复制粘贴创建了副本，并在此基础上进行修改，命名为“修改版一”。这种做法体现了版本控制的基本思想，即使用文件副本来管理不同版本的论文。<br><img src="'+G+'" alt="figure1-1" loading="lazy"></p></li></ul><h3 id="_3-2-为什么需要版本控制" tabindex="-1"><a class="header-anchor" href="#_3-2-为什么需要版本控制" aria-hidden="true">#</a> 3.2 为什么需要版本控制</h3><ul><li><p>个人开发过渡到团队协作。</p></li><li><p>版本控制在企业中的挑战：</p></li><li><p>在企业环境中，采用多副本方式进行版本控制是不可行的。企业开发通常涉及团队协作，而非个人单打独斗。例如，程序员小红和小蓝同时对同一代码版本进行修改，如果不使用版本控制工具，小蓝的更改可能会覆盖小红的更改，导致工作重复或丢失。<br><img src="'+o+'" alt="figure1-2" loading="lazy"></p></li><li><p>版本控制工具的必要性：<br> 因此，企业需要专业的版本控制工具，如Git，来帮助合并不同成员的代码更改，确保协作的效率和代码的完整性。</p></li><li><p>Git在团队协作中的应用：<br> Git不仅支持个人开发，更重要的是支持团队协作。在第五章中，将介绍两种团队协作模式，展示如何在Git中有效进行团队合作。</p></li></ul><h3 id="_3-3-版本控制工具" tabindex="-1"><a class="header-anchor" href="#_3-3-版本控制工具" aria-hidden="true">#</a> 3.3 版本控制工具</h3><ul><li>版本控制工具主要分为两大类：集中式和分布式。本章将简要介绍这两种工具的区别。</li></ul><h4 id="集中式版本控制工具" tabindex="-1"><a class="header-anchor" href="#集中式版本控制工具" aria-hidden="true">#</a> 集中式版本控制工具</h4><ul><li><p>集中式版本控制工具的代表是 SVN，尽管在现代企业中使用已逐渐减少。在集中式版本控制系统中，所有代码维护在一个中央服务器上。开发人员通过本地客户端连接到中央服务器，获取最新文件，进行修改后，再将代码提交回服务器。</p></li><li><p>集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存<br> 所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或<br> 者提交更新。多年以来，这已成为版本控制系统的标准做法。</p></li><li><p>集中式版本控制的核心思想是所有开发人员对同一套代码进行修改，确保团队成员工作在同一代码基础上。例如，程序员 A、B、C 通过中央服务器协作，依次提交不同版本的代码，如 V1、V2、V3。</p></li><li><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什<br> 么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要<br> 远比在各个客户端上维护本地数据库来得轻松容易。</p></li><li><p>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕<br> 机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。<br><img src="'+b+'" alt="figure1-3" loading="lazy"></p></li></ul><h4 id="分布式版本控制工具" tabindex="-1"><a class="header-anchor" href="#分布式版本控制工具" aria-hidden="true">#</a> 分布式版本控制工具</h4><ul><li><p>分布式版本控制工具的代表是 Git。在分布式系统中，每个客户端都是一个完整的代码库，可以在本地进行版本控制。例如，程序员 A、B、C 可以在各自的电脑上独立进行版本控制，如创建 V1、V2、V3 等版本。</p></li><li><p>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码<br> 仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用<br> 其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次<br> 对整个文件仓库的完整备份。</p></li><li><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</p><ul><li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</li></ul></li><li><p>分布式版本控制工具解决了集中式版本控制的单点故障问题。即使远程服务器宕机，开发人员仍然可以在本地进行开发和版本控制。每个客户端都保存了整个项目的完整历史记录，提高了安全性。</p></li><li><p>分布式版本控制工具的另一个优点是，每个客户端都拥有项目的全部历史，使得即使在服务器断网的情况下，开发人员也可以继续工作，并且项目历史得以保留。</p></li><li><p>下面这张图片呢应该 增加一个远程仓库在右边，这样的话就是说每个本地都有一个历史版本；而如果远程仓库断了也没有事情；<br><img src="'+h+'" alt="figure1-4" loading="lazy"></p></li></ul><h3 id="_3-4-git-简史" tabindex="-1"><a class="header-anchor" href="#_3-4-git-简史" aria-hidden="true">#</a> 3.4 Git 简史</h3><ul><li><p>Git 的发展历史：让我们来探究一下 Git 的起源和它的发展故事。</p></li><li><p>Linux 与 Git 的联系：</p></li><li><p>Git 与 Linux 有着紧密的联系，它们由同一位开发者——Linus Torvalds 创建。Linus 以其高瞻远瞩的开发视野，开发了 Linux 系统，并选择将其开源，吸引了全球的系统爱好者共同参与开发。</p></li><li><p>Linux 代码的早期管理：</p></li><li><p>在早期，Linux 代码的管理相对原始，Linus 手动合并社区成员提交的代码。随着时间推移，社区成员的增加，这种手动合并的方式变得越来越不切实际。</p></li><li><p>Beta Keeper 的引入与撤销：</p></li><li><p>2002 年，由于 Linux 社区的快速增长，Linus 开始使用一个商业软件 Beta Keeper 来帮助管理代码合并。然而，三年后，因为社区成员破解了 Beta Keeper，Betamovier 公司收回了对 Linux 社区的免费使用权。</p></li><li><p>Git 的诞生：</p></li><li><p>面对代码合并的问题，Linus 决定自己开发一个版本控制系统。他用 C 语言编写了 Git，并在短短两周内完成了开发。2005 年，Git 首次被用于 Linux 内核代码的管理。</p></li><li><p>GitHub 的创立：</p></li><li><p>2008 年，Linus 推出了 GitHub，一个远程代码托管中心，它极大地促进了开源项目的发展，吸引了众多开源框架将源码托管在 GitHub 上。</p></li></ul><figure><img src="'+c+'" alt="figure1-5" tabindex="0" loading="lazy"><figcaption>figure1-5</figcaption></figure><h3 id="_3-5-git-工作机制" tabindex="-1"><a class="header-anchor" href="#_3-5-git-工作机制" aria-hidden="true">#</a> 3.5 Git 工作机制</h3><ul><li><p>Git 内部的工作机制非常简单，尽管其功能强大。以下是对其工作机制的详细介绍：</p></li><li><p>Git 主要分为三个区域，分别是工作区、暂存区和本地库。</p></li><li><p>工作区：工作区即编写代码的区域。需注意，工作区并非指开发工具（如 IDEA），而是指代码存放的磁盘目录位置。例如，使用 IDEA 创建一个项目时，必然会在本地磁盘生成一个目录，此目录即为工作区，也就是存放代码的位置。</p></li><li><p>暂存区：在工作区编写代码后，需让 Git 追踪到代码文件，此时就需要将工作区的代码添加到暂存区。需注意，这里的用词是“添加”，对应的 Git 命令为“add”。由于暂存区的代码是临时存储，所以可以删除。同理，工作区的代码也可以删除。例如，在本地写了一行代码，原本写了 3 行，又在下方加了第 4 行，若感觉第 4 行写得不好，使用退格键删掉。如果此操作在工作区进行，删掉即删掉，该代码无历史记录和历史版本。</p></li><li><p>本地库：只有将暂存区的代码提交到本地库，才会生成对应的历史版本。这里的用词是“提交”，对应的 Git 命令为“commit”。一旦将代码提交到本地库，生成历史版本后，代码便无法删除。</p></li><li><p>为便于理解，举例说明：在公司进行开发时，某天因压力大，喝酒后想发泄，在代码中添加了骂老板的话（如“my boss is stupid”）作为注释。若仅在工作区编写此代码，第二天酒醒后删除，神不知鬼不觉，老板不会知晓。若不仅在工作区编写，还添加到了暂存区，第二天酒醒后也不必惊慌，因为暂存区的代码可以通过执行 Git 命令删除，然后再删掉工作区的代码，老板仍看不到。但倘若不仅添加到了暂存区，还提交到了本地库，此时便会生成相应的历史版本，骂老板的代码就无法删除了。</p></li><li><p>例如，代码首先有 V1 版本和 V2 版本，在 V2 版本基础上骂了老板并提交为 V3 版本。若想让此代码消失，只能基于 V3 版本删掉该语句，然后再提交一个 V4 版本。从表面看，老板看不到骂人的代码，但万一老板懂 Git ，查询到代码中有 V3 版本，并切换到该版本，就会看到骂人的语句。因此，Git 中的历史版本无法单独删除。</p></li><li><p>需要注意的是，Git 的版本基于上一个版本，V4 版本基于 V3 版本，所以不能单独删掉 V3 版本的代码。当然，如果直接删除整个本地库（即项目目录），也是可以删掉代码的，但需承担相应后果。所以，在提交本地库之前，对于编写的代码，尤其是可能存在问题的代码，一定要慎重检查。<br> 上述即为 Git 的工作机制。<br><img src="'+_+'" alt="figure1-6" loading="lazy"></p></li></ul><h3 id="_3-6-git-和代码托管中心" tabindex="-1"><a class="header-anchor" href="#_3-6-git-和代码托管中心" aria-hidden="true">#</a> 3.6 Git 和代码托管中心</h3><ul><li><p>接下来了解一下代码托管中心。</p></li><li><p>代码托管中心是基于网络服务器的远程代码仓库，一般称为远程库。将本地库的代码提交并形成历史版本后，还可以进行一个操作，即将代码推送到远程库。此操作在公司中经常用到，对应的命令为“push”。</p></li><li><p>仍基于上述例子，如果将骂老板的版本不仅提交到本地库，还推送到了远程库（如 GitHub），且公司的 GitHub 远程库是完全开源的。那么，不仅公司的人能看到骂人的代码，全世界能访问此远程库的人都能发现。所以，这些操作存在风险，需谨慎处理。</p></li><li><p>重点介绍一下代码托管中心的类型：Git 的代码托管中心主要分为两类：</p></li><li><p>互联网版本的代码托管中心，如官方的 GitHub 。但 GitHub 基于外网，服务器在国外，如果公司网络不佳，连接 GitHub 的效率可能会很低。<br> 国内也有类似的代码托管中心，如 Gitee 。</p></li><li><p>此外，公司还可以搭建自己的 GitLab 服务器，GitLab 基于局域网，适用于不想将代码推到互联网上开源的公司，可作为公司自己的代码托管中心。<br> 关于代码托管中心的介绍暂时到此。</p></li></ul>',33);function A(H,I){const t=n("router-link");return u(),s("div",null,[f,m,d(" more "),x,i("nav",L,[i("ul",null,[i("li",null,[a(t,{to:"#概述框架"},{default:e(()=>[l("概述框架")]),_:1})]),i("li",null,[a(t,{to:"#a-第1章git概述-1"},{default:e(()=>[l("A-第1章Git概述")]),_:1})]),i("li",null,[a(t,{to:"#一、知识总体介绍"},{default:e(()=>[l("一、知识总体介绍：")]),_:1})]),i("li",null,[a(t,{to:"#二、git总体介绍"},{default:e(()=>[l("二、Git总体介绍")]),_:1}),i("ul",null,[i("li",null,[a(t,{to:"#_2-1-git概述"},{default:e(()=>[l("2.1 Git概述：")]),_:1})])])]),i("li",null,[a(t,{to:"#三、版本控制"},{default:e(()=>[l("三、版本控制")]),_:1}),i("ul",null,[i("li",null,[a(t,{to:"#_3-1-何为版本控制"},{default:e(()=>[l("3.1 何为版本控制")]),_:1})]),i("li",null,[a(t,{to:"#_3-2-为什么需要版本控制"},{default:e(()=>[l("3.2 为什么需要版本控制")]),_:1})]),i("li",null,[a(t,{to:"#_3-3-版本控制工具"},{default:e(()=>[l("3.3 版本控制工具")]),_:1})]),i("li",null,[a(t,{to:"#_3-4-git-简史"},{default:e(()=>[l("3.4 Git 简史")]),_:1})]),i("li",null,[a(t,{to:"#_3-5-git-工作机制"},{default:e(()=>[l("3.5 Git 工作机制")]),_:1})]),i("li",null,[a(t,{to:"#_3-6-git-和代码托管中心"},{default:e(()=>[l("3.6 Git 和代码托管中心")]),_:1})])])])])]),V])}const B=p(g,[["render",A],["__file","A-第1章Git概述.html.vue"]]);export{B as default};
