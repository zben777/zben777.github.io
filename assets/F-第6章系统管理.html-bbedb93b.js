import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as a,c as o,d as c,a as e,e as n,w as l,b as t,f as p}from"./app-2a2d189a.js";const u={},d=e("h1",{id:"f-第6章系统管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#f-第6章系统管理","aria-hidden":"true"},"#"),t(" F-第6章系统管理")],-1),h=e("p",null,"F-第6章系统管理",-1),w=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"说明"),e("p",null,"主要是各种搜索找的学习；")],-1),m={class:"table-of-contents"},x=p('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="f-第6章系统管理-1" tabindex="-1"><a class="header-anchor" href="#f-第6章系统管理-1" aria-hidden="true">#</a> F-第6章系统管理</h2><h2 id="一、linux-系统管理-服务管理" tabindex="-1"><a class="header-anchor" href="#一、linux-系统管理-服务管理" aria-hidden="true">#</a> 一、Linux 系统管理 - 服务管理</h2><ul><li><p>已介绍远程登录方式，接下来介绍第七章——Linux 中的系统管理。首先回忆在进行网络配置时，使用了网络服务重启命令。即在修改静态 IP 地址后，执行了“service network restart”，以重启网络服务。此命令形如一句话，即“服务网络重启”，其含义是对整个网络服务进行重启。可能会疑惑为何此命令表述为这种倒装形式，而非“network service restart”，这是因为“service”本身是 Linux 中的一个系统命令，可在“user s Bin”中找到。若要查找，可使用“|”管道进行筛选。在此可看到“service”命令的存在。</p></li><li><p>首先了解 Linux 中服务的概念。谈到服务，需重新理解进程的概念。在计算机领域，进程指正在执行的程序或命令。每个进程是正在运行过程中的实体，在计算机底层有自己的地址空间，需占用相应资源，会占用一块内存。操作系统进行进程管理时，会为每个内存单元中的进程分配唯一识别码，即 PID，此点后续再详讲。进程有区分，如执行“LS”列举当前目录文件或“CD”切换路径等命令，执行后很快返回结果，执行此类命令也是一个进程，但在内存中停留时间短。然而，并非所有进程如此，如启用的网络服务，启动后会一直存在，只要不关闭，就常驻内存，为持续提供某种功能或完成任务，此即所谓服务。因此，“service”服务指生命周期长的特殊进程。</p></li><li><p>在 Windows 电脑中，可查询当前服务，如右击“我的电脑”，点击“管理”，在“服务和应用程序”中点击“服务”，可查看配置的所有系统服务及状态、启动类型等。Windows 对此有一套管理方式，Linux 同样对服务有一整套管理方式，涉及系统进程和服务的管理，这是 Linux 系统管理的重要部分。</p></li><li><p>在 Linux 中，服务常驻内存，在控制台通常看不到具体服务执行过程，服务均在后台运行。系统运行需众多后台服务支撑，这些服务在系统启动时引导装入，直至系统关闭才终止，统称系统服务。执行系统服务的进程称为守护进程，英文为“Daemon”，有守护者之意。Linux 中许多服务以“d”结尾，表示其为守护进程。可理解为系统服务的启动和管理需守护进程操作，守护的就是系统服务，在 Linux 中可认为系统服务和守护进程是一回事，后续不再区分两者概念。</p></li><li><p>接下来看在 Linux（红帽系）中如何进行服务管理。首先，之前接触过的“service”命令，后跟服务名及对服务的操作，这是旧版本（如 CentOS 6）管理服务的方法，仅作了解，因在 CentOS 7 中默认不再使用。具体使用如“service network start”表示启动服务，“stop”表示停止服务，“restart”先停止再启动，“status”查看服务状态。在 CentOS 6 中执行“service”命令时，所选服务须在“/etc/init.d”目录下，此目录表示守护进程，其中绿色文件为可执行文件，多为脚本。但对于一个系统，守护进程不应仅有“netconsole”和“network”这两个，系统启动所需的服务远不止于此。</p></li><li><p>于是需介绍 CentOS 7 中更新的用法，这是重点掌握内容。CentOS 7 对 CentOS 6 中“service”的调用做了兼容，仍可使用，但此目录下服务减少。CentOS 7 推荐使用“systemctl”命令，本质上“ctl”表示“control”，即用于系统控制和管理，主要管理系统服务。“systemctl”管理服务时，所有服务位于“/usr/lib/systemd”目录下。查看此目录，“systemd”本身是服务或命令，还有“system”目录，其中有大量以“.service”结尾的服务文件，还有“.target”，可视为一组服务的集合。</p></li><li><p>CentOS 7 对 CentOS 6 的“service”命令兼容，如“network”服务，既可按 CentOS 6 方式调用，也可按 CentOS 7 方式。如重启网络服务，CentOS 6 中“service network restart”可行，CentOS 7 中“systemctl restart network”亦可。CentOS 7 中，“network”仍在旧位置，未移出是因其有替代服务“network manager”，之前修改 IP 地址后网络不通时曾提及可关闭此服务。更推荐的是保留“network manager”，停用老版本“network”服务。</p></li><li><p>若要保留一个网络服务，可查看其状态。如“systemctl status network”，其为“active”。再看“network manager”，也是“active”且“running”，而“network”是“active”且“exit”。若同时“active”，可能有问题，如停止“network”，“systemctl stop network”，网络标志消失，无法上网，域名解析也无，主机也无法连接。此时重启“network manager”，“systemctl restart network manager”，网络恢复。对于 CentOS 7，推荐保留“network manager”。</p></li><li><p>综上，了解了 CentOS 6 和 CentOS 7 中服务的启动、停止和状态查询的两种服务管理方式。</p></li></ul><h2 id="二、linux-系统服务管理与运行级别" tabindex="-1"><a class="header-anchor" href="#二、linux-系统服务管理与运行级别" aria-hidden="true">#</a> 二、Linux 系统服务管理与运行级别</h2><ul><li><p>已了解系统服务的基本管理方法，在 CentOS 6 版本之前，主要使用 service 命令管理服务，而 CentOS 7 之后则使用 systemctl 命令。此前操作仅能启动、停止服务或查看服务状态。</p></li><li><p>系统中有众多服务，部分服务开机自启动，若所有服务均开机自启，会拖慢启动速度。除手动启动、停止服务外，能否配置服务的开机自启动选项？Windows 中有相关配置，Linux 中也有类似的图形化配置界面。但并非在应用程序中的系统工具里，运行终端输入“setup”，可看到交互式设置工具的图形化界面。首先看到的是系统服务，选择系统服务后回车，可看到众多系统服务。每个服务前有方括号，内有星号表示开机自启动，无星号则否。如 network 服务默认开机自启动，若不想其开机自启，选中后按空格即可，再按空格可恢复开机自启。</p></li><li><p>需注意，上方类似标题处分为两类，一类是“sysv init scripts”，即 system v 的启动脚本，此栏目下仅有 netconsole 和 network，本质为 system v 的启动脚本，位于 etc 下的 init.d 目录。更多服务统称“systemd Services”，CentOS 7 新版本中所有服务基于 systemd 守护进程。</p></li><li><p>早期 Linux 版本基于 Unix 设计优化，Unix 中系统服务管理影响了 Linux 做法。Unix 中有重要且稳定的版本 system 5，其系统第一个启动的用户进程叫 init（initialize 的前四个字母），所有系统服务的守护进程由 init 进程调用启动，init 进程是 Linux 内核初始化后主动启动的第一个用户进程，随后根据用户定义的系统运行级别启动不同服务进程，涉及运行级别概念。</p></li><li><p>先从 CentOS 6 老版本的 Linux 环境中的系统运行级别讲起。运行级别（run level）即梳理 Linux 系统开机启动的步骤。首先开机，进入 BIOS 自检和启动过程，接着从引导分区（boot）获取引导文件和 Linux 内核内容进行系统初始化，初始化完成后第一个启动的是 init 进程，然后判断系统运行级别并根据级别启动对应系统服务，这是系统启动的基本步骤。</p></li><li><p>Linux 系统有 7 种运行级别，从 0 到 6，每种级别对应不同功能。级别越高，功能越丰富；级别越低，功能越简单基础。级别 6 是重启级别，与其他级别不同。</p></li><li><p>级别 0 是停机模式，系统处于停机状态，默认不能设为系统运行级别，否则无法正常启动。级别 1 为单用户工作模式，只允许 root 用户登录，禁止远程登录，主要用于 root 用户在实体物理机上进行系统维护和重要的系统管理操作，类似 Windows 下的安全模式，启动服务最少，是最小化启动，可在输入 root 用户密码前对根分区进行重新挂载并改为可写入状态，若忘记 root 密码，可用此方式无需密码进入并重新设置，此方式不能远程操作，必须在实体物理机上，在机房内进行操作，较为安全。</p></li><li><p>级别 2 是多用户状态，但无网络文件系统（NFS），支持多个用户登录，但无网络。级别 3 是完全的多用户状态，在级别 2 基础上增加了 NFS 支持，登录后为控制台命令行模式，是服务器常用的完全体状态，若断开网络服务，与级别 2 无异。级别 4 是系统未使用的保留模式，一般不用，特殊情况可占用。级别 5 是图形界面的多用户模式，登录后进入窗口化图形 GUI 模式，是当前环境正在执行的模式。级别 6 是重启模式，若设为启动级别，系统会无限重启，无法正常启动。</p></li><li><p>不同运行级别区别在于启动时默认启动的服务不同，级别低的支持服务少，级别高的支持服务多。0 和 6 级别一般不能作为正常启动级别，级别 4 一般不用，级别 1 为特殊情况使用的安全模式，平时常用级别为 2、3、5，而级别 2 与无网络服务的级别 3 类似，关键常用级别为 3 和 5。CentOS 7 对此进行简化，运行级别简化为两个关键字或两个 target，分别为“Multi-user.target”（相当于级别 3，多用户、有网络、无图形界面）和“Graphical.target”（相当于级别 5，有图形界面）。</p></li><li><p>可使用“systemctl get default”查看当前默认启动的运行级别，若未更改，即为当前运行级别，如当前为级别 5（“Graphical.target”）。若要更改默认启动级别，使用“systemctl set default”加上对应级别即可。在 CentOS 6 中，查看默认启动级别需查看 etc 下的“inittab”配置文件，此文件在 CentOS 7 中已无默认定义。“Multi-user.target”相当于级别 3，“Graphical.target”相当于级别 5。</p></li><li><p>若在级别 5 状态下想切换到级别 3，可使用快捷键“Ctrl + Alt + F2”进入控制台页面，切回则按“Ctrl + Alt + F1”，也可使用命令行“init 3”切换到级别 3，“init 5”切回级别 5，此过程与快捷键操作本质相同。</p></li><li><p>以上是关于 Linux 系统运行级别以及服务开机自启动的相关内容。</p></li></ul><h2 id="三、linux-系统服务开机自启动配置" tabindex="-1"><a class="header-anchor" href="#三、linux-系统服务开机自启动配置" aria-hidden="true">#</a> 三、Linux 系统服务开机自启动配置</h2><ul><li><p>了解系统运行级别后，能更清楚不同运行级别下服务能否自启动，通常可自行配置。正常情况下，以不同运行级别进入系统，启动的服务可能不同，服务是否启动、如何启动、哪些启动均可配置。</p></li><li><p>此前通过“setup”可在运行级别 5 的图形化界面中指定自启动的系统服务。Linux 标配仍为命令行操作，打开终端，查看命令行中如何判断和更改系统服务的自启动行为。</p></li><li><p>先看老版本，CentOS 6 中使用“chkconfig”命令（“ch k + config”），若加“--list”，会列出所有的 system v 服务（不包含原生 systemd 服务）。CentOS 6 基于 system v 系统，启动时第一个启动的是 init 进程，此进程是启动所有服务的根源。而 CentOS 7 中，最初启动的 unit 被 systemd 取代。systemd 优势在于 init 进程只能单一启动、单线程，而 systemd 可并行启动，速度更快，这也是 CentOS 7 切换到此服务的原因。</p></li><li><p>老版本“chkconfig --list”时，仅能列出 system v 中的服务，如只有“netconsole”和“network”。其中有 0 - 6 多个开关定义，代表不同系统运行级别。“netconsole”直接关闭，全是关。“network”在 0 级别（停机模式）不能启动，为关；1 级别（单用户模式）不能启动，为关；2 级别（多用户模式，无 NFS）可启动，为开；3 级别（多用户完全模式，有网络服务）为开；4 级别（系统保留）为开；5 级别（图形化界面）为开；6 级别（重启模式）为关。即“network”开机自启动配置在 2 - 5 级别为开，0、1、6 级别为关。</p></li><li><p>若此前在图形化界面“setup”工具中取消“network”的自启动空格，退出后查看其自启动配置，会全部关闭。若在系统服务中按空格将“network”配置为开机自启动，再查看不同运行级别，仍为 0、1、6 级别关，2 - 5 级别开，与之前介绍相同，0 和 6 级别不能开，1 级别为单用户模式不能开，能开的为 2 - 5 级别。</p></li><li><p>此前通过“setup”图形化界面查看其开启关闭，若用命令行操作，“chkconfig”后接“network”加“off”可关闭所有开机自启动，查看结果与在图形化界面取消空格相同。若要打开，用“on”即可。若针对某一级别关闭，如 3 级别，使用“chkconfig --level 3 network off”，再查看则 2、4、5 级别开，3 级别关。</p></li><li><p>在 CentOS 6 中，服务管理使用“service”进行服务的开启和停止，使用“chkconfig”进行服务的自启动配置，两个命令较麻烦，CentOS 7 进行了统一。开启或停止服务时使用“systemctl”，它可控制 systemd 所有服务的状态，是系统和服务的管理者。此前更改主机名时使用“hostnamectl”，CentOS 7 进行系统管理时后缀多为“ctl”，“hostnamectl”专门配置和管理主机名，“systemctl”管理范围更广，可管理服务的启动、停止和开机自启动状态。</p></li><li><p>查看“network manager”（此前少写“manager”）的状态，为“active”和“running”，其开机自启动配置，加载时为“network manager.service”，为“enabled”，即开机自启动，系统运行级别 5 的默认配置“preset”也为“enable”，若要改为开机不自启动，使用“systemctl disable network manager”，再查看状态变为“disabled”，与默认配置不同，若要恢复开机自启动，将“disable”改为“enable”即可。</p></li><li><p>在 CentOS 7 中，可使用“systemctl list unit-files”查看所有服务的开机自启动信息。在 systemd 管理模式下，所有的“service”、“target”等服务或服务包都称为“unit”，即管理单元。可看到“service”对应的“pass”、“mount”、“socket”、“target”等，以及其开机是否自启动的配置，“Enabled”为开机启动，“Disabled”为开机不启动，“Static”表示不确定，因服务可能与其他服务关联，依赖其他服务启动。</p></li><li><p>接下来是实战，配置防火墙开机是否自启动。在 CentOS 6 及以前版本，防火墙服务称为“iptables”，关闭防火墙为“iptables service stop”。CentOS 7 版本中，防火墙称为“firewalld”（有“d”，表示守护进程），可配置其开机自启动。此前防火墙类似为机器网络连接加了筛选 IP 的壳（还可能包括端口“port”），像一张表，现在直观称为防火墙。</p></li><li><p>先查看当前防火墙状态，使用“systemctl status firewalld”，为开启，开机自启动默认也为“enable”。若要暂时停掉防火墙，使用“systemctl stop firewalld”（自动补全可能为“firewalld.service”，有无“.service”均可），再查看状态为“inactive”，但开机自启动仍为“enable”。若要更改开机自启动配置，使用“systemctl disable firewalld.service”，再查看状态，不仅“inactive”，且为“disabled”，但当前运行级别 5 下默认配置仍为“enable”。</p></li><li><p>通常情况下，防火墙应开启，使用“systemctl start firewalld”，再查看状态为“active running”，开机自启动为“Enabled”。此为系统操作中关闭防火墙的相关内容。</p></li></ul><h2 id="四、linux-系统关机重启命令" tabindex="-1"><a class="header-anchor" href="#四、linux-系统关机重启命令" aria-hidden="true">#</a> 四、Linux 系统关机重启命令</h2><ul><li><p>在系统管理这部分的最后，介绍关机重启命令。关机操作看似简单，可长按关机键，或在图形化界面点击关机按钮直接关闭。但对于服务器操作，需知晓对应的指令。在 Linux 服务器上，关机操作很少遇到，因服务器通常 7×24 小时持续运行，除非出现严重故障才停机维护。不过，仍需了解关机指令。</p></li><li><p>关机指令主要是“shutdown”。直接输入，默认一分钟后关机。在未关机时，输入“shutdown -c”可取消之前指定的关机操作。</p></li><li><p>可发现，“shutdown”默认并非立即关机，需等待一分钟。若要立即关机，在“shutdown”后加“now”。此时不要回车，否则屏幕会变黑进行关机操作。</p></li><li><p>“shutdown”后还能跟其他参数。不仅可默认一分钟后关机，还能给定具体分钟数，如输入“3”，则默认三分钟后关机。同时，记得用“-c”及时取消，以免三分钟后关机。此外，“shutdown”后还可跟具体时间，如“15:28”，这相当于定义了一个定时关机操作，在十五点二十八分执行关机。若要取消，仍用“shutdown -c”。</p></li><li><p>Linux 中的关机操作功能强大且方便。为何“shutdown”默认不立即关机，而是等待一分钟？这涉及 Linux 的一个系统特性。在进行关机操作前，先要进行“sync”操作，即同步。此操作是将数据从内存同步到硬盘。</p></li><li><p>这是因为 Linux 系统为提高磁盘读写效率，对磁盘设置了读写方式，即读时预先读取，写时延迟写入。其好处是，例如打开一个文档用 Vim 编辑，执行保存操作（冒号 w），正常应将缓冲区数据写入磁盘保存文档。但在 Linux 系统架构中，若频繁将系统状态及需保存内容写入硬盘，效率不高，因硬盘读写（IO 操作）耗时，故设置缓冲区。有数据写入时，不直接刷入硬盘，等缓冲区满再统一写入，可提高硬盘写入效果。但这样也有坏处，若保存后直接关机或系统突然掉电，缓冲区未刷入硬盘的数据会丢失，存在数据安全隐患。所以，“sync”操作可将缓冲区内容立即同步到硬盘，相当于手动存盘，而等缓冲区满再写入相当于系统定时自动存盘。若要确保数据不丢，手动存盘更可靠。</p></li><li><p>对于 Linux 系统，执行“shutdown”时，即便不等一分钟直接输入“shutdown now”，也会先进行“sync”操作，将缓冲数据写入硬盘，再执行关机。</p></li><li><p>接下来看其他与关机相关的常见指令。首先是“halt”，此命令较特殊，从英文单词意思可知，其意为停止，并非真正意义上的关机，而是停机。即系统关闭 CPU 功能但不断电，内存数据得以保存，可使系统处于低水平维护状态。在虚拟机中使用“halt”，会进入黑屏并提示只能进行关机操作。</p></li><li><p>真正意义上的关机指令是“poweroff”，直接断电关机。还有“reboot”，意为重启，若服务或配置更改需重启生效，可直接输入“reboot”立即重启。</p></li><li><p>“halt”“poweroff”和“reboot”均可通过通用的“shutdown”实现。例如，“reboot”等同于“shutdown -r now”，“-r”表示重启。若“shutdown”后加“-h”（大写），相当于“halt”，即停机操作，机器关闭系统但不断电。若要实现真正意义上的关机，“shutdown”后可加“-h”（小写）或“-p”，等同于“poweroff”。</p></li><li><p>需注意，“shutdown”有众多选项。例如，加“now”表示立即执行操作，若“-r”后加“now”则立即重启，非关机。还可在选项后加时间参数，如数字表示分钟，“时:分”形式表示具体时间。</p></li><li><p>关机操作方便灵活，一些经验技巧是，若要确保万无一失，关机前先进行“sync”操作，再执行“poweroff”或“shutdown now”，更为保险。</p></li><li><p>以下是一些案例实操：“sync”将内存数据同步到硬盘；“reboot”立即重启；“halt”立即停机；“shutdown -h 1”表示一分钟后关机（注意是小写 h，大写 h 是停机）；“shutdown -h now”立即关机，等同于“poweroff”；“shutdown -r now”立即重启，等同于“reboot”。</p></li><li><p>以上是 Linux 系统中关于关机重启的所有命令的使用。</p></li></ul>',11);function f(v,k){const i=r("router-link");return a(),o("div",null,[d,h,c(" more "),w,e("nav",m,[e("ul",null,[e("li",null,[n(i,{to:"#概述框架"},{default:l(()=>[t("概述框架")]),_:1})]),e("li",null,[n(i,{to:"#f-第6章系统管理-1"},{default:l(()=>[t("F-第6章系统管理")]),_:1})]),e("li",null,[n(i,{to:"#一、linux-系统管理-服务管理"},{default:l(()=>[t("一、Linux 系统管理 - 服务管理")]),_:1})]),e("li",null,[n(i,{to:"#二、linux-系统服务管理与运行级别"},{default:l(()=>[t("二、Linux 系统服务管理与运行级别")]),_:1})]),e("li",null,[n(i,{to:"#三、linux-系统服务开机自启动配置"},{default:l(()=>[t("三、Linux 系统服务开机自启动配置")]),_:1})]),e("li",null,[n(i,{to:"#四、linux-系统关机重启命令"},{default:l(()=>[t("四、Linux 系统关机重启命令")]),_:1})])])]),x])}const y=s(u,[["render",f],["__file","F-第6章系统管理.html.vue"]]);export{y as default};
