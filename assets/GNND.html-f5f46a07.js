import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,e as p,f as t}from"./app-2a2d189a.js";const i="/assets/image-20240918003223131-67ce3f6a.png",u="/assets/image-20240918012104969-018f5a09.png",k="/assets/image-20240918003223131-67ce3f6a.png",r="/assets/image-20240918005814980-ec962264.png",d="/assets/image-20240918005814980-ec962264.png",v={},m={id:"main-cu",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#main-cu","aria-hidden":"true"},"#",-1),b={href:"http://main.cu",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>先整 	<span class="token function">TestCUDANNDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


InitRandomKNNGraph
	InitKNNGraphIndexKernel
	InitKNNGraphDistanceKernel
	SortEachBlockKernel
PrepareForUpdate
	PrepareGraph
	PrepareReverseGraph
	ShrinkGraph
UpdateGraph
	NewNeighborsCompareKernel
	TiledNewOldNeighborsCompareKernel
	
MergeBlocksInNNLists
	MergeBlocksKernel
	MergeList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> main</h3><ul><li>先设置 DEVICE_ID</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> DEVICE_ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">cudaSetDevice</span><span class="token punctuation">(</span>DEVICE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// UnitTest();</span>
  <span class="token comment">// TestKNNAlgorithm();</span>
  <span class="token function">TestCUDANNDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// TestDataManager();</span>
  <span class="token comment">// cerr &lt;&lt; xorshift64star(2434485) % 3333333 &lt;&lt; endl;</span>
  <span class="token comment">// TestConstructLargeKNNGraph();</span>
  <span class="token comment">// TestEvaluator();</span>
  <span class="token comment">// TxtToIVecs();</span>
  <span class="token comment">// TestFileTools();</span>
  <span class="token comment">// IvecsTxtToIVecs();</span>
  <span class="token comment">// TestMemoryManager();</span>


  <span class="token comment">// TestCUDAMerge();</span>
  <span class="token comment">// TestTiledDistanceCompare();</span>
  <span class="token comment">// TestCUDADistance();</span>
  <span class="token comment">// TestCUDASearch();</span>
  <span class="token comment">// TestCUDANewSearch();</span>
  <span class="token comment">// TestCUDAPriorityQueue();</span>
  <span class="token comment">// GetRGraph();</span>
  <span class="token comment">// CheckKNNGraph();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testcudanndescent" tabindex="-1"><a class="header-anchor" href="#testcudanndescent" aria-hidden="true">#</a> TestCUDANNDescent</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token keyword">void</span> <span class="token function">TestCUDANNDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//这里的 k 是 设置什么呢？？？好像是没有用</span>
  <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> 
  <span class="token comment">/// bzhang add 9.10</span>
  string base_path <span class="token operator">=</span> <span class="token string">&quot;/home/bzhang/data/gpu_data/deep/deeptop1m.fvecs&quot;</span><span class="token punctuation">;</span>
  string out_path <span class="token operator">=</span> <span class="token string">&quot;/home/bzhang/data/gpu_data/deep/deep10m_K64_W.ivecs&quot;</span><span class="token punctuation">;</span>
  string ground_truth_path <span class="token operator">=</span> <span class="token string">&quot;/home/bzhang/data/gpu_data/deep/deeptop1m_K200_KNNG.ivecs&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">auto</span> out <span class="token operator">=</span> <span class="token function">ofstream</span><span class="token punctuation">(</span>out_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Output file is not opened!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    
    <span class="token comment">// 最原始的向量申请 指针；CPU端的</span>
  <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">;</span>
  <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span> vecs_dim<span class="token punctuation">;</span>
  <span class="token comment">// FileTool::ReadTxtVecs(vectors, vecs_size, vecs_dim, base_path);</span>
  <span class="token class-name">FileTool</span><span class="token double-colon punctuation">::</span><span class="token function">ReadBinaryVecs</span><span class="token punctuation">(</span>base_path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vectors<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vecs_size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vecs_dim<span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;here&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
    
    
    
  <span class="token comment">// 调用 gpuknn命名空间里面的NNDescent 获得 knn_graph</span>
  <span class="token keyword">auto</span> knn_graph <span class="token operator">=</span> gpuknn<span class="token double-colon punctuation">::</span><span class="token function">NNDescent</span><span class="token punctuation">(</span>vectors<span class="token punctuation">,</span> vecs_size<span class="token punctuation">,</span> vecs_dim<span class="token punctuation">,</span> NND_ITERATION<span class="token punctuation">)</span><span class="token punctuation">;</span>

    
   <span class="token comment">//获得之后再将之转化为 指针的形式，觉得应该是 函数没办法返回指针？？？然后对指针进行写出</span>
    <span class="token comment">// 指针一定要使用free进行释放；</span>
  NNDElement <span class="token operator">*</span>result_graph <span class="token operator">=</span>
      <span class="token keyword">new</span> NNDElement<span class="token punctuation">[</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>knn_graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> knn_graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> knn_graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> knn_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result_graph<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> knn_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">FileTool</span><span class="token double-colon punctuation">::</span><span class="token function">WriteBinaryVecs</span><span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> result_graph<span class="token punctuation">,</span> knn_graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            knn_graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    
    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>knn_graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Top1: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">Evaluate</span><span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> ground_truth_path<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Top10: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">Evaluate</span><span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> ground_truth_path<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Top1: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">EvaluateHead</span><span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> ground_truth_path<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Top10: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">EvaluateHead</span><span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> ground_truth_path<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
    
    <span class="token comment">// 对于任何指针的 申请 都要进行 空间的释放；</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result_graph<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vectors<span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nndescent-cuh" tabindex="-1"><a class="header-anchor" href="#nndescent-cuh" aria-hidden="true">#</a> nndescent.cuh</h2><ul><li>这里主要是 提前 声明了 实现的nndescent的 变量 和 一些 函数；</li><li>主要是 提前定义的一些变量东西；</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">XMUKNN_NNDESCENT_CUH</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XMUKNN_NNDESCENT_CUH</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../xmuknn.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../tools/nndescent_element.cuh&quot;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> xmuknn<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LARGE_INT</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> VEC_DIM <span class="token operator">=</span> <span class="token number">96</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> NEIGHB_NUM_PER_LIST <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> SAMPLE_NUM <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token comment">// assert(SAMPLE_NUM * 2 &lt;= NEIGHB_NUM_PER_LIST);</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> NND_ITERATION <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MERGE_SAMPLE_NUM <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MERGE_ITERATION <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> JMERGE_ITERATION <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> MAX_DIM <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span> <span class="token comment">// 96 120 160 192 240 320 480 960</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAX_SKEW_DIM <span class="token operator">=</span> MAX_DIM <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> WARP_SIZE <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> NEIGHB_BLOCKS_NUM <span class="token operator">=</span>
    NEIGHB_NUM_PER_LIST <span class="token operator">/</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token punctuation">(</span>NEIGHB_NUM_PER_LIST <span class="token operator">%</span> <span class="token number">32</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// const int INSERT_IT_NUM =</span>
<span class="token comment">//     NEIGHB_NUM_PER_LIST / 32 + (NEIGHB_NUM_PER_LIST % 32 != 0);</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> NEIGHB_CACHE_NUM <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> TILE_WIDTH <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> SKEW_TILE_WIDTH <span class="token operator">=</span> TILE_WIDTH <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> SKEW_DIM <span class="token operator">=</span> VEC_DIM <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> LAST_HALF_NEIGHB_NUM <span class="token operator">=</span> NEIGHB_NUM_PER_LIST <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> FIRST_HALF_NEIGHB_NUM <span class="token operator">=</span>
    NEIGHB_NUM_PER_LIST <span class="token operator">-</span> NEIGHB_NUM_PER_LIST <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
__global__ <span class="token keyword">void</span> <span class="token function">MarkAllToOld</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">InitRandomKNNGraph</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span>
                        <span class="token keyword">bool</span> start_from_random_index <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                        <span class="token keyword">bool</span> using_thrust_random <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> gpuknn <span class="token punctuation">{</span>
<span class="token keyword">void</span> <span class="token function">NNDescentForMerge</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knngraph_result_dev_ptr<span class="token punctuation">,</span>
                       <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span>
                       <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_dim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> split_pos<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> iteration <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">NNDescent</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span><span class="token operator">*</span>knngraph_result_ptr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span>
               <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_dim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> iteration <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
               <span class="token keyword">const</span> <span class="token keyword">bool</span> store_result_in_device <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>NNDElement<span class="token operator">&gt;&gt;</span> <span class="token function">NNDescent</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_dim<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> iteration <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">NNDescentRefine</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knngraph_result_dev_ptr<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_dim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> iteration <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  <span class="token comment">// namespace gpuknn</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),h={id:"nndescent-cu",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#nndescent-cu","aria-hidden":"true"},"#",-1),y={href:"http://nndescent.cu",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="vector-vector-nndelement-nndescent" tabindex="-1"><a class="header-anchor" href="#vector-vector-nndelement-nndescent" aria-hidden="true">#</a> vector&lt;vector&lt; NNDElement &gt;&gt; NNDescent</h3><ul><li>将 原始向量和传入</li><li>返回的是 vector&lt;vector&lt; &gt;&gt;;</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>NNDElement<span class="token operator">&gt;&gt;</span> <span class="token function">NNDescent</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_dim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> iteration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// NEIGHB_NUM_PER_LIST是提前设置好的在nndescent.cuh 里面；</span>
  <span class="token keyword">int</span> k <span class="token operator">=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
  <span class="token keyword">auto</span> cuda_status <span class="token operator">=</span> <span class="token function">cudaSetDevice</span><span class="token punctuation">(</span>DEVICE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    
    
  <span class="token comment">/// 将vectors 传输到 device</span>
  <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vectors_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>vecs_size <span class="token operator">*</span> vecs_dim <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>vectors_dev<span class="token punctuation">,</span> vectors<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>vecs_size <span class="token operator">*</span> vecs_dim <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    
   <span class="token comment">// 申请 保存knng的指针， 并且是device的；</span>
  NNDElement <span class="token operator">*</span>knn_graph_dev<span class="token punctuation">;</span>

    
  Timer nnd_timer<span class="token punctuation">;</span>
  nnd_timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 调用NNDescent函数，且传输了 device的 保存图的位置 和 原始向量 以及 其它参数</span>
  <span class="token function">NNDescent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>knn_graph_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> vecs_size<span class="token punctuation">,</span> vecs_dim<span class="token punctuation">,</span> iteration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
  <span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GPU NNDescent costs: &quot;</span> <span class="token operator">&lt;&lt;</span> nnd_timer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>NNDElement<span class="token operator">&gt;&gt;</span> g<span class="token punctuation">;</span>
  <span class="token function">ToHostKNNGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g<span class="token punctuation">,</span> knn_graph_dev<span class="token punctuation">,</span> vecs_size<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.6 / 6.6</span>
    
    
    <span class="token comment">/// 释放的话 还是 释放指针；</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>vectors_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>knn_graph_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> g<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void-nndescent" tabindex="-1"><a class="header-anchor" href="#void-nndescent" aria-hidden="true">#</a> void NNDescent</h3><ul><li>进行 NNDescent了；</li><li>graph_new_dev： graph_size * (SAMPLE_NUM * 2) 在device存储的 new的采样数量包括 正向和反向</li><li>newg_list_size_dev：graph_size 一个int的来 表示 new的 正向的有多少个了</li><li>graph_old_dev： graph_size * (SAMPLE_NUM * 2)在device存储的 old的采样数量包括 正向和反向</li><li>oldg_list_size_dev ：graph_size 一个int的来 表示 old的 正向的有多少个了</li><li>newg_revlist_size_dev：graph_size 一个int的来 表示 new的 反向 的有多少个了</li><li>oldg_revlist_size_dev：graph_size 一个int的来 表示 old的 反向的有多少个了</li><li>knngraph_result：最终的graph结果；graph_size * k</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token function">NNDescent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>knn_graph_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> vecs_size<span class="token punctuation">,</span> vecs_dim<span class="token punctuation">,</span> iteration<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token keyword">void</span> <span class="token function">NNDescent</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span><span class="token operator">*</span>knngraph_result_ptr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span>
               <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecs_dim<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> iteration<span class="token punctuation">,</span>
               <span class="token keyword">const</span> <span class="token keyword">bool</span> store_result_in_device<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">/// 先进行 要在device的 变量 的 声明 和 定义；</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>graph_new_dev<span class="token punctuation">,</span> <span class="token operator">*</span>newg_list_size_dev<span class="token punctuation">,</span> <span class="token operator">*</span>graph_old_dev<span class="token punctuation">,</span> <span class="token operator">*</span>oldg_list_size_dev<span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>newg_revlist_size_dev<span class="token punctuation">,</span> <span class="token operator">*</span>oldg_revlist_size_dev<span class="token punctuation">;</span>
  <span class="token keyword">int</span> graph_size <span class="token operator">=</span> vecs_size<span class="token punctuation">;</span>
  NNDElement <span class="token operator">*</span><span class="token operator">&amp;</span>knngraph_result <span class="token operator">=</span> <span class="token operator">*</span>knngraph_result_ptr<span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>graph_new_dev<span class="token punctuation">,</span>
             <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newg_list_size_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newg_revlist_size_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>graph_old_dev<span class="token punctuation">,</span>
             <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>oldg_list_size_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>oldg_revlist_size_dev<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>knngraph_result<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> k <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>NNDElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    
  <span class="token comment">// InitRandomKNNGraph(knngraph_result, graph_size, vectors_dev);</span>
  <span class="token function">InitRandomKNNGraph</span><span class="token punctuation">(</span>knngraph_result<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Init failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    
    
    
  <span class="token keyword">float</span> iteration_costs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> get_nb_graph_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> kernel_costs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> sum_start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token keyword">long</span> cmp_times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    
    
    <span class="token comment">//// 进行迭代；</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> iteration<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Start generating NBGraph.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
      
      
    <span class="token comment">// Should be removed after testing.</span>
    <span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrepareForUpdate</span><span class="token punctuation">(</span>graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span> newg_revlist_size_dev<span class="token punctuation">,</span>
                     graph_old_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span> oldg_revlist_size_dev<span class="token punctuation">,</span>
                     knngraph_result<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> tmp_time <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span>
        <span class="token number">1e6</span><span class="token punctuation">;</span>
    get_nb_graph_time <span class="token operator">+=</span> tmp_time<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GetNBGraph costs &quot;</span> <span class="token operator">&lt;&lt;</span> tmp_time <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
      
      
      
    start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> tmp_kernel_costs <span class="token operator">=</span>
        <span class="token function">UpdateGraph</span><span class="token punctuation">(</span>knngraph_result<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> graph_new_dev<span class="token punctuation">,</span>
                    newg_list_size_dev<span class="token punctuation">,</span> graph_old_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kernel_costs <span class="token operator">+=</span> tmp_kernel_costs<span class="token punctuation">;</span>
    end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> it_tmp_costs <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span>  <span class="token number">1e6</span><span class="token punctuation">;</span>
    iteration_costs <span class="token operator">+=</span> it_tmp_costs<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Kernel costs &quot;</span> <span class="token operator">&lt;&lt;</span> tmp_kernel_costs <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
      cerr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
    
    <span class="token comment">/// 合并每个block；因为插入是 分桶的；</span>
  <span class="token function">MergeBlocksInNNLists</span><span class="token punctuation">(</span>knngraph_result<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> sum_end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> sum_costs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
                        sum_end <span class="token operator">-</span> sum_start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1e6</span><span class="token punctuation">;</span>
  <span class="token comment">// sift10k in cpu should be 0.6s;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Compare times: &quot;</span> <span class="token operator">&lt;&lt;</span> cmp_times <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;FLOPS: &quot;</span> <span class="token operator">&lt;&lt;</span> cmp_times <span class="token operator">*</span> <span class="token number">128</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> kernel_costs <span class="token operator">/</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1024.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;G&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Kernel costs: &quot;</span> <span class="token operator">&lt;&lt;</span> kernel_costs <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Update costs: &quot;</span> <span class="token operator">&lt;&lt;</span> iteration_costs <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Get NB graph costs: &quot;</span> <span class="token operator">&lt;&lt;</span> get_nb_graph_time <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;All procedure costs: &quot;</span> <span class="token operator">&lt;&lt;</span> sum_costs <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
    
    <span class="token comment">///释放；</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>graph_new_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>graph_old_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">cudaFree</span><span class="token punctuation">(</span>newg_list_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>oldg_list_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>newg_revlist_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaFree</span><span class="token punctuation">(</span>oldg_revlist_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store_result_in_device<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NNDElement <span class="token operator">*</span>host_graph<span class="token punctuation">;</span>
    <span class="token function">ToHostKNNGraph</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>host_graph<span class="token punctuation">,</span> knngraph_result<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span>
                   NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cudaFree</span><span class="token punctuation">(</span>knngraph_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    knngraph_result <span class="token operator">=</span> host_graph<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void-initrandomknngraph" tabindex="-1"><a class="header-anchor" href="#void-initrandomknngraph" aria-hidden="true">#</a> void InitRandomKNNGraph</h3><ul><li>输入将 knn_graph_dev 给传进来；</li><li>以及是否使用 thrust库进行随机化；</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token keyword">void</span> <span class="token function">InitRandomKNNGraph</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span>
                        <span class="token keyword">bool</span> start_from_random_index<span class="token punctuation">,</span>
                        <span class="token keyword">bool</span> using_thrust_random<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span><span class="token function">steady_clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>start_from_random_index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>using_thrust_random<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//false</span>
      thrust<span class="token double-colon punctuation">::</span>device_vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token function">dev_random_sequence</span><span class="token punctuation">(</span>
          graph_size <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">DevRNGLongLong</span><span class="token punctuation">(</span>thrust<span class="token double-colon punctuation">::</span><span class="token function">raw_pointer_cast</span><span class="token punctuation">(</span>dev_random_sequence<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     graph_size <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span><span class="token punctuation">;</span>
      InitKNNGraphIndexKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> NEIGHB_NUM_PER_LIST<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
          knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span>
          thrust<span class="token double-colon punctuation">::</span><span class="token function">raw_pointer_cast</span><span class="token punctuation">(</span>dev_random_sequence<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/// 先调用初始化 kernel 随机生成idx</span>
      InitKNNGraphIndexKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> NEIGHB_NUM_PER_LIST<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
          knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">auto</span> cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;InitKNNGraphIndexKernel failed.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// vector&lt;vector&lt;NNDElement&gt;&gt; g(graph_size);</span>
  <span class="token comment">// #pragma omp parallel for</span>
  <span class="token comment">// for (int i = 0; i &lt; graph_size; i++) {</span>
  <span class="token comment">//   vector&lt;int&gt; exclusion = {i};</span>
  <span class="token comment">//   vector&lt;int&gt; tmp_vec;</span>
  <span class="token comment">//   xmuknn::GenerateRandomSequence(tmp_vec, NEIGHB_NUM_PER_LIST, graph_size,</span>
  <span class="token comment">//                                  exclusion);</span>
  <span class="token comment">//   for (int j = 0; j &lt; NEIGHB_NUM_PER_LIST; j++) {</span>
  <span class="token comment">//     int nb_id = tmp_vec[j];</span>
  <span class="token comment">//     g[i].emplace_back(1e10, nb_id);</span>
  <span class="token comment">//   }</span>
  <span class="token comment">// }</span>
  <span class="token comment">// ToDevKNNGraph(knn_graph_dev, g, NEIGHB_NUM_PER_LIST);</span>
    
    
    
    
    
    <span class="token comment">/// 然后就是计算距离了；</span>
  InitKNNGraphDistanceKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;InitKNNGraphDistanceKernel failed.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
    
    
    
    <span class="token comment">///然后就是排序；</span>
  SortEachBlockKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE <span class="token operator">*</span> NEIGHB_BLOCKS_NUM<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// SortKNNGraphKernel&lt;&lt;&lt;graph_size, 32&gt;&gt;&gt;(knn_graph_dev, graph_size);</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span><span class="token function">steady_clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;SortKNNGraphKernel failed.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Initiate costs: &quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span>
                <span class="token number">1e6</span>
         <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-void-initknngraphindexkernel" tabindex="-1"><a class="header-anchor" href="#global-void-initknngraphindexkernel" aria-hidden="true">#</a> <strong>global</strong> void InitKNNGraphIndexKernel</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>

      InitKNNGraphIndexKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> NEIGHB_NUM_PER_LIST<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
          knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

warp<span class="token operator">?</span><span class="token operator">?</span>

    <span class="token comment">/// 初始化，先全部设置 distance=1e10；</span>
    <span class="token comment">/// 然后 是 邻居id，  根据 pos 设随 label</span>
   
__global__ <span class="token keyword">void</span> <span class="token function">InitKNNGraphIndexKernel</span><span class="token punctuation">(</span>
    NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>random_sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST <span class="token operator">+</span> tx<span class="token punctuation">;</span>
  <span class="token keyword">int</span> block_id <span class="token operator">=</span> tx <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">;</span> <span class="token comment">//</span>

  knn_graph<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> label<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>random_sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    label <span class="token operator">=</span> <span class="token function">xorshift64star</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>graph_size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    label <span class="token operator">=</span> random_sequence<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>graph_size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>label <span class="token operator">%</span> NEIGHB_BLOCKS_NUM <span class="token operator">!=</span> block_id <span class="token operator">||</span> label <span class="token operator">==</span> list_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    label <span class="token operator">=</span> <span class="token punctuation">(</span>label <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>graph_size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  knn_graph<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

label <span class="token operator">%</span> NEIGHB_BLOCKS_NUM <span class="token operator">!=</span> block_id 这个应该没啥太大影响，然后测试下确实没啥影响；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-void-initknngraphdistancekernel" tabindex="-1"><a class="header-anchor" href="#global-void-initknngraphdistancekernel" aria-hidden="true">#</a> <strong>global</strong> void InitKNNGraphDistanceKernel</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  InitKNNGraphDistanceKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

一个warp；处理多次；
    
__global__ <span class="token keyword">void</span> <span class="token function">InitKNNGraphDistanceKernel</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span>
                                           <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">,</span>
                                           <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span>
  size_t vec_a_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> VEC_DIM<span class="token punctuation">;</span> <span class="token comment">// 本身向量的指针位置；</span>

    
    <span class="token comment">/// 这里直接 就是 一个warp处理一次 邻居id了，然后循环NEIGHB_NUM_PER_LIST次；</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>VEC_DIM<span class="token punctuation">,</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 然后根据dim看需要处理几轮；</span>
    <span class="token keyword">float</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t vec_b_pos <span class="token operator">=</span>
        <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>knn_graph<span class="token punctuation">[</span>list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> VEC_DIM<span class="token punctuation">;</span><span class="token comment">//邻居id的向量的指针位置；</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> vec_elem_pos <span class="token operator">=</span> j <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> tx<span class="token punctuation">;</span>
      <span class="token keyword">float</span> elem_a<span class="token punctuation">,</span> elem_b<span class="token punctuation">,</span> diff<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>vec_elem_pos <span class="token operator">&lt;</span> VEC_DIM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elem_a <span class="token operator">=</span> vectors<span class="token punctuation">[</span>vec_a_pos <span class="token operator">+</span> vec_elem_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
        elem_b <span class="token operator">=</span> vectors<span class="token punctuation">[</span>vec_b_pos <span class="token operator">+</span> vec_elem_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
        diff <span class="token operator">=</span> elem_a <span class="token operator">-</span> elem_b<span class="token punctuation">;</span>
        diff <span class="token operator">*=</span> diff<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
        <span class="token comment">/// 这里的话，一个warp里面 每个thread 都有 一个 sum变量的；</span>
        <span class="token comment">/// 我们需要 第一个 lane_id = 0的sum；</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> WARP_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>
        diff <span class="token operator">=</span> diff <span class="token operator">+</span> <span class="token function">__shfl_down_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">///每个线程的变量diff将包含最初分布在warp中的所有diff值的总和？</span>
        <span class="token comment">/// 从更高索引线程获取的 diff 值相加，并将结果存储回当前线程的 diff。</span>
      sum <span class="token operator">+=</span> diff<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      knn_graph<span class="token punctuation">[</span>list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cuda-shfl-down-sync" tabindex="-1"><a class="header-anchor" href="#cuda-shfl-down-sync" aria-hidden="true">#</a> CUDA __shfl_down_sync</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>        <span class="token comment">/// 这里的话，一个warp里面 每个thread 都有 一个 sum变量的；</span>
        <span class="token comment">/// 我们需要 第一个 lane_id = 0的sum；</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> WARP_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>
        diff <span class="token operator">=</span> diff <span class="token operator">+</span> <span class="token function">__shfl_down_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">///每个线程的变量diff将包含最初分布在warp中的所有diff值的总和？</span>
        <span class="token comment">/// 从更高索引线程获取的 diff 值相加，并将结果存储回当前线程的 diff。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-void-sorteachblockkernel" tabindex="-1"><a class="header-anchor" href="#global-void-sorteachblockkernel" aria-hidden="true">#</a> <strong>global</strong> void SortEachBlockKernel</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
  SortEachBlockKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE <span class="token operator">*</span> NEIGHB_BLOCKS_NUM<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>


NEIGHB_BLOCKS_NUM <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span> 不是 KNN的K；
<span class="token keyword">const</span> <span class="token keyword">int</span> NEIGHB_BLOCKS_NUM <span class="token operator">=</span> NEIGHB_NUM_PER_LIST <span class="token operator">/</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token punctuation">(</span>NEIGHB_NUM_PER_LIST <span class="token operator">%</span> <span class="token number">32</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 所以还是 K那么大的线程数量每个block；</span>
__global__ <span class="token keyword">void</span> <span class="token function">SortEachBlockKernel</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span>
                                    <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> global_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> tx <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span>
  <span class="token keyword">int</span> block_id <span class="token operator">=</span> tx <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">;</span>

  NNDElement elem<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> block_id <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elem <span class="token operator">=</span> knn_graph<span class="token punctuation">[</span>global_base_pos <span class="token operator">+</span> pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    elem<span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span><span class="token function">SetLabel</span><span class="token punctuation">(</span>LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">BitonicSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>elem<span class="token punctuation">,</span> lane_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    knn_graph<span class="token punctuation">[</span>global_base_pos <span class="token operator">+</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bitonicsort" tabindex="-1"><a class="header-anchor" href="#bitonicsort" aria-hidden="true">#</a> BitonicSort()</h3><ul><li>warp内排序专用了基本是；</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
__device__ __forceinline__ NNDElement <span class="token function">XorSwap</span><span class="token punctuation">(</span>NNDElement x<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  NNDElement y<span class="token punctuation">;</span>
  y<span class="token punctuation">.</span>distance_ <span class="token operator">=</span> <span class="token function">__shfl_xor_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> x<span class="token punctuation">.</span>distance_<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  y<span class="token punctuation">.</span>label_ <span class="token operator">=</span> <span class="token function">__shfl_xor_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> x<span class="token punctuation">.</span>label_<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">==</span> dir <span class="token operator">?</span> y <span class="token operator">:</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__device__ __forceinline__ <span class="token keyword">int</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> y<span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token function">__shfl_xor_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> x<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">==</span> dir <span class="token operator">?</span> y <span class="token operator">:</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

__device__ __forceinline__ uint <span class="token function">Bfe</span><span class="token punctuation">(</span>uint lane_id<span class="token punctuation">,</span> uint pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  uint res<span class="token punctuation">;</span>
  <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;bfe.u32 %0,%1,%2,%3;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;=r&quot;</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
__device__ __forceinline__ <span class="token keyword">void</span> <span class="token function">BitonicSort</span><span class="token punctuation">(</span>T <span class="token operator">*</span>sort_element_ptr<span class="token punctuation">,</span>
                                            <span class="token keyword">const</span> <span class="token keyword">int</span> lane_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">auto</span> <span class="token operator">&amp;</span>sort_elem <span class="token operator">=</span> <span class="token operator">*</span>sort_element_ptr<span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sort_elem <span class="token operator">=</span> <span class="token function">XorSwap</span><span class="token punctuation">(</span>sort_elem<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token function">Bfe</span><span class="token punctuation">(</span>lane_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prepareforupdate" tabindex="-1"><a class="header-anchor" href="#prepareforupdate" aria-hidden="true">#</a> PrepareForUpdate</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token keyword">void</span> <span class="token function">PrepareForUpdate</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>graph_new_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>newg_list_size_dev<span class="token punctuation">,</span>
                      <span class="token keyword">int</span> <span class="token operator">*</span>newg_revlist_size_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>graph_old_dev<span class="token punctuation">,</span>
                      <span class="token keyword">int</span> <span class="token operator">*</span>oldg_list_size_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>oldg_revlist_size_dev<span class="token punctuation">,</span>
                      NNDElement <span class="token operator">*</span>knn_graph_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemset</span><span class="token punctuation">(</span>newg_list_size_dev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemset</span><span class="token punctuation">(</span>oldg_list_size_dev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemset</span><span class="token punctuation">(</span>newg_revlist_size_dev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemset</span><span class="token punctuation">(</span>oldg_revlist_size_dev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>graph_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">///采样正向的；</span>
  PrepareGraph<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span>
                                          graph_old_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span>
                                          knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Prepare kernel failed.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
    
    
    <span class="token comment">///采样反向的；</span>
  PrepareReverseGraph<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span> newg_revlist_size_dev<span class="token punctuation">,</span> graph_old_dev<span class="token punctuation">,</span>
      oldg_list_size_dev<span class="token punctuation">,</span> oldg_revlist_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;PrepareReverseGraph kernel failed.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
    
    <span class="token comment">///去重复和 合并吗？？</span>
  ShrinkGraph<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span> newg_revlist_size_dev<span class="token punctuation">,</span> graph_old_dev<span class="token punctuation">,</span>
      oldg_list_size_dev<span class="token punctuation">,</span> oldg_revlist_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ShrinkGraph kernel failed.&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Prepare kernel costs: &quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span>
                <span class="token number">1e6</span>
         <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="采样部分也是分桶进行的" tabindex="-1"><a class="header-anchor" href="#采样部分也是分桶进行的" aria-hidden="true">#</a> 采样部分也是分桶进行的？</h3><h3 id="preparegraph" tabindex="-1"><a class="header-anchor" href="#preparegraph" aria-hidden="true">#</a> PrepareGraph</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  PrepareGraph<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span>
                                          graph_old_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span>
                                          knn_graph_dev<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 这次采样的 是 forward；</span>
<span class="token comment">// 先整到 cache里面，然后再从cache里面整到 全局global里面；</span>
__global__ <span class="token keyword">void</span> <span class="token function">PrepareGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>graph_new_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>newg_list_size_dev<span class="token punctuation">,</span>
                             <span class="token keyword">int</span> <span class="token operator">*</span>graph_old_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>oldg_list_size_dev<span class="token punctuation">,</span>
                             NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/// h还是使用cache进行暂存了；</span>
  __shared__ <span class="token keyword">int</span> new_elements_cache<span class="token punctuation">[</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> cache1_size<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> old_elements_cache<span class="token punctuation">[</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> cache2_size<span class="token punctuation">;</span>
  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  size_t knng_base_pos <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
  size_t nn_list_base_pos <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache1_size <span class="token operator">=</span> cache2_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> nth <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
      <span class="token comment">/// maybe 下面这个仅仅是为了防止 命令行输入的K的大小不为32倍数的时候？？？</span>
    <span class="token keyword">int</span> local_pos <span class="token operator">=</span>
        nth <span class="token operator">%</span> NEIGHB_BLOCKS_NUM <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> nth <span class="token operator">/</span> NEIGHB_BLOCKS_NUM<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      NNDElement elem <span class="token operator">=</span> knn_graph<span class="token punctuation">[</span>knng_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span><span class="token function">IsNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">atomicAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache1_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        new_elements_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">atomicAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache2_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        old_elements_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache1_size <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cache1_size<span class="token punctuation">,</span> SAMPLE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cache2_size <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cache2_size<span class="token punctuation">,</span> SAMPLE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span> <span class="token operator">=</span> cache1_size<span class="token punctuation">;</span>
    oldg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span> <span class="token operator">=</span> cache2_size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>SAMPLE_NUM<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> local_pos <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> cache1_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      graph_new_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span> <span class="token operator">=</span>
          new_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> cache2_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      graph_old_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span> <span class="token operator">=</span>
          old_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="preparereversegraph" tabindex="-1"><a class="header-anchor" href="#preparereversegraph" aria-hidden="true">#</a> PrepareReverseGraph</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  PrepareReverseGraph<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span> newg_revlist_size_dev<span class="token punctuation">,</span> graph_old_dev<span class="token punctuation">,</span>
      oldg_list_size_dev<span class="token punctuation">,</span> oldg_revlist_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">// 先从前面获取的正向 整到cache里面；</span>
<span class="token comment">// 然后就是因为 存储的采样的大小是64；那么前32个位置是存放前向的，所以反向是从32开始的；</span>
<span class="token comment">// 所以后续需要进行shrink</span>
__global__ <span class="token keyword">void</span> <span class="token function">PrepareReverseGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>graph_new_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>newg_list_size_dev<span class="token punctuation">,</span>
                                    <span class="token keyword">int</span> <span class="token operator">*</span>newg_revlist_size_dev<span class="token punctuation">,</span>
                                    <span class="token keyword">int</span> <span class="token operator">*</span>graph_old_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>oldg_list_size_dev<span class="token punctuation">,</span>
                                    <span class="token keyword">int</span> <span class="token operator">*</span>oldg_revlist_size_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  __shared__ <span class="token keyword">int</span> new_elements_cache<span class="token punctuation">[</span>SAMPLE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> cache1_size<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> old_elements_cache<span class="token punctuation">[</span>SAMPLE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> cache2_size<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  size_t knng_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
  size_t nn_list_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache1_size <span class="token operator">=</span> newg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cache2_size <span class="token operator">=</span> oldg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>SAMPLE_NUM<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> local_pos <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> cache1_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      new_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span> <span class="token operator">=</span>
          graph_new_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> cache2_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      old_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span> <span class="token operator">=</span>
          graph_old_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 上面传递到了cache里面；</span>
  it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>SAMPLE_NUM<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> local_pos <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
      <span class="token comment">/// 先处理new的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> cache1_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      size_t rev_list_id <span class="token operator">=</span> new_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> SAMPLE_NUM<span class="token punctuation">;</span><span class="token comment">// 但是这里的话前面的正向的不一定达到了32个；</span>
      pos <span class="token operator">+=</span> <span class="token function">atomicAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newg_revlist_size_dev<span class="token punctuation">[</span>rev_list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// printf(&quot;%d %d %d\\n&quot;, pos, rev_list_id, list_id);</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">atomicExch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newg_revlist_size_dev<span class="token punctuation">[</span>rev_list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> SAMPLE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        graph_new_dev<span class="token punctuation">[</span>rev_list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> list_id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      <span class="token comment">//再处理 old的；</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> cache2_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      size_t rev_list_id <span class="token operator">=</span> old_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> SAMPLE_NUM<span class="token punctuation">;</span>
      pos <span class="token operator">+=</span> <span class="token function">atomicAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>oldg_revlist_size_dev<span class="token punctuation">[</span>rev_list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">atomicExch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>oldg_revlist_size_dev<span class="token punctuation">[</span>rev_list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> SAMPLE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        graph_old_dev<span class="token punctuation">[</span>rev_list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> list_id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shrinkgraph" tabindex="-1"><a class="header-anchor" href="#shrinkgraph" aria-hidden="true">#</a> ShrinkGraph</h3><ul><li>所以这个是 排序+去重复？？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  ShrinkGraph<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      graph_new_dev<span class="token punctuation">,</span> newg_list_size_dev<span class="token punctuation">,</span> newg_revlist_size_dev<span class="token punctuation">,</span> graph_old_dev<span class="token punctuation">,</span>
      oldg_list_size_dev<span class="token punctuation">,</span> oldg_revlist_size_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>




__global__ <span class="token keyword">void</span> <span class="token function">ShrinkGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>graph_new_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>newg_list_size_dev<span class="token punctuation">,</span>
                            <span class="token keyword">int</span> <span class="token operator">*</span>newg_revlist_size_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>graph_old_dev<span class="token punctuation">,</span>
                            <span class="token keyword">int</span> <span class="token operator">*</span>oldg_list_size_dev<span class="token punctuation">,</span>
                            <span class="token keyword">int</span> <span class="token operator">*</span>oldg_revlist_size_dev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  __shared__ <span class="token keyword">int</span> new_elements_cache<span class="token punctuation">[</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> newg_list_size<span class="token punctuation">,</span> newg_revlist_size<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> old_elements_cache<span class="token punctuation">[</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> oldg_list_size<span class="token punctuation">,</span> oldg_revlist_size<span class="token punctuation">;</span>
    
  __shared__ <span class="token keyword">int</span> sorted_elements_cache<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> merged_list_cache<span class="token punctuation">[</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  size_t nn_list_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> tx <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span> <span class="token comment">// 一个warp</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newg_list_size <span class="token operator">=</span> newg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
    oldg_list_size <span class="token operator">=</span> oldg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
    newg_revlist_size <span class="token operator">=</span> newg_revlist_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
    oldg_revlist_size <span class="token operator">=</span> oldg_revlist_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/// 这个的意思 是 一个thread处理一个 采样的邻居id了；</span>
  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> list_new_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> list_old_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> local_pos <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span> <span class="token comment">//要处理的采样的邻居pos</span>

    <span class="token keyword">int</span> sort_elem <span class="token operator">=</span> LARGE_INT<span class="token punctuation">;</span> <span class="token comment">// 一个warp内的每个thread都有一个变量sort_elem;</span>
      <span class="token comment">/// 然后将这个 采样的邻居数据 转到 sort_elem 如果有的话；</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> newg_list_size<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>local_pos <span class="token operator">&gt;=</span> SAMPLE_NUM <span class="token operator">&amp;&amp;</span>
         local_pos <span class="token operator">&lt;</span> SAMPLE_NUM <span class="token operator">+</span> newg_revlist_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sort_elem <span class="token operator">=</span> graph_new_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">BitonicSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sort_elem<span class="token punctuation">,</span> lane_id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在一个warp内进行elem and pos 交换；</span>
    sorted_elements_cache<span class="token punctuation">[</span>lane_id<span class="token punctuation">]</span> <span class="token operator">=</span> sort_elem<span class="token punctuation">;</span><span class="token comment">//目前sorted_elements_cache里面的是排好序的；根据idx</span>
      
      <span class="token comment">// merged_list_cache 并且是暂存在了这里； 即 将 new_elements_cache + sorted_elements_cache按idx顺序合并；</span>
      <span class="token comment">// 此时的 list_new_size =0；</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这里是去掉 LARGE_INT 的情况；</span>
      list_new_size <span class="token operator">=</span> <span class="token function">MergeListWithoutLargeInt</span><span class="token punctuation">(</span>
          new_elements_cache<span class="token punctuation">,</span> list_new_size<span class="token punctuation">,</span> sorted_elements_cache<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">,</span>
          merged_list_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
      <span class="token comment">/// 先warp内 进行 设置0；</span>
      <span class="token comment">/// 然后再 从merged_list_cache转到 new_elements_cache</span>
      <span class="token comment">/// 广播给全部</span>
    list_new_size <span class="token operator">=</span> <span class="token function">__shfl_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> list_new_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> copy_it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>list_new_size<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> copy_it_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> j <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      new_elements_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> merged_list_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token comment">//将去掉 LARGE_INT 的 数据整到cache里面；</span>

      
      <span class="token comment">/// 同样处理 old</span>
    sort_elem <span class="token operator">=</span> LARGE_INT<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> oldg_list_size<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>local_pos <span class="token operator">&gt;=</span> SAMPLE_NUM <span class="token operator">&amp;&amp;</span>
         local_pos <span class="token operator">&lt;</span> SAMPLE_NUM <span class="token operator">+</span> oldg_revlist_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sort_elem <span class="token operator">=</span> graph_old_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">BitonicSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sort_elem<span class="token punctuation">,</span> lane_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sorted_elements_cache<span class="token punctuation">[</span>lane_id<span class="token punctuation">]</span> <span class="token operator">=</span> sort_elem<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      list_old_size <span class="token operator">=</span> <span class="token function">MergeListWithoutLargeInt</span><span class="token punctuation">(</span>
          old_elements_cache<span class="token punctuation">,</span> list_old_size<span class="token punctuation">,</span> sorted_elements_cache<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">,</span>
          merged_list_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list_old_size <span class="token operator">=</span> <span class="token function">__shfl_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> list_old_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    copy_it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>list_old_size<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> copy_it_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> j <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      old_elements_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> merged_list_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 用一个 thread 进行 去重复；</span>
    <span class="token comment">/// 并且因为 new 和 old 之间有重复，即仅仅去掉其中的一个就行了；</span>
    <span class="token comment">/// 这里去掉的是new里面的；</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newg_list_size <span class="token operator">=</span> <span class="token function">RemoveDuplicates</span><span class="token punctuation">(</span>new_elements_cache<span class="token punctuation">,</span> list_new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oldg_list_size <span class="token operator">=</span> <span class="token function">RemoveDuplicates</span><span class="token punctuation">(</span>old_elements_cache<span class="token punctuation">,</span> list_old_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newg_list_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldg_list_size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>new_elements_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> old_elements_cache<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          new_elements_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newg_list_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>new_elements_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        new_elements_cache<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_elements_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    newg_list_size <span class="token operator">=</span> pos<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 将采样得到的结果 从 cahce 保存到 graph_new_dev 和 graph_old_dev 以及大小的设置；</span>
  it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> local_pos <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> newg_list_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      graph_new_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span> <span class="token operator">=</span>
          new_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> oldg_list_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      graph_old_dev<span class="token punctuation">[</span>nn_list_base_pos <span class="token operator">+</span> local_pos<span class="token punctuation">]</span> <span class="token operator">=</span>
          old_elements_cache<span class="token punctuation">[</span>local_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  newg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span> <span class="token operator">=</span> newg_list_size<span class="token punctuation">;</span>
  oldg_list_size_dev<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span> <span class="token operator">=</span> oldg_list_size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mergelistwithoutlargeint" tabindex="-1"><a class="header-anchor" href="#mergelistwithoutlargeint" aria-hidden="true">#</a> MergeListWithoutLargeInt</h3><ul><li>这个应该是合并 且 去掉 LargeInt 毕竟采样的时候可能是才不满 32 的；</li><li>用于合并两个整数数组A和B到数组C中，同时确保合并后的数组C中的元素数量不超过<code>NEIGHB_NUM_PER_LIST</code>，并且数组中的元素都小于某个预定义的常量<code>LARGE_INT</code></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
__device__ <span class="token keyword">int</span> <span class="token function">MergeListWithoutLargeInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>A<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>B<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>C<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> LARGE_INT<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> LARGE_INT<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> LARGE_INT<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> LARGE_INT<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
EXIT<span class="token operator">:</span>
  <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updategraph" tabindex="-1"><a class="header-anchor" href="#updategraph" aria-hidden="true">#</a> UpdateGraph</h3><ul><li><p>knng</p></li><li><p>g_size</p></li><li><p>vectors_dev</p></li><li><p>const int NEIGHB_BLOCKS_NUM =</p><p>NEIGHB_NUM_PER_LIST / 32 + (NEIGHB_NUM_PER_LIST % 32 != 0); 32一个锁；roundup(32);</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/// 该 new 和 old 了；</span>


    <span class="token keyword">float</span> tmp_kernel_costs <span class="token operator">=</span>
        <span class="token function">UpdateGraph</span><span class="token punctuation">(</span>knngraph_result<span class="token punctuation">,</span> graph_size<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> graph_new_dev<span class="token punctuation">,</span>
                    newg_list_size_dev<span class="token punctuation">,</span> graph_old_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 就是说，进行到这里就不分反向和正向了；</span>
<span class="token comment">// 仅仅区分 new and old</span>

<span class="token keyword">float</span> <span class="token function">UpdateGraph</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>origin_knn_graph_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t g_size<span class="token punctuation">,</span>
                  <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>newg_dev<span class="token punctuation">,</span>
                  <span class="token keyword">int</span> <span class="token operator">*</span>newg_list_size_dev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>oldg_dev<span class="token punctuation">,</span>
                  <span class="token keyword">int</span> <span class="token operator">*</span>oldg_list_size_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span>
                  <span class="token keyword">const</span> <span class="token keyword">bool</span> calc_between_new_neighbs <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">float</span> kernel_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  cudaError_t cuda_status<span class="token punctuation">;</span>

    
    
    <span class="token comment">/// 设置locks 即 差不多32个邻居id  一个 lock；分桶？yes</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>global_locks_dev<span class="token punctuation">;</span>
  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>global_locks_dev<span class="token punctuation">,</span> g_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> NEIGHB_BLOCKS_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemset</span><span class="token punctuation">(</span>global_locks_dev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> g_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> NEIGHB_BLOCKS_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Initiate failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    
  dim3 <span class="token function">block_size</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dim3 <span class="token function">grid_size</span><span class="token punctuation">(</span>g_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">const</span> <span class="token keyword">int</span> num_new_max <span class="token operator">=</span> <span class="token function">GetMaxListSize</span><span class="token punctuation">(</span>newg_list_size_dev<span class="token punctuation">,</span> g_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// cpu端的获取最大的采样new(g_size)</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> num_old_max <span class="token operator">=</span> <span class="token function">GetMaxListSize</span><span class="token punctuation">(</span>oldg_list_size_dev<span class="token punctuation">,</span> g_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// cpu端的获取最大的采样old(g_size)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Num new max: &quot;</span> <span class="token operator">&lt;&lt;</span> num_new_max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Num old max: &quot;</span> <span class="token operator">&lt;&lt;</span> num_old_max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
    
    
    <span class="token comment">/// 通过最大的num_new_max and num_old_max 设置共享内存；</span>
    <span class="token comment">/// const int SKEW_DIM = VEC_DIM + 1; 维度 +1</span>
    <span class="token comment">/// </span>
    <span class="token comment">/// 这里可以提下就是NN-expansion和NN-Descent的不同，这里是邻居相互局部链接；</span>
    <span class="token comment">/// 这个shared_mem 是为了存储 关于进行new*new的即 采样new邻居的原始数据到cache+距离存储 + new邻居idx</span>
  size_t shared_memory_size <span class="token operator">=</span>
      num_new_max <span class="token operator">*</span> SKEW_DIM <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      num_new_max <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Shmem kernel1 costs: &quot;</span> <span class="token operator">&lt;&lt;</span> shared_memory_size <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    
    
    
    <span class="token comment">/// 全部标记为old</span>
  <span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  MarkAllToOld<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>g_size<span class="token punctuation">,</span> NEIGHB_NUM_PER_LIST<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>origin_knn_graph_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    
    <span class="token comment">///(n,640);</span>
  dim3 <span class="token function">block_size</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dim3 <span class="token function">grid_size</span><span class="token punctuation">(</span>g_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    <span class="token comment">/// 处理 new new 进行局部链接；</span>
    <span class="token comment">/// 这里的话如果 new有5个，则有4+3+2+1=10次计算；</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>calc_between_new_neighbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>VEC_DIM <span class="token operator">&lt;</span> MAX_DIM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      shared_memory_size <span class="token operator">=</span>
        num_new_max <span class="token operator">*</span> SKEW_DIM <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        num_new_max <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      NewNeighborsCompareKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>grid_size<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span> shared_memory_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
          origin_knn_graph_dev<span class="token punctuation">,</span> global_locks_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> newg_dev<span class="token punctuation">,</span>
          newg_list_size_dev<span class="token punctuation">,</span> num_new_max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      shared_memory_size <span class="token operator">=</span>
        num_new_max <span class="token operator">*</span> MAX_SKEW_DIM <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        num_new_max <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cerr <span class="token operator">&lt;&lt;</span> shared_memory_size <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
      NewNeighborsCompareKernelForHighDim<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>grid_size<span class="token punctuation">,</span> VEC_DIM<span class="token punctuation">,</span> shared_memory_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
          origin_knn_graph_dev<span class="token punctuation">,</span> global_locks_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> newg_dev<span class="token punctuation">,</span>
          newg_list_size_dev<span class="token punctuation">,</span> num_new_max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
    
    
    
    
    
    
    
    <span class="token comment">/// 该 new 和 old 了；</span>
    <span class="token comment">// 共享内存是存了  距离和idx 好像没有原始向量？？因为不是NN-expansion而是NN-Descent</span>
  <span class="token keyword">int</span> neighb_num_max <span class="token operator">=</span> num_new_max <span class="token operator">+</span> num_old_max<span class="token punctuation">;</span>
  block_size <span class="token operator">=</span> <span class="token function">dim3</span><span class="token punctuation">(</span>TILE_WIDTH <span class="token operator">*</span> TILE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16*16</span>
  shared_memory_size <span class="token operator">=</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> num_old_max<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                       neighb_num_max <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Shmem tiled kernel2 costs: &quot;</span> <span class="token operator">&lt;&lt;</span> shared_memory_size <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  TiledNewOldNeighborsCompareKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>grid_size<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span>
                                      shared_memory_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      origin_knn_graph_dev<span class="token punctuation">,</span> global_locks_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> newg_dev<span class="token punctuation">,</span>
      newg_list_size_dev<span class="token punctuation">,</span> num_new_max<span class="token punctuation">,</span> oldg_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span>
      num_old_max<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  kernel_time <span class="token operator">=</span>
      <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span>
      <span class="token number">1e6</span><span class="token punctuation">;</span>
  cuda_status <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Kernel failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// cerr &lt;&lt; &quot;End kernel.&quot; &lt;&lt; endl;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cuda_status <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>cuda_status<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;knn_graph cudaMemcpy failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">cudaFree</span><span class="token punctuation">(</span>global_locks_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> kernel_time<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="markalltoold" tabindex="-1"><a class="header-anchor" href="#markalltoold" aria-hidden="true">#</a> MarkAllToOld</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>__global__ <span class="token keyword">void</span> <span class="token function">MarkAllToOld</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  size_t graph_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
  knn_graph<span class="token punctuation">[</span>graph_base_pos <span class="token operator">+</span> tx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">MarkOld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="newneighborscomparekernelforhighdim" tabindex="-1"><a class="header-anchor" href="#newneighborscomparekernelforhighdim" aria-hidden="true">#</a> NewNeighborsCompareKernelForHighDim</h3><h3 id="newneighborscomparekernel" tabindex="-1"><a class="header-anchor" href="#newneighborscomparekernel" aria-hidden="true">#</a> NewNeighborsCompareKernel</h3><ul><li><img src="`+i+`" alt="image-20240918003223131" tabindex="0" loading="lazy"><figcaption>image-20240918003223131</figcaption></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>      NewNeighborsCompareKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>grid_size<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span> shared_memory_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
          origin_knn_graph_dev<span class="token punctuation">,</span> global_locks_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> newg_dev<span class="token punctuation">,</span>
          newg_list_size_dev<span class="token punctuation">,</span> num_new_max<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token punctuation">(</span>g_size<span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      shared_memory_size <span class="token operator">=</span>
        num_new_max <span class="token operator">*</span> SKEW_DIM <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        num_new_max <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


__global__ <span class="token keyword">void</span> <span class="token function">NewNeighborsCompareKernel</span><span class="token punctuation">(</span>
    NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>global_locks<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>graph_new<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>size_new<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_new_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">/// 这里看的话 还是 会 先申请一下buffer；把global的传到cache；</span>
    <span class="token comment">///然后再 设置变量指向这个；</span>
    <span class="token comment">/// 先是 shared_vectors num_new_max个但是dim+1；</span>
    <span class="token comment">/// 然后是 存储的 new与new的计算的 distance</span>
    <span class="token comment">/// 最后是 neighbors 邻居new的 idx吧</span>
  <span class="token keyword">extern</span> __shared__ <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ <span class="token keyword">float</span> <span class="token operator">*</span>shared_vectors<span class="token punctuation">,</span> <span class="token operator">*</span>distances<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> <span class="token operator">*</span>neighbors<span class="token punctuation">;</span>
  __shared__ size_t gnew_base_pos<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> num_new<span class="token punctuation">;</span>

  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    shared_vectors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token punctuation">;</span>
    size_t offset <span class="token operator">=</span> num_new_max <span class="token operator">*</span> SKEW_DIM <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    distances <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>buffer <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    neighbors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>distances <span class="token operator">+</span>
                        <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    
    
  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> block_dim_x <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// 640</span>

    
    <span class="token comment">/// 获取 本身host的邻居的base_pos 和 num_new的大小；</span>
    <span class="token comment">/// 因为目前仅仅是考虑 new*new即；</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gnew_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num_new <span class="token operator">=</span> size_new<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 将本身的邻居idx 传输到 cahce：neighbors里面；</span>
    <span class="token comment">/// 第一步挪移 cahce的neighbors</span>
  <span class="token keyword">int</span> neighb_num <span class="token operator">=</span> num_new<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> neighb_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    neighbors<span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">=</span> graph_new<span class="token punctuation">[</span>gnew_base_pos <span class="token operator">+</span> tx<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 第二步挪移 cache的 cache的shared_vectors里面 有new_num * dim</span>
    <span class="token comment">/// 一个thread负责一个dim；则640 可以一次多少个元素；</span>
    <span class="token comment">/// 这个是将 邻居idx 的原始float向量挪移到 cache的shared_vectors里面；</span>
    <span class="token comment">/// num_vec_per_it 表示一个block的线程可以 处理多少个VEC_DIM；</span>
    <span class="token comment">/// 然后因为目前 一个VEC_DIM 就代表着一个邻居的idx原始数据的挪移；</span>
    <span class="token comment">/// 所以就是表达 一次可以挪移多少个邻居 idx的原始数据；</span>
    <span class="token comment">/// num_it就代表总共neighb_num 就仅仅多次循环；</span>
    <span class="token comment">/// x代表第几个邻居idx</span>
    <span class="token comment">/// y代表 其维度的 pos</span>
  <span class="token keyword">int</span> num_vec_per_it  <span class="token operator">=</span> block_dim_x <span class="token operator">/</span> VEC_DIM<span class="token punctuation">;</span>
  <span class="token keyword">int</span> num_it <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>neighb_num<span class="token punctuation">,</span> num_vec_per_it<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_it<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">*</span> num_vec_per_it <span class="token operator">+</span> tx <span class="token operator">/</span> VEC_DIM<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> neighb_num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> tx <span class="token operator">%</span> VEC_DIM<span class="token punctuation">;</span>
    size_t vec_id <span class="token operator">=</span> neighbors<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    shared_vectors<span class="token punctuation">[</span>x <span class="token operator">*</span> SKEW_DIM <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> vectors<span class="token punctuation">[</span>vec_id <span class="token operator">*</span> VEC_DIM <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
	<span class="token comment">/// 第三步：挪移到cache里面 的 distance；</span>
    <span class="token comment">/// 计算次数：n * (n-1) / 2;即邻居idx new*new 交叉计算；</span>
  <span class="token keyword">int</span> calc_num <span class="token operator">=</span> <span class="token punctuation">(</span>neighb_num <span class="token operator">*</span> <span class="token punctuation">(</span>neighb_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token comment">//这个代表了 一个thread进行一次交叉计算？</span>
    <span class="token comment">// 还真的是这样， 就是仅仅的 将计算次数平均分给了block内的线程，然后</span>
    <span class="token comment">// 每个线程负责一对的计算，然后 一个线程循环了 dim次 进行计算；</span>
  num_it <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>calc_num<span class="token punctuation">,</span> block_dim_x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_it<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//根据第no计算次数 找到应该算的idx对，然后进而定位pos的位置；</span>
    <span class="token keyword">int</span> no <span class="token operator">=</span> i <span class="token operator">*</span> block_dim_x <span class="token operator">+</span> tx<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">&gt;=</span> calc_num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token comment">/// 这个要+1是因为 no可以==0；但是计算次数的话要从1开始；</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> no <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token comment">/// 根据距离计算次数 反推出 第几个new和第几个new进行的计算；</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> neighb_num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> neighb_num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      
      <span class="token comment">/// 得到的索引位置，x y 都是-1的；</span>
    <span class="token keyword">float</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> base_x <span class="token operator">=</span> x <span class="token operator">*</span> SKEW_DIM<span class="token punctuation">;</span>
    <span class="token keyword">int</span> base_y <span class="token operator">=</span> y <span class="token operator">*</span> SKEW_DIM<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> VEC_DIM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">float</span> diff <span class="token operator">=</span> shared_vectors<span class="token punctuation">[</span>base_x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-</span> shared_vectors<span class="token punctuation">[</span>base_y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      sum <span class="token operator">+=</span> diff <span class="token operator">*</span> diff<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    distances<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    
  <span class="token comment">// num_it = GetItNum(NEIGHB_NUM_PER_LIST, NEIGHB_CACHE_NUM);</span>

    <span class="token comment">/// 从下面来看的话，(neighb_num, block_dim_x / WARP_SIZE); 先是看有多少个warp，</span>
    <span class="token comment">/// 那么就是说 处理一个 neighbor 就需要一个warp；</span>
    <span class="token comment">/// 那么num_it3次循环就解决了 全部的了；然后每次num_it3循环就 解决了 block_dim_x / WARP_SIZE那么多的neighbor；</span>
    <span class="token comment">// 从这里也可以看出来大部分都是一个warp进行处理一个事情；虽然block_dim_x不同有的时候；但是大部分都是内在都是一个warp处理</span>
    <span class="token comment">/// 就是说，如果block_dim_x 也仅仅是可能 迭代次数进行了改变而已；</span>
  <span class="token keyword">int</span> list_size <span class="token operator">=</span> NEIGHB_CACHE_NUM<span class="token punctuation">;</span>
  <span class="token keyword">int</span> num_it3 <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>neighb_num<span class="token punctuation">,</span> block_dim_x <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num_it3<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> list_id <span class="token operator">=</span> j <span class="token operator">*</span> <span class="token punctuation">(</span>block_dim_x <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">)</span> <span class="token operator">+</span> tx <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">;</span><span class="token comment">//要处理的neighbor idx 即new</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list_id <span class="token operator">&gt;=</span> neighb_num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token comment">///虽然在这里是 640threads同时进入这个函数副本；但是是一个warp一个小队；一个warp的任务是相同的；</span>
      <span class="token comment">/// 不同的warp的任务是不同的；</span>
      <span class="token comment">/// 而且每个warp小队的每个成员带回来的结果也是一样的吗？；</span>
      <span class="token comment">/// 好像不是一样的；只有thread==0的才是正常的结果，即该warp小队的队长的才是正确的结果；</span>
    NNDElement min_elem <span class="token operator">=</span>
        <span class="token function">GetMinElement</span><span class="token punctuation">(</span>neighbors<span class="token punctuation">,</span> list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> distances<span class="token punctuation">,</span> calc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">InsertToGlobalGraph</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> list_id<span class="token punctuation">,</span> neighbors<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> knn_graph<span class="token punctuation">,</span>
                        global_locks<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tilednewoldneighborscomparekernel" tabindex="-1"><a class="header-anchor" href="#tilednewoldneighborscomparekernel" aria-hidden="true">#</a> TiledNewOldNeighborsCompareKernel</h3><ul><li></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
  <span class="token keyword">int</span> neighb_num_max <span class="token operator">=</span> num_new_max <span class="token operator">+</span> num_old_max<span class="token punctuation">;</span>
  block_size <span class="token operator">=</span> <span class="token function">dim3</span><span class="token punctuation">(</span>TILE_WIDTH <span class="token operator">*</span> TILE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16*16</span>
  shared_memory_size <span class="token operator">=</span> <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> num_old_max<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                       neighb_num_max <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  TiledNewOldNeighborsCompareKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>grid_size<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span>
                                      shared_memory_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      origin_knn_graph_dev<span class="token punctuation">,</span> global_locks_dev<span class="token punctuation">,</span> vectors_dev<span class="token punctuation">,</span> newg_dev<span class="token punctuation">,</span>
      newg_list_size_dev<span class="token punctuation">,</span> num_new_max<span class="token punctuation">,</span> oldg_dev<span class="token punctuation">,</span> oldg_list_size_dev<span class="token punctuation">,</span>
      num_old_max<span class="token punctuation">)</span><span class="token punctuation">;</span>
 

<span class="token punctuation">(</span><span class="token number">1</span>M<span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

__global__ <span class="token keyword">void</span> <span class="token function">TiledNewOldNeighborsCompareKernel</span><span class="token punctuation">(</span>
    NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>global_locks<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>graph_new<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>size_new<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_new_max<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>graph_old<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>size_old<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_old_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">extern</span> __shared__ <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  __shared__ <span class="token keyword">float</span> <span class="token operator">*</span>distances<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> <span class="token operator">*</span>neighbors<span class="token punctuation">;</span>

  __shared__ size_t gnew_base_pos<span class="token punctuation">,</span> gold_base_pos<span class="token punctuation">;</span>
  __shared__ <span class="token keyword">int</span> num_new<span class="token punctuation">,</span> num_old<span class="token punctuation">;</span>

    
    
    <span class="token comment">/// 这一次没有存储 shared_vectors了，直接将全局的vectors正过来了；</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    distances <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token punctuation">;</span>
    neighbors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>distances <span class="token operator">+</span>
                        <span class="token punctuation">(</span>num_new_max <span class="token operator">*</span> num_old_max<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  size_t list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> block_dim_x <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment">// 16*16？？</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gnew_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gold_base_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>SAMPLE_NUM <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num_new <span class="token operator">=</span> size_new<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
    num_old <span class="token operator">=</span> size_old<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">int</span> neighb_num <span class="token operator">=</span> num_new <span class="token operator">+</span> num_old<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> num_new<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    neighbors<span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">=</span> graph_new<span class="token punctuation">[</span>gnew_base_pos <span class="token operator">+</span> tx<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&gt;=</span> num_new <span class="token operator">&amp;&amp;</span> tx <span class="token operator">&lt;</span> neighb_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    neighbors<span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">=</span> graph_old<span class="token punctuation">[</span>gnew_base_pos <span class="token operator">+</span> tx <span class="token operator">-</span> num_new<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">/// 上面的就是将全局的给挪移到了  cache了；</span>
    
    
    
    

  <span class="token function">GetNewOldDistancesTiled</span><span class="token punctuation">(</span>distances<span class="token punctuation">,</span> vectors<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> num_new<span class="token punctuation">,</span>
                          neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span> num_old<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    
    
    
    
    
    <span class="token comment">/// 总的计算次数；</span>
  <span class="token keyword">int</span> calc_num <span class="token operator">=</span> num_new <span class="token operator">*</span> num_old<span class="token punctuation">;</span>
  <span class="token comment">// int num_it = GetItNum(NEIGHB_NUM_PER_LIST, NEIGHB_CACHE_NUM);</span>

  <span class="token comment">// Read list to cache</span>
  <span class="token keyword">int</span> list_size <span class="token operator">=</span> NEIGHB_CACHE_NUM<span class="token punctuation">;</span>
  <span class="token keyword">int</span> num_it3 <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>neighb_num<span class="token punctuation">,</span> block_dim_x <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所以还是一个warp小队处理一个neighbor</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num_it3<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> list_id <span class="token operator">=</span> j <span class="token operator">*</span> <span class="token punctuation">(</span>block_dim_x <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">)</span> <span class="token operator">+</span> tx <span class="token operator">/</span> WARP_SIZE<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list_id <span class="token operator">&gt;=</span> neighb_num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    NNDElement <span class="token function">min_elem</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/// 因为 是new*old 并且按照矩阵存储距离的话，new的insert是横切distance矩阵，old的insert是竖切distance矩阵</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list_id <span class="token operator">&lt;</span> num_new<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span>
          <span class="token function">Min</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> <span class="token function">GetMinElement2</span><span class="token punctuation">(</span>list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span>
                                       num_old<span class="token punctuation">,</span> distances<span class="token punctuation">,</span> calc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span>
          <span class="token function">Min</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> <span class="token function">GetMinElement3</span><span class="token punctuation">(</span>list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> num_new<span class="token punctuation">,</span>
                                       neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span> num_old<span class="token punctuation">,</span> distances<span class="token punctuation">,</span>
                                       calc_num<span class="token punctuation">,</span> vectors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">InsertToGlobalGraph</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> list_id<span class="token punctuation">,</span> neighbors<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> knn_graph<span class="token punctuation">,</span>
                        global_locks<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getnewolddistancestiled" tabindex="-1"><a class="header-anchor" href="#getnewolddistancestiled" aria-hidden="true">#</a> GetNewOldDistancesTiled</h3><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>这段CUDA代码定义了一个名为 <span class="token code-snippet code keyword">\`GetNewOldDistancesTiled\`</span> 的设备函数，它用于计算两组向量之间的距离，并将结果存储在 <span class="token code-snippet code keyword">\`distances\`</span> 数组中。这个函数使用了分块(tile)的方法来组织共享内存的使用，以提高内存访问的效率。下面是对这段代码的详细解释：

<span class="token title important"><span class="token punctuation">###</span> 函数参数</span>

<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`float *distances\`</span>: 存储计算出的距离的数组。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`const float *vectors\`</span>: 包含所有向量的数组。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`const int *new_neighbors\`</span>: 包含新邻居的索引数组。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`const int num_new\`</span>: 新邻居的数量。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`const int *old_neighbors\`</span>: 包含旧邻居的索引数组。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`const int num_old\`</span>: 旧邻居的数量。

<span class="token title important"><span class="token punctuation">###</span> 共享内存定义</span>

<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`nsv\`</span>: 用于存储新邻居向量的共享内存。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`osv\`</span>: 用于存储旧邻居向量的共享内存。

<span class="token title important"><span class="token punctuation">###</span> 线程索引计算</span>

<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`tx\`</span>: 线程的全局索引。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`t_row\`</span> 和 <span class="token code-snippet code keyword">\`t_col\`</span>: 线程在分块中的行和列索引。

<span class="token title important"><span class="token punctuation">###</span> 循环和距离计算</span>

<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`row_num\`</span> 和 <span class="token code-snippet code keyword">\`col_num\`</span>: 计算需要多少行和列的分块来覆盖所有的新旧邻居。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`tiles_num\`</span>: 总共需要的分块数量。
<span class="token list punctuation">-</span> 外层循环 (<span class="token code-snippet code keyword">\`for (int i = 0; i &lt; tiles_num; i++)\`</span>): 遍历所有分块。
<span class="token list punctuation">-</span> 内层循环 (<span class="token code-snippet code keyword">\`for (int ph = 0; ph &lt; ceil(width / (float)TILE_WIDTH); ph++)\`</span>): 遍历向量的每个维度，因为向量的维度可能不是 <span class="token code-snippet code keyword">\`TILE_WIDTH\`</span> 的整数倍。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`nsv\`</span> 和 <span class="token code-snippet code keyword">\`osv\`</span> 的赋值: 根据线程的行和列以及分块的索引，从全局内存中加载新旧邻居的向量到共享内存。
<span class="token list punctuation">-</span> 距离计算: 对于每个分块，计算新旧邻居向量之间的欧几里得距离平方和。

<span class="token title important"><span class="token punctuation">###</span> 条件检查</span>

<span class="token list punctuation">-</span> 在加载向量到共享内存之前，检查索引是否在有效范围内，以避免越界访问。
<span class="token list punctuation">-</span> 如果向量中的某个维度无效（即越界），则将其值设置为一个很大的数（<span class="token code-snippet code keyword">\`1e10\`</span>），这样在计算距离时可以忽略它。

<span class="token title important"><span class="token punctuation">###</span> 同步和距离存储</span>

<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`__syncthreads()\`</span>: 在每次读取和写入共享内存后同步所有线程，确保所有线程都完成了它们的操作。
<span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`distance\`</span>: 存储当前线程计算出的距离。
<span class="token list punctuation">-</span> 最后，如果计算出的距离有效（不是初始值 <span class="token code-snippet code keyword">\`-1.0\`</span>），则将其存储到全局内存中的 <span class="token code-snippet code keyword">\`distances\`</span> 数组。

<span class="token title important"><span class="token punctuation">###</span> 注意事项</span>

<span class="token list punctuation">-</span> 这段代码假设 <span class="token code-snippet code keyword">\`vectors\`</span> 数组中的向量维度 <span class="token code-snippet code keyword">\`VEC_DIM\`</span> 大于或等于邻居的数量。
<span class="token list punctuation">-</span> 代码中有一些注释掉的调试打印语句，如果需要调试，可以取消注释。
<span class="token list punctuation">-</span> 代码中的 <span class="token code-snippet code keyword">\`ceil\`</span> 函数调用确保了即使不能被 <span class="token code-snippet code keyword">\`TILE_WIDTH\`</span> 整除的向量维度也能正确处理。

这个函数可以用于计算最近邻搜索中的新旧邻居之间的距离，是许多机器学习和数据挖掘算法中的一个常见步骤。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><img src="`+u+`" alt="image-20240918012104969" tabindex="0" loading="lazy"><figcaption>image-20240918012104969</figcaption></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token function">GetNewOldDistancesTiled</span><span class="token punctuation">(</span>distances<span class="token punctuation">,</span> vectors<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> num_new<span class="token punctuation">,</span>
                          neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span> num_old<span class="token punctuation">)</span><span class="token punctuation">;</span>




<span class="token number">16</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">/</span>

    
    

<span class="token comment">// blockDim.x = TILE_WIDTH * TILE_WIDTH;</span>
<span class="token comment">// const int TILE_WIDTH = 16;</span>
<span class="token comment">// const int SKEW_TILE_WIDTH = TILE_WIDTH + 1;</span>
    
    <span class="token comment">/// distances 是用来存储距离矩阵的，如上图；</span>
    <span class="token comment">/// vector是global的原始向量，并没有 cache</span>
    <span class="token comment">/// 通过new_neighbors 获取idxx 然后得到 gloabl的原始向量；</span>
    <span class="token comment">/// 同理 old_neighbors</span>
__device__ <span class="token keyword">void</span> <span class="token function">GetNewOldDistancesTiled</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>distances<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>new_neighbors<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> <span class="token keyword">int</span> num_new<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>old_neighbors<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> <span class="token keyword">int</span> num_old<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  __shared__ <span class="token keyword">float</span> nsv<span class="token punctuation">[</span>TILE_WIDTH<span class="token punctuation">]</span><span class="token punctuation">[</span>SKEW_TILE_WIDTH<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// New shared vectors</span>
  __shared__ <span class="token keyword">float</span> osv<span class="token punctuation">[</span>TILE_WIDTH<span class="token punctuation">]</span><span class="token punctuation">[</span>SKEW_TILE_WIDTH<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Old shared vectors</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> width <span class="token operator">=</span> VEC_DIM<span class="token punctuation">;</span>

    
    
    <span class="token comment">/// 从下面这样可以看出 一个thread负责一个dim里面的一个float；</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> t_row <span class="token operator">=</span> tx <span class="token operator">/</span> TILE_WIDTH<span class="token punctuation">;</span> <span class="token comment">//第几行?线程在分块中的行索引</span>
  <span class="token keyword">int</span> t_col <span class="token operator">=</span> tx <span class="token operator">%</span> TILE_WIDTH<span class="token punctuation">;</span> <span class="token comment">// 第几个？线程在分块中的列索引</span>
  <span class="token comment">// 上面就是经典的矩阵计算的 分布了 先 / 再 %  线程在分块中的行和列索引</span>


  <span class="token keyword">int</span> row_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> num_new <span class="token operator">/</span> TILE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> col_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> num_old <span class="token operator">/</span> TILE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> tiles_num <span class="token operator">=</span> row_num <span class="token operator">*</span> col_num<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tiles_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 因为总共有N*O次；</span>
    <span class="token keyword">float</span> distance <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> row_new <span class="token operator">=</span> i <span class="token operator">/</span> col_num <span class="token operator">*</span> TILE_WIDTH<span class="token punctuation">;</span> <span class="token comment">//处理的第几个nsv的 dim的开始</span>
    <span class="token keyword">int</span> row_old <span class="token operator">=</span> i <span class="token operator">%</span> col_num <span class="token operator">*</span> TILE_WIDTH<span class="token punctuation">;</span> <span class="token comment">// 处理的第几个osv的 dim的开始</span>
    <span class="token comment">// Assume that the dimension of vectors larger than num of neighbors.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ph <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ph <span class="token operator">&lt;</span> <span class="token function">ceil</span><span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>TILE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span> ph<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>row_new <span class="token operator">+</span> t_row <span class="token operator">&lt;</span> num_new<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ph <span class="token operator">*</span> TILE_WIDTH <span class="token operator">+</span> t_col <span class="token operator">&lt;</span> VEC_DIM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nsv<span class="token punctuation">[</span>t_row<span class="token punctuation">]</span><span class="token punctuation">[</span>t_col<span class="token punctuation">]</span> <span class="token operator">=</span>
            vectors<span class="token punctuation">[</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>new_neighbors<span class="token punctuation">[</span>row_new <span class="token operator">+</span> t_row<span class="token punctuation">]</span> <span class="token operator">*</span> VEC_DIM <span class="token operator">+</span>
                    ph <span class="token operator">*</span> TILE_WIDTH <span class="token operator">+</span> t_col<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        nsv<span class="token punctuation">[</span>t_row<span class="token punctuation">]</span><span class="token punctuation">[</span>t_col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>row_old <span class="token operator">+</span> t_col <span class="token operator">&lt;</span> num_old<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ph <span class="token operator">*</span> TILE_WIDTH <span class="token operator">+</span> t_row <span class="token operator">&lt;</span> VEC_DIM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        osv<span class="token punctuation">[</span>t_col<span class="token punctuation">]</span><span class="token punctuation">[</span>t_row<span class="token punctuation">]</span> <span class="token operator">=</span>
            vectors<span class="token punctuation">[</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>old_neighbors<span class="token punctuation">[</span>row_old <span class="token operator">+</span> t_col<span class="token punctuation">]</span> <span class="token operator">*</span> VEC_DIM <span class="token operator">+</span>
                    ph <span class="token operator">*</span> TILE_WIDTH <span class="token operator">+</span> t_row<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        osv<span class="token punctuation">[</span>t_col<span class="token punctuation">]</span><span class="token punctuation">[</span>t_row<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
        <span class="token comment">/// 迭代那么多次；</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> TILE_WIDTH<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">float</span> a <span class="token operator">=</span> nsv<span class="token punctuation">[</span>t_row<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> osv<span class="token punctuation">[</span>t_col<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">1e9</span> <span class="token operator">||</span> b <span class="token operator">&gt;</span> <span class="token number">1e9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">float</span> diff <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
          distance <span class="token operator">+=</span> diff <span class="token operator">*</span> diff<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">__syncthreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      distances<span class="token punctuation">[</span><span class="token punctuation">(</span>row_new <span class="token operator">+</span> t_row<span class="token punctuation">)</span> <span class="token operator">*</span> num_old <span class="token operator">+</span> row_old <span class="token operator">+</span> t_col<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getminelement" tabindex="-1"><a class="header-anchor" href="#getminelement" aria-hidden="true">#</a> GetMinElement</h3><ul><li>list_id //要处理的neighbor idx</li><li>这次是要 得到最近的；也就是shortcut，</li><li>也就是说要用warp处理，然后找到 计算次数里面的对应的涉及到本身的；</li><li><img src="`+k+`" alt="image-20240918003326329" tabindex="0" loading="lazy"><figcaption>image-20240918003326329</figcaption></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    NNDElement min_elem <span class="token operator">=</span>
        <span class="token function">GetMinElement</span><span class="token punctuation">(</span>neighbors<span class="token punctuation">,</span> list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> distances<span class="token punctuation">,</span> calc_num<span class="token punctuation">)</span><span class="token punctuation">;</span>


__device__ NNDElement <span class="token function">GetMinElement</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>neighbs_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> list_id<span class="token punctuation">,</span>
                                    <span class="token keyword">const</span> <span class="token keyword">int</span> list_size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>distances<span class="token punctuation">,</span>
                                    <span class="token keyword">const</span> <span class="token keyword">int</span> distances_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> head_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>list_id <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> tail_pos <span class="token operator">=</span> <span class="token punctuation">(</span>list_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> list_id <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> y_num <span class="token operator">=</span> tail_pos <span class="token operator">-</span> head_pos<span class="token punctuation">;</span> <span class="token comment">// == list_id的计算次数 如果按照 左下角矩阵那样；</span>
    

  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> tx <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span>
  NNDElement min_elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个thread都有一个这个变量；</span>

    
    <span class="token comment">/// 该new_idx 与前面的算过的距离；找到最小的；</span>
    <span class="token comment">/// 前面的计算过的 label 是neighbors cache里面的 lane_id</span>
    <span class="token comment">/// 然后再找到 之前在cache存储的计算的distance，根据list_id和计算次数找到；</span>
  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>y_num<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> it <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> it <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NNDElement elem<span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span><span class="token function">SetLabel</span><span class="token punctuation">(</span>neighbs_id<span class="token punctuation">[</span>it <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> current_pos <span class="token operator">=</span> head_pos <span class="token operator">+</span> it <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_pos <span class="token operator">&lt;</span> tail_pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elem<span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span>distances<span class="token punctuation">[</span>current_pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> WARP_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>
      elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token function">__shfl_down_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> min_elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

    <span class="token comment">/// 下面的这些应该是 别人和自己算的distance</span>
  head_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> <span class="token punctuation">(</span>list_id <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 0   2   5   9   14</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> it <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> it <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NNDElement elem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> no <span class="token operator">=</span> it <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span><span class="token function">SetLabel</span><span class="token punctuation">(</span>neighbs_id<span class="token punctuation">[</span>no <span class="token operator">+</span> list_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> current_pos <span class="token operator">=</span> head_pos <span class="token operator">+</span> no <span class="token operator">*</span> <span class="token punctuation">(</span>no <span class="token operator">+</span> list_id <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_pos <span class="token operator">&lt;</span> distances_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elem<span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span>distances<span class="token punctuation">[</span>current_pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> WARP_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>
      elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token function">__shfl_down_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> min_elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> min_elem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getminelement2" tabindex="-1"><a class="header-anchor" href="#getminelement2" aria-hidden="true">#</a> GetMinElement2</h3><ul><li><img src="`+r+`" alt="image-20240918005821976" tabindex="0" loading="lazy"><figcaption>image-20240918005821976</figcaption></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token comment">/// 因为 是new*old 并且按照矩阵存储距离的话，new的insert是横切distance矩阵，old的insert是竖切distance矩阵</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list_id <span class="token operator">&lt;</span> num_new<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span>
          <span class="token function">Min</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> <span class="token function">GetMinElement2</span><span class="token punctuation">(</span>list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span>
                                       num_old<span class="token punctuation">,</span> distances<span class="token punctuation">,</span> calc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span>
          <span class="token function">Min</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> <span class="token function">GetMinElement3</span><span class="token punctuation">(</span>list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> num_new<span class="token punctuation">,</span>
                                       neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span> num_old<span class="token punctuation">,</span> distances<span class="token punctuation">,</span>
                                       calc_num<span class="token punctuation">,</span> vectors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>




__device__ NNDElement <span class="token function">GetMinElement2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> list_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> list_size<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>old_neighbs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_old<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>distances<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> distances_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> head_pos <span class="token operator">=</span> list_id <span class="token operator">*</span> num_old<span class="token punctuation">;</span><span class="token comment">//因为是按照矩阵存储的distance_num = new_num * old_num;</span>
  <span class="token keyword">int</span> y_num <span class="token operator">=</span> num_old<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tail_pos <span class="token operator">=</span> head_pos <span class="token operator">+</span> num_old<span class="token punctuation">;</span>

  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> tx <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span><span class="token comment">// 还是一个warp处理一个new or old 这里是 new；</span>
  NNDElement min_elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>y_num<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 看看这个new 与all_old的距离计算次数 需要迭代几轮；</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> it <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> it <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NNDElement elem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> no <span class="token operator">=</span> it <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span><span class="token function">SetLabel</span><span class="token punctuation">(</span>old_neighbs<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> current_pos <span class="token operator">=</span> head_pos <span class="token operator">+</span> no<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_pos <span class="token operator">&lt;</span> tail_pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elem<span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span>distances<span class="token punctuation">[</span>current_pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> WARP_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>
      elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token function">__shfl_down_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> min_elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> min_elem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getminelement3" tabindex="-1"><a class="header-anchor" href="#getminelement3" aria-hidden="true">#</a> GetMinElement3</h3><ul><li><img src="`+d+`" alt="image-20240918005814980" tabindex="0" loading="lazy"><figcaption>image-20240918005814980</figcaption></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token comment">/// 因为 是new*old 并且按照矩阵存储距离的话，new的insert是横切distance矩阵，old的insert是竖切distance矩阵</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list_id <span class="token operator">&lt;</span> num_new<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span>
          <span class="token function">Min</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> <span class="token function">GetMinElement2</span><span class="token punctuation">(</span>list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span>
                                       num_old<span class="token punctuation">,</span> distances<span class="token punctuation">,</span> calc_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span>
          <span class="token function">Min</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> <span class="token function">GetMinElement3</span><span class="token punctuation">(</span>list_id<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> num_new<span class="token punctuation">,</span>
                                       neighbors <span class="token operator">+</span> num_new<span class="token punctuation">,</span> num_old<span class="token punctuation">,</span> distances<span class="token punctuation">,</span>
                                       calc_num<span class="token punctuation">,</span> vectors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


__device__ NNDElement <span class="token function">GetMinElement3</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> list_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> list_size<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>new_neighbs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_new<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>old_neighbs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_old<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>distances<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">int</span> distances_num<span class="token punctuation">,</span>
                                     <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>vectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> head_pos <span class="token operator">=</span> list_id <span class="token operator">-</span> num_new<span class="token punctuation">;</span> <span class="token comment">// 因为list_id 是也包括前面的num_new;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> tx <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span>
  NNDElement min_elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>num_new<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 那个old都与num_new个进行了计算；</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> it <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> it <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NNDElement elem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> no <span class="token operator">=</span> it <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span><span class="token function">SetLabel</span><span class="token punctuation">(</span>new_neighbs<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> current_pos <span class="token operator">=</span> head_pos <span class="token operator">+</span> no <span class="token operator">*</span> num_old<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_pos <span class="token operator">&lt;</span> distances_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elem<span class="token punctuation">.</span><span class="token function">SetDistance</span><span class="token punctuation">(</span>distances<span class="token punctuation">[</span>current_pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> WARP_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>
      elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token function">__shfl_down_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min_elem <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> min_elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> min_elem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inserttoglobalgraph" tabindex="-1"><a class="header-anchor" href="#inserttoglobalgraph" aria-hidden="true">#</a> InsertToGlobalGraph</h3><ul><li>也可以详细一个warp，</li><li>然后就是 min_elem 是 shortcut；</li><li>并且 一个warp小队是带回来的是一样的吗？；nono</li><li>好像并不是一样的；而仅仅是lane_id ==0的时候 是一样的；</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token function">InsertToGlobalGraph</span><span class="token punctuation">(</span>min_elem<span class="token punctuation">,</span> list_id<span class="token punctuation">,</span> neighbors<span class="token punctuation">[</span>list_id<span class="token punctuation">]</span><span class="token punctuation">,</span> knn_graph<span class="token punctuation">,</span>
                        global_locks<span class="token punctuation">)</span><span class="token punctuation">;</span>


local_id是本身其邻居的 第id个  <span class="token keyword">new</span>的 pos
    global_id 是存储其第id个idx 的 邻居是谁idx；
    全局图 和 锁；
    
    即将elem插入 global_knn_graph<span class="token punctuation">[</span>global_id<span class="token punctuation">]</span>  里面的；
    local_id 是用来、、
    
	<span class="token comment">/// 还是一个小队warp处理一个 new的</span>

__device__ <span class="token keyword">void</span> <span class="token function">InsertToGlobalGraph</span><span class="token punctuation">(</span>NNDElement elem<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> local_id<span class="token punctuation">,</span>
                                    <span class="token keyword">const</span> size_t global_id<span class="token punctuation">,</span>
                                    NNDElement <span class="token operator">*</span>global_knn_graph<span class="token punctuation">,</span>
                                    <span class="token keyword">int</span> <span class="token operator">*</span>global_locks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lane_id <span class="token operator">=</span> tx <span class="token operator">%</span> WARP_SIZE<span class="token punctuation">;</span>
  size_t global_pos_base <span class="token operator">=</span> global_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
    <span class="token comment">///这行代码将warp中第一个线程的 elem.distance_ 值传递给所有其他线程。每个线程执行这个操作后，</span>
    <span class="token comment">///它的 elem.distance_ 将与warp中第一个线程的 elem.distance_ 相同</span>
  elem<span class="token punctuation">.</span>distance_ <span class="token operator">=</span> <span class="token function">__shfl_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> elem<span class="token punctuation">.</span>distance_<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  elem<span class="token punctuation">.</span>label_ <span class="token operator">=</span> <span class="token function">__shfl_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> elem<span class="token punctuation">.</span>label_<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    
  <span class="token keyword">int</span> loop_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> block_id <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> NEIGHB_BLOCKS_NUM<span class="token punctuation">;</span><span class="token comment">//要插入的桶的位置；</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      		loop_flag <span class="token operator">=</span> <span class="token function">atomicCAS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>global_locks<span class="token punctuation">[</span>global_id <span class="token operator">*</span> NEIGHB_BLOCKS_NUM <span class="token operator">+</span> block_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    loop_flag <span class="token operator">=</span> <span class="token function">__shfl_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> loop_flag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩散到全部将0位置的数据；</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loop_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      NNDElement knn_list_frag<span class="token punctuation">;</span><span class="token comment">//存储当前位置的pos的元素；</span>
      <span class="token keyword">int</span> local_pos <span class="token operator">=</span> block_id <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
      size_t global_pos <span class="token operator">=</span> global_pos_base <span class="token operator">+</span> local_pos<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span>
        knn_list_frag <span class="token operator">=</span> global_knn_graph<span class="token punctuation">[</span>global_pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        knn_list_frag <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">,</span> LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/// 找insert的位置</span>
      <span class="token keyword">int</span> pos_to_insert <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token comment">/// 记录下前面的一个的knn_list_frag数值传过来；</span>
      NNDElement prev_elem <span class="token operator">=</span> <span class="token function">__shfl_up_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> knn_list_frag<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> prev_elem <span class="token operator">=</span> <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e10</span><span class="token punctuation">,</span> <span class="token operator">-</span>LARGE_INT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0位置的没有，要单独设置；</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>elem <span class="token operator">&gt;</span> prev_elem <span class="token operator">&amp;&amp;</span> elem <span class="token operator">&lt;</span> knn_list_frag<span class="token punctuation">)</span> <span class="token comment">// 如果大于前一个，小于目前的则插入这个位置；</span>
        pos_to_insert <span class="token operator">=</span> block_id <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>elem <span class="token operator">==</span> prev_elem <span class="token operator">||</span> elem <span class="token operator">==</span> knn_list_frag<span class="token punctuation">)</span>
        pos_to_insert <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
      uint mask <span class="token operator">=</span> <span class="token function">__ballot_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> pos_to_insert <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uint set_lane_id <span class="token operator">=</span> <span class="token function">GetNthSetBitPos</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pos_to_insert <span class="token operator">=</span> <span class="token function">__shfl_sync</span><span class="token punctuation">(</span>FULL_MASK<span class="token punctuation">,</span> pos_to_insert<span class="token punctuation">,</span> set_lane_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//广播插入的位置；</span>
        <span class="token comment">// assert(false);</span>
      <span class="token punctuation">}</span>
        
        
        <span class="token comment">/// 如果要插入的位置是有的；</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos_to_insert <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> local_pos <span class="token operator">=</span> block_id <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> lane_id<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&gt;</span> pos_to_insert<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 前面的不动，后面的位置+1</span>
          local_pos<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">==</span> pos_to_insert<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//插入的位置改变数据，以及+1</span>
          global_knn_graph<span class="token punctuation">[</span>global_pos_base <span class="token operator">+</span> local_pos<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>
          local_pos<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
          <span class="token comment">// 挪移；</span>
        size_t global_pos <span class="token operator">=</span> global_pos_base <span class="token operator">+</span> local_pos<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>local_pos <span class="token operator">&lt;</span> <span class="token punctuation">(</span>block_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> WARP_SIZE <span class="token operator">&amp;&amp;</span>
            local_pos <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span><span class="token comment">//不越界，即不越桶的界限和K的界限；</span>
          global_knn_graph<span class="token punctuation">[</span>global_pos<span class="token punctuation">]</span> <span class="token operator">=</span> knn_list_frag<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">__threadfence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loop_flag <span class="token operator">&amp;&amp;</span> lane_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">atomicExch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>global_locks<span class="token punctuation">[</span>global_id <span class="token operator">*</span> NEIGHB_BLOCKS_NUM <span class="token operator">+</span> block_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">__nanosleep</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>loop_flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mergeblocksinnnlists" tabindex="-1"><a class="header-anchor" href="#mergeblocksinnnlists" aria-hidden="true">#</a> MergeBlocksInNNLists</h3><ul><li>因为前面的insertToGlobalGraph的是 分桶的，所以需要进行合并下；</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">MergeBlocksInNNLists</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MergeBlocksKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>knn_graph<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mergeblockskernel" tabindex="-1"><a class="header-anchor" href="#mergeblockskernel" aria-hidden="true">#</a> MergeBlocksKernel</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
  MergeBlocksKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>graph_size<span class="token punctuation">,</span> WARP_SIZE<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>knn_graph<span class="token punctuation">,</span> graph_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// warp 进行处理；</span>

__global__ <span class="token keyword">void</span> <span class="token function">MergeBlocksKernel</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span>knn_graph<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> graph_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  __shared__ NNDElement c_cache<span class="token punctuation">[</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">]</span><span class="token punctuation">;</span>
  __shared__ NNDElement tmp_cache<span class="token punctuation">[</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> list_id <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> global_pos_base <span class="token operator">=</span> list_id <span class="token operator">*</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">;</span>
  <span class="token keyword">int</span> tx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> list_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  c_cache<span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">=</span> knn_graph<span class="token punctuation">[</span>global_pos_base <span class="token operator">+</span> tx<span class="token punctuation">]</span><span class="token punctuation">;</span>
  list_size <span class="token operator">=</span> WARP_SIZE<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NEIGHB_BLOCKS_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list_size <span class="token operator">=</span> <span class="token function">MergeList</span><span class="token punctuation">(</span>c_cache<span class="token punctuation">,</span> list_size<span class="token punctuation">,</span>
                          <span class="token operator">&amp;</span>knn_graph<span class="token punctuation">[</span>global_pos_base <span class="token operator">+</span> i <span class="token operator">*</span> WARP_SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span>
                          WARP_SIZE<span class="token punctuation">,</span> tmp_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>list_size<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> j <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> list_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> it_num <span class="token operator">=</span> <span class="token function">GetItNum</span><span class="token punctuation">(</span>NEIGHB_NUM_PER_LIST<span class="token punctuation">,</span> WARP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> it_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> i <span class="token operator">*</span> WARP_SIZE <span class="token operator">+</span> tx<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      knn_graph<span class="token punctuation">[</span>global_pos_base <span class="token operator">+</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> c_cache<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mergelist" tabindex="-1"><a class="header-anchor" href="#mergelist" aria-hidden="true">#</a> MergeList</h3><ul><li>它将两个列表<code>A</code>和<code>B</code>合并为一个新的列表<code>C</code>，其中<code>A</code>有<code>m</code>个元素，<code>B</code>有<code>n</code>个元素。合并后的列表<code>C</code>将按排序顺序包含来自<code>A</code>和<code>B</code>的元素，直到达到<code>NEIGHB_NUM_PER_LIST</code>定义的元素数量上限</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
__device__ <span class="token keyword">int</span> <span class="token function">MergeList</span><span class="token punctuation">(</span>T <span class="token operator">*</span>A<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> T <span class="token operator">*</span>B<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> T <span class="token operator">*</span>C<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      C<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;=</span> NEIGHB_NUM_PER_LIST<span class="token punctuation">)</span> <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
EXIT<span class="token operator">:</span>
  <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nndescent-element-cuh" tabindex="-1"><a class="header-anchor" href="#nndescent-element-cuh" aria-hidden="true">#</a> nndescent_element.cuh</h2><ul><li>主要是进行 设置 元素 的</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">XMUKNN_NNDESCENT_ELEMENT_CUH</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XMUKNN_NNDESCENT_ELEMENT_CUH</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cuda.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cuda_runtime.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EPS</span> <span class="token expression"><span class="token number">1e-6</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">NNDElement</span> <span class="token punctuation">{</span>
  <span class="token keyword">float</span> distance_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> label_<span class="token punctuation">;</span>
  __host__ __device__ <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> distance_ <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">,</span> label_ <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  __host__ __device__ <span class="token function">NNDElement</span><span class="token punctuation">(</span><span class="token keyword">float</span> distance<span class="token punctuation">,</span> <span class="token keyword">int</span> label<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_new <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">distance_</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">label_</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_new<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      label_ <span class="token operator">=</span> <span class="token operator">-</span>label <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">bool</span> <span class="token function">IsNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> label_ <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">void</span> <span class="token function">SetLabel</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> new_label<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>label_ <span class="token operator">=</span> new_label<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">void</span> <span class="token function">SetDistance</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span> new_distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>distance_ <span class="token operator">=</span> new_distance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">int</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">IsNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> label_<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>label_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">float</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> distance_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">void</span> <span class="token function">MarkOld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label_ <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
      label_ <span class="token operator">=</span> <span class="token operator">-</span>label_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>    
  __host__ __device__ <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> NNDElement<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>distance_ <span class="token operator">-</span> other<span class="token punctuation">.</span>distance_<span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> other<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>distance_ <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>distance_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> NNDElement<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> other<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>distance_ <span class="token operator">-</span> other<span class="token punctuation">.</span>distance_<span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> NNDElement<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> NNDElement<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> other<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token generic-function"><span class="token function">this</span> <span class="token generic class-name"><span class="token operator">&lt;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> NNDElement<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;=</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  __host__ __device__ <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> NNDElement<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="knncuda-tools-cu" tabindex="-1"><a class="header-anchor" href="#knncuda-tools-cu" aria-hidden="true">#</a> knncuda_tools.cu</h2><h3 id="tohostknngraph" tabindex="-1"><a class="header-anchor" href="#tohostknngraph" aria-hidden="true">#</a> ToHostKNNGraph</h3><ul><li>两个不同的传递到KNNG的方式</li><li>ToHostKNNGraph(&amp;g, knn_graph_dev, vecs_size, k); // 0.6 / 6.6</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">ToHostKNNGraph</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>NNDElement<span class="token operator">&gt;&gt;</span> <span class="token operator">*</span>origin_knn_graph_ptr<span class="token punctuation">,</span>
                    <span class="token keyword">const</span> NNDElement <span class="token operator">*</span>knn_graph_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span>
                    <span class="token keyword">const</span> <span class="token keyword">int</span> neighb_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  NNDElement <span class="token operator">*</span>knn_graph <span class="token operator">=</span> <span class="token keyword">new</span> NNDElement<span class="token punctuation">[</span>size <span class="token operator">*</span> neighb_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/// 先从设备端传过来；</span>
  <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>knn_graph<span class="token punctuation">,</span> knn_graph_dev<span class="token punctuation">,</span>
             <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>size <span class="token operator">*</span> neighb_num <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>NNDElement<span class="token punctuation">)</span><span class="token punctuation">,</span>
             cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> <span class="token operator">&amp;</span>origin_knn_graph <span class="token operator">=</span> <span class="token operator">*</span>origin_knn_graph_ptr<span class="token punctuation">;</span>
  vector<span class="token operator">&lt;</span>NNDElement<span class="token operator">&gt;</span> neighb_list<span class="token punctuation">;</span>
  origin_knn_graph <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>NNDElement<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    neighb_list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> neighb_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      neighb_list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>knn_graph<span class="token punctuation">[</span>i <span class="token operator">*</span> neighb_num <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    origin_knn_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> neighb_list<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> knn_graph<span class="token punctuation">;</span>
<span class="token punctuation">}</span>





<span class="token keyword">void</span> <span class="token function">ToHostKNNGraph</span><span class="token punctuation">(</span>NNDElement <span class="token operator">*</span><span class="token operator">*</span>host_knn_graph_ptr<span class="token punctuation">,</span>
                    <span class="token keyword">const</span> NNDElement <span class="token operator">*</span>knn_graph_dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span>
                    <span class="token keyword">const</span> <span class="token keyword">int</span> neighb_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  NNDElement <span class="token operator">*</span><span class="token operator">&amp;</span>knn_graph <span class="token operator">=</span> <span class="token operator">*</span>host_knn_graph_ptr<span class="token punctuation">;</span>
  knn_graph <span class="token operator">=</span> <span class="token keyword">new</span> NNDElement<span class="token punctuation">[</span>size <span class="token operator">*</span> neighb_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>knn_graph<span class="token punctuation">,</span> knn_graph_dev<span class="token punctuation">,</span>
             <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>size <span class="token operator">*</span> neighb_num <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>NNDElement<span class="token punctuation">)</span><span class="token punctuation">,</span>
             cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xorshift64star" tabindex="-1"><a class="header-anchor" href="#xorshift64star" aria-hidden="true">#</a> xorshift64star</h3><ul><li>生成随机数</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>__host__ __device__ <span class="token keyword">uint64_t</span> <span class="token function">xorshift64star</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">+=</span> <span class="token number">42</span><span class="token punctuation">;</span>
	x <span class="token operator">^=</span> x <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
	x <span class="token operator">^=</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
	x <span class="token operator">^=</span> x <span class="token operator">&gt;&gt;</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
	<span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">0x2545F4914F6CDD1D</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,79);function N(E,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("h2",m,[_,s(),n("a",b,[s("main.cu"),p(a)])]),w,n("h2",h,[g,s(),n("a",y,[s("nndescent.cu"),p(a)])]),f])}const S=e(v,[["render",N],["__file","GNND.html.vue"]]);export{S as default};
