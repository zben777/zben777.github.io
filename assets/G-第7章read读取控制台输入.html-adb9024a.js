import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as n,c as d,d as s,a as e,e as l,w as i,b as a,f as c}from"./app-2a2d189a.js";const _={},h=e("h1",{id:"g-第7章read读取控制台输入",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#g-第7章read读取控制台输入","aria-hidden":"true"},"#"),a(" G-第7章read读取控制台输入")],-1),p=e("p",null,"G-第7章read读取控制台输入",-1),u=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"说明"),e("p",null,"主要是各种搜索找的学习；")],-1),m={class:"table-of-contents"},f=c('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="g-第7章read读取控制台输入-1" tabindex="-1"><a class="header-anchor" href="#g-第7章read读取控制台输入-1" aria-hidden="true">#</a> G-第7章read读取控制台输入</h2><ul><li><p>接下来要介绍的是第 7 章——读取控制台的输入。对于一个编程语言而言，这一功能比较基础、简单，但又不可或缺。因为一般情况下，如果要编写程序或开发软件，往往会出现一些交互式应用。例如，有些数据并非在脚本程序运行时带着参数直接进入，而是先呈现一个界面，询问用户请输入什么样的信息，用户进行输入后，我们获取到参数，再去运行相应的程序。在此过程中，必须与用户通过 I/O 设备进行交互。</p></li><li><p>输出相对简单，之前已经讲过如何输出到标准控制台，在 Linux Shell 中直接使用“echo”即可输出。若要输出到文件，可进行输出重定向，这些之前都已了解。现在关心的是如何获取输入，最简单的方式就是直接读取控制台的输入，在控制台上与用户交互，让用户输入相应信息。</p></li><li><p>在很多其他高级语言中，都有相应的类库，比如在 Java 或 C 语言中，可能都有类似于“STDin”这样的标准控制台输入的类库。对于 Linux Shell 而言，也很简单，只有一个命令——“read”，这是 Linux Shell 内嵌的一个命令，其作用是从控制台读取当前用户的输入，后面可以跟选项和参数。</p></li><li><p>最常用的选项有两个，一个是“-p”，指的是指定读取值时的提示符。简单来说，就是在让用户进行控制台输入时，应给用户一些提示信息，告知用户到底该输入什么，相当于写一串字符串作为提示。另一个是“-t”，“-t”指的是“time”，指定读取值时等待的时间，单位是秒。若不加此参数，就一直等待，直到用户输入。若加了参数，等待足够时间后用户仍未输入，就自动退出，即超时退出。</p></li><li><p>对应的后面还需跟一个参数，即可以指定读取值的变量。因为在执行脚本时，“$1”、“$2”是跟着的未知参数，而现在要单独指定读进来的内容在脚本里的名称，所以后面跟一个变量名称。</p></li><li><p>接下来可以在代码里，在控制台创建一个脚本测试这个简单的功能。创建一个“read_test.sh”测试脚本，首先还是写上“#!/bin/bash”，然后直接进行读取，“read”，当前比如加一个“-t”参数，指定等待时间，比如等 10 秒钟，10 秒未输入就直接退出。另外加一个“-p”参数，提示输入的信息，比如“请输入您的姓名”，表示让输入一个名字。接下来，后面给一个变量名称，比如叫“name”，然后后面可以直接进行“echo”，“echo &quot;welcome &quot; $name`，这样就实现了一个交互式的输出。整体非常简单，直接保存，更改可执行权限，就可以直接运行。</p></li><li><p>当前没有脚本运行时的参数输入，直接运行，会看到“请输入您的姓名”，若输入“at 硅谷”，就会输出“welcome at 硅谷”。若一直等待不输入，等 10 秒后会直接退出，这里会直接输出“welcome”，因为没有规定不输出，所以仍会输出，但没有任何其他信息。当然，如果想做更丰富的展示，可以在里面再做一些“if else”的判断，若未输入，输出特定内容，这都是可以自定义的。这就是读取当前控制台标准输入的过程。</p></li></ul>',4);function x(b,v){const t=o("router-link");return n(),d("div",null,[h,p,s(" more "),u,e("nav",m,[e("ul",null,[e("li",null,[l(t,{to:"#概述框架"},{default:i(()=>[a("概述框架")]),_:1})]),e("li",null,[l(t,{to:"#g-第7章read读取控制台输入-1"},{default:i(()=>[a("G-第7章read读取控制台输入")]),_:1})])])]),f])}const w=r(_,[["render",x],["__file","G-第7章read读取控制台输入.html.vue"]]);export{w as default};
