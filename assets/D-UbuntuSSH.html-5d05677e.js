import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as p,d,a as e,b as s,e as n,w as i,f as t}from"./app-2a2d189a.js";const u={},h=e("h1",{id:"d-ubuntussh",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#d-ubuntussh","aria-hidden":"true"},"#"),s(" D-UbuntuSSH")],-1),m=e("p",null,"D-UbuntuSSH",-1),b={class:"hint-container info"},S=e("p",{class:"hint-container-title"},"说明",-1),v=e("li",null,"关于Ubuntu系统上的SSH一些操作；",-1),_={href:"https://blog.csdn.net/li528405176/article/details/82810342",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/pipisorry/article/details/52269785",target:"_blank",rel:"noopener noreferrer"},g={class:"table-of-contents"},f=t(`<h2 id="一、简单介绍ssh" tabindex="-1"><a class="header-anchor" href="#一、简单介绍ssh" aria-hidden="true">#</a> 一、简单介绍SSH</h2><ul><li>Secure Shell(SSH) 是由 IETF(The Internet Engineering Task Force) 制定的建立在应用层基础上的安全网络协议。它是专为远程登录会话(甚至可以用Windows远程登录Linux服务器进行文件互传)和其他网络服务提供安全性的协议，可有效弥补网络中的漏洞。通过SSH，可以把所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。目前已经成为Linux系统的标准配置。</li><li><mark>SSH只是一种协议</mark></li></ul><br><ul><li><p><mark>但并不是说SSH就是绝对安全的，因为它本身提供两种级别的验证方法：</mark></p></li><li><p>第一种级别（基于口令的安全验证）：只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人攻击”这种方式的攻击。</p></li><li><p>第二种级别（基于密钥的安全验证）：你必须为自己创建一对密钥，并把公钥放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公钥，然后把它和你发送过来的公钥进行比较。如果两个密钥一致，服务器就用公钥加密“质询”(challenge)并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私钥在本地解密再把它发送给服务器完成登录。与第一种级别相比，第二种级别不仅加密所有传输的数据，也不需要在网络上传送口令，因此安全性更高，可以有效防止中间人攻击。</p></li></ul><h3 id="_1、ssh的安装" tabindex="-1"><a class="header-anchor" href="#_1、ssh的安装" aria-hidden="true">#</a> 1、SSH的安装</h3><ul><li><p>先查看是否已经安装了SSH<br> ssh -V</p></li><li><p>SSH分为客户端 openssh-client 和服务器 openssh-server，可以利用以下命令确认电脑上是否安装了客户端和服务器。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>dpkg <span class="token operator">-</span>l <span class="token operator">|</span> grep ssh

openssh<span class="token operator">-</span>client
openssh<span class="token operator">-</span>server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果只是想远程登陆别的机器只需要安装客户端（Ubuntu默认安装了客户端），如果要开放本机的SSH服务就需要安装服务器。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>sudo apt<span class="token operator">-</span>get install openssh<span class="token operator">-</span>client 
sudo apt<span class="token operator">-</span>get install openssh<span class="token operator">-</span>server 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、启动服务器的ssh服务" tabindex="-1"><a class="header-anchor" href="#_2、启动服务器的ssh服务" aria-hidden="true">#</a> 2、启动服务器的SSH服务</h3><ul><li>首先确认ssh-server是否已经启动了</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ps <span class="token operator">-</span>e <span class="token operator">|</span> grep ssh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如图，sshd 表示ssh-server已经启动了。如果没有启动，可以使用如下命令启动：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>sudo <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>ssh start 

停止和重启ssh服务的命令如下：
sudo <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>ssh stop  #server停止ssh服务 
sudo <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>ssh restart  #server重启ssh服务

接下来就可以进行使用客户机远程登录服务器了<span class="token operator">~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、ssh两种级别的远程登录" tabindex="-1"><a class="header-anchor" href="#二、ssh两种级别的远程登录" aria-hidden="true">#</a> 二、SSH两种级别的远程登录</h2><h3 id="_1、口令登录" tabindex="-1"><a class="header-anchor" href="#_1、口令登录" aria-hidden="true">#</a> 1、口令登录</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>口令登录非常简单，只需要一条命令，命令格式为： ssh 客户端用户名@服务器ip地址  eg<span class="token operator">:</span>
ssh ben@<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span>

如果需要调用图形界面程序可以使用 <span class="token operator">-</span>X 选项
ssh <span class="token operator">-</span>X ben@<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span>

如果客户机的用户名和服务器的用户名相同，登录时可以省略用户名。
ssh <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span>

还要说明的是，SSH服务的默认端口是<span class="token number">22</span>，也就是说，如果你不设置端口的话登录请求会自动送到远程主机的<span class="token number">22</span>端口。我们可以使用 <span class="token operator">-</span>p 选项来修改端口号，比如连接到服务器的<span class="token number">1234</span>端口：
ssh <span class="token operator">-</span>p <span class="token number">1234</span> ben@<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span>


客户机必须要知道服务器的ip地址。可以在服务器端电脑上利用 ifconfig 命令查看该机的ip地址：
inet 地址

如果是第一次登录远程主机，系统会给出下面提示：
意思是，该远程主机的真实性无法确定，其公钥指纹为 SHA256<span class="token operator">:</span>FFobshqrGOachj7Xp4LsJ9<span class="token operator">+</span>xkNBlyyOe8ZIPl7K<span class="token operator">+</span>qQI，确定想要继续连接吗？
输入yes即可。这时系统会提示远程主机被添加到已知主机列表。

然后会要求我们输入远程主机的密码，输入的密码正确就可以成功登录了。命令提示符会修改为远程主机的提示符，现在开始，终端中输入的命令都将在服务器中执行。


我们可以通过 Ctrl<span class="token operator">+</span>D 或者 exit 命令退出远程登录。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、关于端口号" tabindex="-1"><a class="header-anchor" href="#_3、关于端口号" aria-hidden="true">#</a> 3、关于端口号</h3>`,18),H={href:"https://blog.csdn.net/Flemming323/article/details/135232881",target:"_blank",rel:"noopener noreferrer"},x=t('<br><ul><li><mark>查看本机 SSH 端口的方法</mark><br> Ubuntu 系统中，您可以通过以下几种方式查看 SSH 服务所使用的端口：</li><li>查看 SSH 配置文件： <ul><li>通常 SSH 的配置文件位于 <code>/etc/ssh/sshd_config</code> 。</li><li>使用文本编辑器打开该文件，查找 <code>Port</code> 关键字，后面跟着的数字就是 SSH 服务使用的端口。</li></ul></li><li>使用 <code>ss</code> 命令： <ul><li>运行 <code>ss -tnlp | grep ssh</code> 命令，输出中 <code>Local Address:Port</code> 部分显示的端口就是 SSH 正在使用的端口。</li></ul></li><li>使用 <code>netstat</code> 命令： <ul><li>执行 <code>netstat -tnlp | grep ssh</code> ，同样可以获取 SSH 服务使用的端口信息。<br><em>请注意，修改 SSH 端口需要谨慎操作，并确保新端口在防火墙中已正确开放，以保证能够正常连接。</em></li></ul></li></ul><br><ul><li><mark>端口 22 的含义</mark></li><li>端口 22 通常是指 SSH（Secure Shell）服务所使用的默认端口。</li><li>SSH 是一种用于安全远程登录和执行命令的网络协议。当您通过 SSH 连接到远程服务器时，客户端会尝试与服务器的 22 端口建立连接，以进行安全的通信和数据传输。</li><li>通过 SSH 连接，您可以在远程服务器上执行各种操作，如管理文件、运行命令、配置系统等，并且数据在传输过程中会进行加密，以保证安全性。<br><em>SSH 服务在服务器管理、系统维护等方面被广泛使用。</em></li></ul><h2 id="三、例子" tabindex="-1"><a class="header-anchor" href="#三、例子" aria-hidden="true">#</a> 三、例子：</h2>',5),y=t('<li><p>关于 自己这台笔记本 远程登录实验室电脑;</p><ul><li>就是先需要有一个在实验室电脑的账户；</li><li>比如在实验室电脑上新开一个账户；(应该是默认安装了ssh的服务器端的)</li><li>然后 我在我的笔记本的话 进行 先查看是否安装了SSH的客户端的；</li><li>然后就是 直接 ssh <a href="mailto:username@10.26.0.1">username@10.26.0.1</a> (默认端口是22的话)</li><li>然后就是 如果不是 ssh -p 端口号 <a href="mailto:username@10.26.0.1">username@10.26.0.1</a></li><li>然后yes 然后输入实验室电脑新账户的密码</li><li>bzhang@pc243:~$</li><li>然后就进入了</li></ul></li><li><p><mark>Windows一样</mark></p></li><li><p>C:\\Users\\username&gt; ssh -p 端口号 <a href="mailto:username@10.26.0.1">username@10.26.0.1</a></p></li>',3),P=e("p",null,[s("The authenticity of host '' can't be established."),e("br"),s(" ECDSA key fingerprint is"),e("br"),s(" Are you sure you want to continue connecting (yes/no/[fingerprint])? yes"),e("br"),s(" Warning: Permanently added '' (ECDSA) to the list of known hosts."),e("br"),e("a",{href:"mailto:username@10.26.0.1"},"username@10.26.0.1"),s("'s password:"),e("br"),s(" Welcome to Kylin V10 SP1 (GNU/Linux 6.5.0-41-generic x86_64)")],-1),C={href:"https://help.ubuntu.com",target:"_blank",rel:"noopener noreferrer"},U={href:"https://landscape.canonical.com",target:"_blank",rel:"noopener noreferrer"},T={href:"https://ubuntu.com/pro",target:"_blank",rel:"noopener noreferrer"},D=e("br",null,null,-1),w=e("br",null,null,-1),F=e("br",null,null,-1),N=e("br",null,null,-1),E=e("br",null,null,-1),L={href:"https://ubuntu.com/esm",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,[e("p",null,[s("username@pc243:~$ ls"),e("br"),s(" Desktop Documents Downloads Music Pictures Public snap Templates Videos"),e("br"),s(" username@pc243:~$")])],-1),V=e("h2",{id:"四、利用ssh进行传输文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#四、利用ssh进行传输文件","aria-hidden":"true"},"#"),s(" 四、利用SSH进行传输文件")],-1),I={href:"https://blog.csdn.net/qq_51447496/article/details/132090240",target:"_blank",rel:"noopener noreferrer"},W=t('<li><p>SCP（Secure Copy）是一个基于SSH的安全文件传输协议，可用于在不同主机之间进行快速、安全的文件传输。无论是备份、复制还是同步文件，SCP都是一个非常有用的工具。</p></li><li><p>scp -P 2222 /path/to/local/file <a href="mailto:user@192.168.0.1">user@192.168.0.1</a>:/path/to/remote/</p></li><li></li><li><p>压缩</p></li><li><p>对于大的可以先进行压缩 然后 进行 scp传输</p></li><li><p>比如压缩整个目录：<code>zip -r compressed_directory.zip directory_to_compress</code></p></li><li><p>还有 就是 最好 先进入到 要 传输的 目录下； 这样比较方便一点 对于 要传输的数据 就不需要前面的 那些/ 路径了；</p></li><li><p>scp filename.txt <a href="mailto:username@00.00.00.00">username@00.00.00.00</a>:/media/username_data/tmp</p></li>',8),M=t("<br><ul><li>SCP（Secure Copy）用于在 Linux 和类 Unix 系统之间安全地复制文件和目录。<br> 以下是使用 SCP 传输文件的一般格式：<br><code>scp [选项] 源文件 目标地址</code></li><li>从本地复制文件到远程服务器：<br><code>scp local_file username@remote_host:remote_directory</code></li><li>从远程服务器复制文件到本地：<br><code>scp username@remote_host:remote_file local_directory</code><br> 常用的选项包括：</li><li><code>r</code> ：递归复制目录及其内容。</li><li><code>P port</code> ：指定连接远程服务器的端口（如果不是默认的 22 端口）。<br> 例如：</li><li>复制本地的 <code>test.txt</code> 文件到远程服务器的 <code>/home/user/</code> 目录：<br><code>scp test.txt user@example.com:/home/user/</code></li><li>复制远程服务器上的 <code>/data/log.txt</code> 文件到本地的当前目录：<br><code>scp user@example.com:/data/log.txt.</code></li></ul><br><ul><li><p><mark>在 Ubuntu 系统中局域网内电脑信息互传的方法</mark><br> 在 Ubuntu 系统中，可以通过以下几种方式在局域网内进行两个电脑的信息互传：</p></li><li><p><strong>SCP（Secure Copy）</strong>：</p><ul><li>如前面所述，使用 <code>scp</code> 命令在两个 Ubuntu 系统之间安全地复制文件和目录。</li></ul></li><li><p><strong>SFTP（SSH File Transfer Protocol）</strong>：</p><ul><li>您可以使用支持 SFTP 的客户端，如 FileZilla 等。连接到另一台电脑的 SSH 服务进行文件传输。</li></ul></li><li><p><strong>NFS（Network File System）</strong>：</p><ul><li>在一台电脑上设置 NFS 服务器，共享指定的目录。</li><li>在另一台电脑上挂载该共享目录，实现文件访问和传输。</li></ul></li><li><p><strong>Samba</strong>：</p><ul><li>如果局域网内还有 Windows 电脑，可以在 Ubuntu 上安装配置 Samba 服务。</li><li>其他电脑就可以像访问 Windows 共享文件夹一样访问 Ubuntu 共享的文件。</li></ul></li><li><p><strong>HTTP 服务器</strong>：</p><ul><li>在一台 Ubuntu 电脑上搭建简单的 HTTP 服务器，如使用 Python 的 <code>http.server</code> 模块。</li><li>另一台电脑通过浏览器访问下载文件。<br> 这些方法各有特点，您可以根据具体的需求和网络环境选择合适的方式。</li></ul></li></ul>",4);function q(B,z){const l=r("ExternalLinkIcon"),a=r("router-link");return c(),p("div",null,[h,m,d(" more "),e("div",b,[S,e("ul",null,[v,e("li",null,[e("a",_,[s("SSH简介及两种远程登录的方法"),n(l)])]),e("li",null,[e("a",k,[s("ssh用法及命令"),n(l)])])])]),e("nav",g,[e("ul",null,[e("li",null,[n(a,{to:"#一、简单介绍ssh"},{default:i(()=>[s("一、简单介绍SSH")]),_:1}),e("ul",null,[e("li",null,[n(a,{to:"#_1、ssh的安装"},{default:i(()=>[s("1、SSH的安装")]),_:1})]),e("li",null,[n(a,{to:"#_2、启动服务器的ssh服务"},{default:i(()=>[s("2、启动服务器的SSH服务")]),_:1})])])]),e("li",null,[n(a,{to:"#二、ssh两种级别的远程登录"},{default:i(()=>[s("二、SSH两种级别的远程登录")]),_:1}),e("ul",null,[e("li",null,[n(a,{to:"#_1、口令登录"},{default:i(()=>[s("1、口令登录")]),_:1})]),e("li",null,[n(a,{to:"#_3、关于端口号"},{default:i(()=>[s("3、关于端口号")]),_:1})])])]),e("li",null,[n(a,{to:"#三、例子"},{default:i(()=>[s("三、例子：")]),_:1})]),e("li",null,[n(a,{to:"#四、利用ssh进行传输文件"},{default:i(()=>[s("四、利用SSH进行传输文件")]),_:1})])])]),f,e("ul",null,[e("li",null,[e("a",H,[s("安全加固指南：如何更改 SSH 服务器的默认端口号"),n(l)])])]),x,e("ul",null,[y,e("li",null,[P,e("ul",null,[e("li",null,[s("Documentation: "),e("a",C,[s("https://help.ubuntu.com"),n(l)])]),e("li",null,[s("Management: "),e("a",U,[s("https://landscape.canonical.com"),n(l)])]),e("li",null,[s("Support: "),e("a",T,[s("https://ubuntu.com/pro"),n(l)]),D,s(" Expanded Security Maintenance for Applications is not enabled."),w,s(" 8 updates can be applied immediately."),F,s(" To see these additional updates run: apt list --upgradable"),N,s(" 25 additional security updates can be applied with ESM Apps."),E,s(" Learn more about enabling ESM Apps service at "),e("a",L,[s("https://ubuntu.com/esm"),n(l)])])])]),A]),V,e("ul",null,[e("li",null,[e("p",null,[e("a",I,[s("CSDN详解"),n(l)])])]),W]),M])}const G=o(u,[["render",q],["__file","D-UbuntuSSH.html.vue"]]);export{G as default};
