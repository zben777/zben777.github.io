import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c as d,d as r,a as e,b as l,e as c,w as a,f as u}from"./app-2a2d189a.js";const _={},m=e("h1",{id:"b-cuda复制数据",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#b-cuda复制数据","aria-hidden":"true"},"#"),l(" B-CUDA复制数据")],-1),h=e("p",null,"B-CUDA复制数据",-1),p={class:"hint-container info"},y=e("p",{class:"hint-container-title"},"说明",-1),f=e("p",null,"主要是各种搜索找的学习；主要是CUDA随机数",-1),C=e("li",null,[e("p",null,"博客园：")],-1),b={href:"https://www.cnblogs.com/zzzsj/p/15892726.html",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,null,-1),x=e("li",null,[e("p",null,"百度链接：")],-1),k=e("li",null,[e("p",null,"CSDN网址：")],-1),M=e("li",null,[e("p",null,"知乎网址：")],-1),U={class:"table-of-contents"},w=u('<h2 id="一、简单介绍" tabindex="-1"><a class="header-anchor" href="#一、简单介绍" aria-hidden="true">#</a> 一、简单介绍</h2><ul><li>== ==</li><li></li></ul><br><h2 id="二、cudamemcpyasync-和-cudamemcpy-区别" tabindex="-1"><a class="header-anchor" href="#二、cudamemcpyasync-和-cudamemcpy-区别" aria-hidden="true">#</a> 二、cudaMemcpyAsync 和 cudaMemcpy 区别</h2><ul><li><mark>cudaMemcpyAsync 和 cudaMemcpy 区别</mark></li><li>cudaMemcpy 是一个同步函数，意味着在数据传输完成之前，它将阻塞CPU线程。也就是说，调用cudaMemcpy的线程将一直等待直到数据传输完成才能继续执行后续代码</li><li>cudaMemcpyAsync 是一个异步函数，它允许CPU线程在数据传输完成之前继续执行。这个特性使得数据传输可以与其他操作并行，从而提高整体的执行效率。但是，它需要与CUDA流（CUDA stream）一起使用，并且只能在固定（页锁定）的主机内存上操作</li><li></li><li></li></ul><br>',6);function D(B,z){const o=t("ExternalLinkIcon"),n=t("router-link");return i(),d("div",null,[m,h,r(" more "),e("div",p,[y,f,e("ul",null,[C,e("li",null,[e("p",null,[e("a",b,[l("https://www.cnblogs.com/zzzsj/p/15892726.html"),c(o)])])]),A,x,k,M])]),e("nav",U,[e("ul",null,[e("li",null,[c(n,{to:"#一、简单介绍"},{default:a(()=>[l("一、简单介绍")]),_:1})]),e("li",null,[c(n,{to:"#二、cudamemcpyasync-和-cudamemcpy-区别"},{default:a(()=>[l("二、cudaMemcpyAsync 和 cudaMemcpy 区别")]),_:1})])])]),w])}const V=s(_,[["render",D],["__file","B-CUDA复制数据.html.vue"]]);export{V as default};
