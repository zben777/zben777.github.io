import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as u,d as k,a as n,e,w as a,b as s,f as d}from"./app-2a2d189a.js";const m="/assets/x64架构下的寄存器模型-82149c54.png",_={},b=n("h1",{id:"e-编译器如何自动优化-从汇编角度看c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#e-编译器如何自动优化-从汇编角度看c","aria-hidden":"true"},"#"),s(" E-编译器如何自动优化：从汇编角度看C++")],-1),v=n("p",null,"E-编译器如何自动优化：从汇编角度看C++",-1),h=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"说明"),n("p",null,"主要是各种搜索找的学习；"),n("p",null,"主题：编译器优化"),n("p",null,"前置条件："),n("ul",null,[n("li",null,"编译器是什么呢"),n("li",null,"众所周知编译器就是从源代码生成汇编语言;所以这次要从汇编语言的角度来理解编译器是怎么优化的以及如何用好它."),n("li",null,"然后这次会基于GCC然后还有64位某86架构讲讲")])],-1),f={class:"table-of-contents"},x=d('<h2 id="简单介绍主要是基础" tabindex="-1"><a class="header-anchor" href="#简单介绍主要是基础" aria-hidden="true">#</a> 简单介绍主要是基础</h2><h2 id="一、汇编语言简介" tabindex="-1"><a class="header-anchor" href="#一、汇编语言简介" aria-hidden="true">#</a> 一、汇编语言简介</h2><ul><li><mark>什么是汇编语言</mark></li><li>首先要讲解一下什么是汇编语言，先以这个举例子，就是首先是某86的64位架构。</li><li>它有这些寄存器，寄存器呢，它就是在CPU里面的，然后它的速度比内存快，如果读到寄存器里，然后再计算就比较高效</li><li>所以某64它提供了这么多寄存器，其中白色的这些是32位模式下就有的，而64位以后，不仅把原来32位的这几个扩充到了64位，它还额外追加了8个寄存器</li><li>这样我们用起来就更方便了，然后RIP是他的当前执行的这个代码的地址，也是扩充到64位，然后还有这些MMX，还有YMM，XMM这些都是那个用于存储浮点数的寄存器</li><li>他们能够就是一个就是这个不是一个有128位宽吗然后float它不是有 32位宽的所以这里面可以塞得下4个float或者塞两个double然后他们在运算加法的时候就可以两个double一起来算这样它效率就更高了</li><li>为什么说浮点数用的是这个呢？因为浮点数就是我们高性能计算中经常用到浮点数，所以就干脆把他们认为是那个嗯你懂得就是比较高效嘛</li><li><img src="'+m+'" alt="x64架构下的寄存器模型" tabindex="0" loading="lazy"><figcaption>x64架构下的寄存器模型</figcaption></li></ul><br><ul><li><mark>通用寄存器：32 位时代</mark></li><li>32 位 x86 架构中的通用寄存器有：</li><li>eax, ecx, edx, ebx, esi, edi, esp, ebp</li><li>其中 esp 是堆栈指针寄存器，和函数的调用与返回相关。</li><li>其中 eax 是用于保存返回值的寄存器。</li><li><mark>通用寄存器：64 位时代</mark></li><li>64 位 x86 架构中的通用寄存器有：</li><li>rax, rcx, rdx, rbx, rsi, rdi, rsp, rbp, r8, r9, r10, r11, ..., r15</li><li>其中 r8 到 r15 是 64 位 x86 新增的寄存器，给了汇编程序员更大的空间，降低了编译器处理寄存器翻车（register spill）的压力。</li><li>因此 64 位比 32 位机器相比，除了内存突破 4GB 限制外，也有一定性能优势。</li><li><mark>优势</mark></li><li>然后就是刚才说的32位只有这8个寄存器，然后到64位以后又新增了8个寄存器，可以看到这几个没有在命名强迫症了他们直接用数字来编号</li><li>然后寄存器多有什么好处呢</li><li>就是比如你的局部变量有16个那他们就都能够存进寄存器里而不需要存到内存上</li><li>这样编译器他就可以自由的把你的变量存到这个这个局部的这个那个那个变就是说把你的局部变量变成一个寄存器这样他读写就更快了</li><li>所以说64位除了内存更大他还有性能的优势</li><li><mark>寄存器优化</mark></li><li>AVX512 它是ZMM新寄存器，512位宽；然后AVX512低位256位是YMM它是256位；然后还有最普通的SSE用的是XMM它们只有那个128位</li><li>编译器会自动设置寄存器优化/</li></ul><h2 id="二、编译器自动优化" tabindex="-1"><a class="header-anchor" href="#二、编译器自动优化" aria-hidden="true">#</a> 二、编译器自动优化</h2><ul><li><mark>开启优化：-O3</mark></li><li>大概内部一系列的内部汇编的整改，使得优化更快更简练。</li><li>gcc -O3 main.cpp -o main.S</li></ul><br><ul><li><mark>关于size_t</mark></li><li>指针的索引：尽量用 size_t</li><li>以及 for 循环 以及 数组索引 都尽量使用size_t 这样就不用再扩展之类的</li><li>size_t 在 64 位系统上相当于 uint64_t；size_t 在 32 位系统上相当于 uint32_t</li><li>从而不需要用 movslq 从 32 位符号扩展到 64 位，更高效。而且也能处理数组大小超过 INT_MAX 的情况，推荐始终用 size_t 表示数组大小和索引。</li></ul><br><ul><li><mark>为什么需要 SIMD？单个指令处理四个数据</mark></li><li>这种单个指令处理多个数据的技术称为 SIMD（single-instruction multiple-data）。</li><li>他可以大大增加计算密集型程序的吞吐量。</li><li>因为 SIMD 把 4 个 float 打包到一个 xmm 寄存器里同时运算，很像数学中矢量的逐元素加法。因此 SIMD 又被称为矢量，而原始的一次只能处理 1 个 float 的方式，则称为标量。</li><li>在一定条件下，编译器能够把一个处理标量 float 的代码，转换成一个利用 SIMD 指令的，处理矢量 float 的代码，从而增强你程序的吞吐能力！</li><li>通常认为利用同时处理 4 个 float 的 SIMD 指令可以加速 4 倍。但是如果你的算法不适合 SIMD，则可能加速达不到 4 倍；也有因为 SIMD 让访问内存更有规律，节约了指令解码和指令缓存的压力等原因，出现加速超过 4 倍的情况。</li></ul><h2 id="三、化简" tabindex="-1"><a class="header-anchor" href="#三、化简" aria-hidden="true">#</a> 三、化简</h2><ul><li><mark>编译器优化：代数化简</mark></li><li>在编译器里面就直接 return a 了直接把a当作返回值。</li><li><mark>编译器优化：常量折叠</mark></li><li>在编译器里面就直接 是用 42 了</li></ul>',13),y={class:"hint-container details"},w=n("summary",null,"Click me to view the code!",-1),M=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"func"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" c "),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" d "),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},"-"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),s("c "),n("span",{class:"token operator"},"+"),s(" d"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


_Z4funcii`),n("span",{class:"token operator"},":"),s(`
`),n("span",{class:"token punctuation"},"."),s("LFB0"),n("span",{class:"token operator"},":"),s(`
    `),n("span",{class:"token punctuation"},"."),s(`cfi_startproc
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),s(),n("span",{class:"token directive keyword"},"main"),n("span",{class:"token expression"},[n("span",{class:"token punctuation"},"."),s("cpp"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"fun"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{")])]),s(`
    movl   `),n("span",{class:"token operator"},"%"),s("edi"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"%"),s("eax  # tem86"),n("span",{class:"token punctuation"},","),s(` a
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),s(),n("span",{class:"token directive keyword"},"main"),n("span",{class:"token expression"},[n("span",{class:"token punctuation"},"."),s("cpp"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"5"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"}")])]),s(`
    ret
    `),n("span",{class:"token punctuation"},"."),s(`cfi_endproc
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"func"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

_Z4funcv`),n("span",{class:"token operator"},":"),s(`
`),n("span",{class:"token punctuation"},"."),s("LFB0"),n("span",{class:"token operator"},":"),s(`
    `),n("span",{class:"token punctuation"},"."),s(`cfi_startproc
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),s(),n("span",{class:"token directive keyword"},"main"),n("span",{class:"token expression"},[n("span",{class:"token punctuation"},"."),s("cpp"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"5"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"}")])]),s(`
    movl   $`),n("span",{class:"token number"},"42"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"%"),s("eax  #"),n("span",{class:"token punctuation"},","),s(`
    ret
    `),n("span",{class:"token punctuation"},"."),s(`cfi_endproc
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function C(S,I){const l=o("router-link"),c=o("CodeTabs");return p(),u("div",null,[b,v,k(" more "),h,n("nav",f,[n("ul",null,[n("li",null,[e(l,{to:"#简单介绍主要是基础"},{default:a(()=>[s("简单介绍主要是基础")]),_:1})]),n("li",null,[e(l,{to:"#一、汇编语言简介"},{default:a(()=>[s("一、汇编语言简介")]),_:1})]),n("li",null,[e(l,{to:"#二、编译器自动优化"},{default:a(()=>[s("二、编译器自动优化")]),_:1})]),n("li",null,[e(l,{to:"#三、化简"},{default:a(()=>[s("三、化简")]),_:1})])])]),x,n("details",y,[w,e(c,{id:"291",data:[{id:"代数化简"},{id:"常量叠加"}],"tab-id":"shell"},{title0:a(({value:t,isActive:i})=>[s("代数化简")]),title1:a(({value:t,isActive:i})=>[s("常量叠加")]),tab0:a(({value:t,isActive:i})=>[M]),tab1:a(({value:t,isActive:i})=>[g]),_:1})])])}const A=r(_,[["render",C],["__file","E-编译器如何自动优化：从汇编角度看C__.html.vue"]]);export{A as default};
