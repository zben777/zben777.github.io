import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as k,d,a as n,e as o,w as a,b as s,f as p}from"./app-2a2d189a.js";const m={},v=n("h1",{id:"c-rall和内存管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-rall和内存管理","aria-hidden":"true"},"#"),s(" C-RALL和内存管理")],-1),b=n("p",null,"C-RALL内存管理",-1),f=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"说明"),n("ul",null,[n("li",null,"主要是各种搜索找的学习；")])],-1),g={class:"table-of-contents"},h=p(`<h2 id="简单介绍主要是基础" tabindex="-1"><a class="header-anchor" href="#简单介绍主要是基础" aria-hidden="true">#</a> 简单介绍主要是基础</h2><h2 id="一、如何求数组内的sum的例子" tabindex="-1"><a class="header-anchor" href="#一、如何求数组内的sum的例子" aria-hidden="true">#</a> 一、如何求数组内的sum的例子</h2><ul><li><mark>古代C语言为例</mark></li><li>1-首先使用<code>malloc</code> 进行内存分配，分配一块内存；</li><li>2-然后因为是4个数组成的数组，所以要分配4乘int的大小个内存的bit才能存储</li><li>2- 然后返回的是一个指针。</li><li>2-<code>(int *)</code> 进行类型的强制转换</li><li>3-开始传入数据 ；指针通过括号0代表从指针开始第0个数</li><li>4-当然最后还要把分配的给释放一下</li></ul><details class="hint-container details"><summary>Click me to view the code!</summary><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    size_t nv <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nv <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nv<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><mark>近代：C++98 引入 STL 容器库</mark></li><li>0-上面的之前是就是本来是需要定义一个长度，然后再分配一块内存，返回一个指针</li><li>1-现在直接封装为了一个vector类，而且这个类还是基于模板的 &lt;&gt; 这里是传入模板类的int float：就是我这里可以是int整型，也可以是float浮点型</li><li>2-传入数据也是通过 v[0] = 进行传入的。</li><li>求长度的话，可以用 size() 函数</li><li>进行输出的时候使用std::cout &lt;&lt; 进行输出 这个不用调整数据类型了，C++它有运算符重载</li></ul><details class="hint-container details"><summary>Click me to view the code!</summary><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><br><ul><li><mark>近现代：C++11 引入了 {} 初始化表达式</mark></li><li>1-之前要先分配一个vector，然后只能一个个赋值进行，现在可以直接初始化v 花括号表达式</li><li>2-引入了基于 范围的 for循环：range-based for-loop</li><li>3-之前是需要指定下标进行；现在可以直接基于迭代器的~</li><li>也就是把v里面每一个元素变成vi，然后vi把它累加到Sum上</li></ul><details class="hint-container details"><summary>Click me to view the code!</summary><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> vi<span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> vi<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><br><h2 id="二、c-有哪些面向对象思想" tabindex="-1"><a class="header-anchor" href="#二、c-有哪些面向对象思想" aria-hidden="true">#</a> 二、C++有哪些面向对象思想?</h2><ul><li><p><mark>C++思想：封装</mark></p></li><li><p>考察先前提及的两例。可以发现，优秀的编程实践思想贯穿其中。在C语言的实现版本中，必须首先明确数据结构的大小，随后执行内存的分配。与之相对，C++的面向对象版本中，这一流程通过对象的初始化进行封装；相关的逻辑上相关的动作，例如声明一个NV结构并指定其大小，被精简为一个类的创建。</p></li><li><p>例如，表示一个数字的结构体需要指明变量<code>v</code>和其数量<code>n</code>。在面向对象的范式中，<code>v</code>通过类初始化时的构造函数参数来指定。也可以通过成员函数，比如<code>.data()</code>来获得起始地址，以及<code>.size()</code>来得知其分配的大小。这种封装的方式减少了出错的可能性，并体现了面向对象的封装思想。在面向对象设计中，将数据及其相关的操作封装为一个类，有助于简化程序的复杂性并提高代码的稳健性。</p></li><li><p>1-将多个逻辑上相关的变量包装成一个类</p></li><li><p>2-比如要表达一个数组，需要：起始地址指针v，数组大小nv</p></li><li><p>3-因此 C++ 的 vector 将他俩打包起来，避免程序员犯错</p></li></ul><br><ul><li><p><mark>封装：不变性</mark></p></li><li><p>1-内存的重新分配比较麻烦。</p></li><li><p>封装机制具备重要优势，举例说明，设想需要将NV的值从2更改为4。在C语言中，存在一个<code>realloc</code>函数，允许将已分配的内存块从原有的2NV大小扩展到4NV。此过程涉及复制现有的NV并调整<code>v</code>，需要两步操作：首先复制NV，然后更新<code>v</code>。如果程序员在执行过程中疏忽，只完成了NV的复制而未更新<code>v</code>，便会引发错误。</p></li><li><p>而在C++中，面向对象的封装机制能够将这两种操作合并为一步。换言之，只要执行了封装好的操作，无论前后如何，都不会产生错误。这实现了一种原子性的设计理念——提供的所有操作都是原子操作，只要不中断这些原子操作，程序就能正常运行。</p></li><li><p>常见的一种模式叫作getter/setter模式，也就是获取器和设置器。在这种模式下，<code>resize</code>函数相当于<code>set size</code>，而<code>size</code>方法则相当于<code>get size</code>。<code>resize</code>函数内部负责设置值，并且在更新值时自动调整数组所对应的内存大小。因此，这个尺寸调整过程被封装在成员函数中，就是getter/setter的模式。</p></li></ul>`,14),y={class:"hint-container details"},w=n("summary",null,"Click me to view the code!",-1),_=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("    size_t nv "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),s("v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token function"},"malloc"),n("span",{class:"token punctuation"},"("),s("nv "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`
    nv `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    v `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token function"},"realloc"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(" nv "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("    std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"v"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=p(`<br><ul><li><p><mark>不变性：请勿滥用封装</mark></p></li><li><p>当分析面向对象编程中的封装时，需明确：不是所有情况都适合使用getters和setters。以三维矢量类为例，过度封装是非必要的。之所以要在某些类中实现封装，是因为若变量<code>NV</code>发生更新后，相应的<code>v</code>也需要调整来保持对象状态的准确性。若对象更新操作后进入错误状态，这时候封装是必要的。</p></li><li><p>然而，对于三维矢量类，仅仅改变一个如<code>m_x</code>的分量，并不会导致对象整体状态不一致。不存在一个操作导致需要同时更新其他分量的情况，因此，不必通过封装来保证数据一致性。</p></li><li><p>过度地运用get/set模式，如在三维向量类中使用<code>getX</code>和<code>setX</code>，可能是对象导向设计的误用。与其如此，建议直接使用结构体<code>struct</code>，附带三个公开成员，简单明了而无需封装，这样做更为直接，避免了不必要的复杂性，减少了代码的冗长，使程序的设计与使用过程更为顺畅。</p></li><li><p>仅当出现“修改一个成员时，其他也成员要被修改，否则出错”的现象时，才需要getter/setter 封装。</p></li><li><p>各个成员之间相互正交，比如数学矢量类 Vec3，就没必要去搞封装，只会让程序员变得痛苦，同时还有一定性能损失：特别是如果 getter/setter 函数分离了声明和定义，实现在另一个文件时！</p></li></ul><details class="hint-container details"><summary>Click me to view the code!</summary><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 正确定义的Vec3结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">Vec3</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 需要修正的Vec3类</span>
<span class="token keyword">class</span> <span class="token class-name">Vec3</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">float</span> m_x<span class="token punctuation">,</span> m_y<span class="token punctuation">,</span> m_z<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">float</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m_x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><br><h2 id="三、c-思想-raii-resource-acquisition-is-initialization" tabindex="-1"><a class="header-anchor" href="#三、c-思想-raii-resource-acquisition-is-initialization" aria-hidden="true">#</a> 三、C++思想：RAII（Resource Acquisition Is Initialization）</h2><blockquote><p>资源获取视为初始化，反之，资源释放视为销毁</p></blockquote><ul><li><p>C++ 除了用于初始化的构造函数（constructor）</p></li><li><p>还包括了用于销毁的解构函数（destructor）</p></li><li><p>除了前面提到的不变性外，还有另一个重要概念是对象的销毁过程。资源一旦被分配，最终必须释放。在C语言中，经常使用<code>malloc</code>来分配内存，并通过<code>free</code>来释放内存。这要求程序员必须手动管理内存，即先分配内存，随后必须记得释放。</p></li><li><p>然而，在C++中，内存分配得到了简化：只需负责分配内存。C++通过自动判断某个对象何时不再使用，并在对象的生命周期结束时自动释放资源。具体来说，若变量<code>v</code>定义在某个函数内部，则当该函数执行完毕返回后，<code>v</code>会自动被销毁。这是由C++中特殊的函数——析构函数——负责的。同时，如果需要将<code>v</code>初始化为4，这个操作将在构造函数中完成，相当于<code>malloc</code>，而析构函数则相当于<code>free</code>。</p></li><li><p>目的是为了防止程序员因忘记释放内存而引入的错误。因此，在现代C++编程中，一般建议避免直接使用<code>new</code>和<code>delete</code>，以及<code>malloc</code>和<code>free</code>。推荐改用智能指针等资源管理工具，如<code>std::unique_ptr</code>，来处理内存管理。这种做法能减少内存泄漏等问题的出现。</p></li></ul>`,7),A={class:"hint-container details"},I=n("summary",null,"Click me to view the code!",-1),z=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    size_t nv `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),s("v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token function"},"malloc"),n("span",{class:"token punctuation"},"("),s("nv "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`

    nv `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    v `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token function"},"realloc"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},","),s(" nv "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"free"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 手动释放内存"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"v"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`

    v`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
    v`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"int"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("size_t i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" v"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        sum `),n("span",{class:"token operator"},"+="),s(" v"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(" sum "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token comment"},"//离开 {} 作用域自动释放"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("br",null,null,-1),V=n("ul",null,[n("li",null,[n("p",null,[n("mark",null,"RAll思想有什么好处")])]),n("li",null,[n("p",null,"RAll设计理念的好处在于，它帮助程序员避免内存管理的错误。考虑以下示例：假设存在一个命令集合，其中甚至包括文件列表。在手动管理这些资源时，开发者需要记住每次打开的文件，并确保在合适的时机关闭它们。例如，打开文件F1后，若发现F1并不包含期望的内容，就应立即关闭F1。这之后可能又会打开文件F2，但忘记关闭前一个文件F1。所有这些操作都必须在退出条件中仔细检查，确保所有资源得到妥善关闭，这是一个细心的管理过程。")]),n("li",null,[n("p",null,"更复杂的情况是，如果打开了一个包含多个文件的列表，那么关闭这些文件就需要通过for循环来逐一执行。事实上，这种管理方式异常复杂且容易出错。但使用RAII（Resource Acquisition Is Initialization）理念，则可以简化内存和资源管理。它的核心是资源的生命周期与对象的生命周期绑定：对象创建时获取资源，对象销毁时释放资源。如果希望提前释放资源，不必执行复杂的关闭操作，只需调整控制对象的生命周期即可。")]),n("li",null,[n("p",null,"例如，若要关闭文件资源集合，不需要显式写出关闭每个文件的代码，只需将控制它们的对象清空或结束其生命周期。对象析构函数将自动处理资源的释放工作。这种方式不仅提高了代码的可读性和可维护性，也减少了内存泄漏和其他资源管理错误的风险。")]),n("li",null,[n("p",null,"此外，RAII与一些面向垃圾收集（GC）的语言有所不同，在GC语言中，不需要显式关闭资源。它们通过垃圾收集器延迟资源的清理工作，等待垃圾收集器在适当的时间激活并回收资源。然而，GC的工作并非实时，资源不会被立即释放，这可能导致延迟和不可预测的性能表现。因此，RAII提供了即时清理资源的优势，是一种既安全又高效的资源管理策略。")])],-1),P={class:"hint-container details"},F=n("summary",null,"Click me to view the code!",-1),N=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<fstream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<vector>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<cstdio>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("ifstream "),n("span",{class:"token function"},"f1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"1.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"checkFileContent"),n("span",{class:"token punctuation"},"("),s("f1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"bad file 1!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        f1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("ifstream "),n("span",{class:"token function"},"f2"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"checkFileContent"),n("span",{class:"token punctuation"},"("),s("f2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"bad file 2!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        f1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        f2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("std"),n("span",{class:"token double-colon punctuation"},"::"),s("ifstream"),n("span",{class:"token operator"},">"),s(" files"),n("span",{class:"token punctuation"},";"),s(`
    files`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"ifstream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"3.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    files`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"ifstream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"4.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    files`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"ifstream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"5.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"auto"),s(),n("span",{class:"token operator"},"&"),s("file"),n("span",{class:"token operator"},":"),s(" files"),n("span",{class:"token punctuation"},")"),s(`
        file`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    f1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    f2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"close"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<fstream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<vector>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<cstdio>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("ifstream "),n("span",{class:"token function"},"f1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"1.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"checkFileContent"),n("span",{class:"token punctuation"},"("),s("f1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"bad file 1!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 自动释放 f1"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("ifstream "),n("span",{class:"token function"},"f2"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"checkFileContent"),n("span",{class:"token punctuation"},"("),s("f2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"bad file 2!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 自动释放 f1, f2"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    vector`),n("span",{class:"token operator"},"<"),s("std"),n("span",{class:"token double-colon punctuation"},"::"),s("ifstream"),n("span",{class:"token operator"},">"),s(" files"),n("span",{class:"token punctuation"},";"),s(`
    files`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"ifstream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"3.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    files`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"ifstream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"4.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    files`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"ifstream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"5.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// files.clear();  // 提前释放 files（如果需要）"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 自动释放 f1, f2, files"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=p(`<br><ul><li><p><mark>RAII：异常安全（exception-safe）</mark></p></li><li><p>针对高性能计算，准确控制加锁与解锁的顺序至关重要。例如，一个过程中涉及对变量<code>node_x</code>的操作，这时对时序的控制就显得尤为重要。假设一个线程先锁定了锁1，紧接着尝试锁定锁2；同时，另一个线程先锁定了锁2，随后尝试锁定锁1。这两个线程都在尝试获取对方已经占有的锁，结果就会导致它们永远等待对方释放锁，这就发生了一个典型的死锁问题。</p></li><li><p>RAII可以保证异常安全性，即在发生异常时，资源能够得到正确的释放。例如，在C++中，即使在代码中发生了异常，通过RAII管理的资源也会在对象生命周期结束时自动释放。这避免了在<code>try-catch-finally</code>结构中需要编写清理代码的情况。</p></li><li><p>例如，在一个函数中，若文件成功打开然后在写入过程中抛出异常，若该文件是RAII对象管理的，则即便发生异常，其析构函数也会在对象生命周期结束时被调用，文件将被正确关闭，保证资源的正确释放和数据的安全写出。这样，C++程序无需使用专门的<code>finally</code>语句来确保资源释放，RAII机制能够自动处理。总之，RAII可以保证在抛出异常的情况下资源同样能被自动释放，这大大简化了资源管理并增强了程序的健壮性。</p></li></ul><br><h2 id="四、raii-离不开构造函数" tabindex="-1"><a class="header-anchor" href="#四、raii-离不开构造函数" aria-hidden="true">#</a> 四、RAII：离不开构造函数</h2><ul><li><p><mark>自定义构造函数：无参数</mark></p></li><li><p>在学习RAII（Resource Acquisition Is Initialization）概念时，讨论了构造函数和析构函数的重要性。在定义自定义类时，如何正确地声明它们的构造函数是一个关键环节。</p></li><li><p>考虑如下情形：当声明一个<code>Pig</code>类的实例时，如<code>Pig pig;</code>，此时将调用默认的无参数构造函数。在该构造函数内部，可以进行成员变量的初始化。例如，默认构造函数可能会初始化<code>name</code>为“Peiqi”（即佩奇），并将<code>weight</code>设置为80。这些值是在构造函数中指定的初始值。</p></li><li><p>如果没有提供构造函数，类的成员可能会被初始化为默认值，如空字符串或者零值。因此，定义构造函数对于设置对象的起始状态非常关键。以下是一个示例：</p></li></ul><details class="hint-container details"><summary>Click me to view the code!</summary><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Pig</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string m_name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_weight<span class="token punctuation">;</span>

    <span class="token function">Pig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_name <span class="token operator">=</span> <span class="token string">&quot;佩奇&quot;</span><span class="token punctuation">;</span>
        m_weight <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Pig pig<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name: &quot;</span> <span class="token operator">&lt;&lt;</span> pig<span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;weight: &quot;</span> <span class="token operator">&lt;&lt;</span> pig<span class="token punctuation">.</span>m_weight <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><br><ul><li><mark>自定义构造函数：（使用初始化表达式）</mark></li><li><mark>为什么需要初始化表达式？</mark></li></ul><ol><li>假如类成员为 const 和引用</li><li>假如类成员没有无参构造函数</li><li>避免重复初始化，更高效</li></ol><ul><li>在探索C++类的构造方法中，一种可优化的方式是采用初始化表达式，即通过在构造函数后使用冒号，接着写上成员变量名称和括号中的初始值来初始化成员。这种方式的优势在于，它相较于成员变量在构造函数体内的赋值更加高效。在一般的赋值方式中，成员变量可能会被初始化为默认值，然后又被赋予新值，相当于进行了两次初始化，这在效率上是不可取的。</li><li>使用初始化列表（即冒号和成员名后跟初始值的写法）可以在进入构造函数体之前直接初始化成员变量，因此只需进行一次初始化。这一点特别重要，因为对于没有默认构造函数，或者是常量（const）成员的初始化，仅能通过初始化列表来完成，否则会导致编译错误。</li><li>当使用这种方法初始化对象时，如果不需要传递任何参数，应省去构造函数调用的括号。如果加上了空括号，C++有可能将其误解为函数声明。</li><li>此外，可通过提供不同的参数来重载构造函数，从而实现多种初始化方式。比如一个成员变量可以接受一个整数值，这时只要简单传入该值即可：</li><li>如果需要更复杂的初始化表达式，也是可以的。例如，可以把一个字符串和一个整数结合起来作为成员变量的初始值：</li></ul>`,10),B={class:"hint-container details"},G=n("summary",null,"Click me to view the code!",-1),S=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"Pig"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("string m_name"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" m_weight"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"Pig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"m_name"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"佩奇"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"m_weight"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"80"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    Pig pig`),n("span",{class:"token punctuation"},";"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"name: "'),s(),n("span",{class:"token operator"},"<<"),s(" pig"),n("span",{class:"token punctuation"},"."),s("m_name "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"weight: "'),s(),n("span",{class:"token operator"},"<<"),s(" pig"),n("span",{class:"token punctuation"},"."),s("m_weight "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"Pig"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("string m_name"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" m_weight"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"Pig"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),s("string name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" weight"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"m_name"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"m_weight"),n("span",{class:"token punctuation"},"("),s("weight"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    Pig `),n("span",{class:"token function"},"pig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"佩奇"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"80"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"name: "'),s(),n("span",{class:"token operator"},"<<"),s(" pig"),n("span",{class:"token punctuation"},"."),s("m_name "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"weight: "'),s(),n("span",{class:"token operator"},"<<"),s(" pig"),n("span",{class:"token punctuation"},"."),s("m_weight "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"Pig"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("string m_name"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" m_weight"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"Pig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" weight"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"m_name"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"一只重达"'),s(),n("span",{class:"token operator"},"+"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),s("weight"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"kg的猪"'),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"m_weight"),n("span",{class:"token punctuation"},"("),s("weight"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    Pig `),n("span",{class:"token function"},"pig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"80"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"name: "'),s(),n("span",{class:"token operator"},"<<"),s(" pig"),n("span",{class:"token punctuation"},"."),s("m_name "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"weight: "'),s(),n("span",{class:"token operator"},"<<"),s(" pig"),n("span",{class:"token punctuation"},"."),s("m_weight "),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=p("<p>现在开始上课。本次为第二节课，第一节内容已讲解完毕，相关录播已上传供查阅。本节课原计划讨论STL容器，但由于内容较多，将重点聚焦于II（智能指针）和内存管理。</p><p>首先，通过一个示例说明如何在C++中计算列表中所有数的总和。假设我们有一个列表，若使用C++实现，其步骤如下：</p><ol><li><p><strong>C语言实现</strong>：在C语言中，首先需要定义一个数组。这包括使用<code>malloc</code>分配内存，由于数组由4个整数构成，故需分配4倍<code>int</code>大小的内存字节数。分配成功后，返回一个指向数组首地址的指针。通过指针访问数组元素，如<code>ptr[0]</code>代表第一个数，<code>ptr[1]</code>代表第二个数等。接着，使用<code>for</code>循环遍历数组（循环次数为数组长度），逐个累加元素值至某个变量。最后，输出累加结果，并确保在程序结束前使用<code>free</code>释放先前分配的内存。</p></li><li><p><strong>C++实现</strong>：进入C++时代后，编程方式有所变化。C++引入了容器库，使得原本需要手动定义长度、分配内存并返回指针的过程得以简化。现在，可通过定义一个基于模板的容器类（如<code>std::vector&lt;int&gt;</code>或<code>std::vector&lt;float&gt;</code>），直接存储整型或浮点型数据。数据的输入仍通过方括号进行，与C语言相似。查询容器长度时，可直接调用<code>v.size()</code>，返回值即为预设的4。遍历容器并累加元素时，不必再手动控制循环次数，可使用C++的范围<code>for</code>循环（如<code>for (auto elem : v)</code>），自动按序访问每个元素。输出结果时，C++的<code>cout</code>流支持类型推断，无需手动指定格式修饰符（如<code>%d</code>或<code>%f</code>），即使误用格式符，由于C++具备运算符重载功能，会根据实际数据类型调用相应的输出函数，保证正确输出。</p></li></ol><p>综上，相较于C语言，C++通过提供容器类、范围<code>for</code>循环以及运算符重载等特性，大大简化了数组操作、内存管理及数据输出，提升了代码的可读性和安全性。此外，提及C++98作为首个标准化版本，后续C++11标准进一步引入了花括号初始化列表、基于范围的<code>for</code>循环等特性，增强了编程的便捷性。</p><br><ul><li><p>过了一段时间，C++又提出了C++11的标准。这里的98指的是1998年，而11指的是2011年，这也是C++11在该年份左右推出的新标准。</p></li><li><p>那么，这个新标准带来了哪些改进呢？以前我们需要先分配一个Vector，然后一个个复制进去。但在这个新标准里，C++11开始支持花括号表达式。即，通过逗号隔开的花括号中的列表来初始化Vector v，这让编程变得更加方便。</p></li><li><p>求值的方法和之前一样。C++11还引入了一个非常方便的操作，就是基于范围的for循环。这和Python的for循环非常类似。</p></li><li><p>我们不再需要从指定下标0开始到数组的大小，而是需要for v in V，将V中的每一个元素付给v。这样便能省去写出size()和i++这些操作。并且，因为这是基于迭代器的，它可以在没有下标的情况下正常使用，使其使用更为便利。</p></li><li><p>C++还有一些模板算法。比如说foreach，可以将v的从起始到终止的每个值都调用一次Func函数。Func的参数是int，也就是说Func会被调用v的每一个值的次数。现在呢，Func是用来累加一个全局的值，因此，foreach执行四次后，结果就是这四个数的和。</p></li><li><p>foreach是一种模板函数，可以套用到任何一个支持begin()和end()的容器，包括list和map，甚至其他任何支持迭代器的容器。</p></li><li><p>现在，这个Func必须是一个独立的外部函数，这就不够方便，因为它需要声明一个全局变量，这让使用变得比较繁琐。</p></li><li><p>因此， C++11又引入了lambda表达式，可以在局部声明函数。它能够捕获外部作用域的变量，使我们可以使用局部变量。这样写起来更加简洁，与之前的for循环非常相似，但它是基于模板的。</p></li><li><p>虽然今天的内容比较多，但希望大家能理解并掌握。</p></li></ul><br><ul><li><p>在2011年的C++11标准之后，我们又引入了2014年的C++14标准。这时候，C++开始可以用auto作为参数。之前，如果我们将int换成了float，那么我们还得把其他所有的int都换成float。但现在的情况是，无论参数是什么类型，模板都不需要改变。这使得编程变得更通用。</p></li><li><p>到了2017年，C++发布了C++17标准。要使用这个标准，需要在CMakeList中增加一行代码。在C++17中，可以直接使用vector和括号，不再需要int。这叫做编译器参数推断，也叫CTAD。许多类似的操作，比如tuple和pair也做了CTAD，这使得我们不再需要make_tuple这个辅助函数。</p></li><li><p>C++17还引入了一些算法，这些都是定义在 <code>numeric</code> 这个头文件里。其中就包括reduce。reduce基本上就是将所有的数据求和，而不是再需要我们去写一个项目，再循环去加。如果我们不想要求和，可以使用更复杂的形式，比如把所有数据求积。</p></li><li><p>至于学习资源，推荐一个网站Compiler Explorer。虽然现在已经发布了C++20，也正在施工C++23，但是这个网站会列出很多新特性，非常有帮助。</p></li></ul><br><ul><li><p>你可以使用Lambda表达式实现自定义操作。比如，你可以使用表达式<code>[] (int x, int y) {return x*y;}</code> 来实现乘法操作，这就是一个累乘操作。比如输入的是4,3,2,1，输出的就是24。</p></li><li><p>然后你换成加法操作，初始化为0，进行一次reduce之后，他们的和就是10。</p></li><li><p>在编译器支持方面，微软是首个全部支持C++20的公司，但当前行业主流还是使用C++17。不过，很多人已经开始使用C++23了。</p></li><li><p>从C++20开始，它开始引入Ranges，这其实与python的map很相似，你可以过滤出所有大于等于0的数，然后进行相应的变换，比如计算他们的平方根。</p></li><li><p>在C++20中，你可以使用pipeline表达式，相当于是一种数据的流动，你可以把数据流送到一个处理环节，然后再送到下一个环节。</p></li><li><p>C++20中，终于真正实现了模块的概念，不再需要以前的include这种方式，而是可以直接通过import来导入模块，这一改变非常的方便。</p></li><li><p>另外，现在函数的参数也可以是auto类型了。这其实和之前的template类型参数是一样的，只是写起来更加方便一些。</p></li></ul><br><ul><li>C++20引入了协程（Coroutine），这是一种生成器的特性。</li><li>像Python中的协程那样，使用协程可以让代码更方便地编写。</li><li>另外，C++20还引入了一个format功能，之前我们可能会使用fmt库，现在可以直接使用标准库里的format来完成格式化输出。它的格式和Python一样，使用大括号作为占位符，会非常方便。</li><li>C++一直在从其他语言如Python和Rust中学习改进，不过在C++20中，有一些特性比如多线程编程的一些特性，如Future、Coroutine或Barrier等，GCC和CMake都还没有很好的支持。</li><li>虽然C++20看起来很吸引人，但目前这个版本的一些特性还没有得到广泛支持。</li><li>即使如此，我们还是可以通过使用如Intel TBB这样的库来得到一些C++20提供的特性。</li><li>对于目前的课程内容，我们会主要介绍C++17的部分。存在一些延迟和卡顿波动的可能。</li></ul><br><ul><li>正如之前提到的案例，目前已经分析了两个版本的代码，即C语言版本和C++版本。</li><li>首先看C语言版本，它的特点是先要指定数组的大小，然后分配对应大小的内存。在C++版本中，该过程被封装成了一个对象的初始化，因为这两个步骤逻辑上是相关的。如果需要表达数组，就需要知道v（数组）和n（大小）；则在C++中，这两者被封装进一个类中，通过给对象v赋值来初始化数组并分配内存，从而更有效地避免编程错误。</li><li>在修改数组大小上，C和C++的处理也有所不同。在C语言中，如果需要将数组大小从2扩容到4，则需要两个步骤——先复制数组，然后调整数组大小。而在C++中，这两个步骤被封装成了一个操作，即使在重新赋值后没有更新数组，也不会出错。这种思想，就是将所有操作都视为原子的，只要这个原子没有被破坏，那么整个操作就不会出错。</li><li>这就引出了一个常见的编程模式：&quot;get-set&quot;模式，即设置器和获取器。在这里，&quot;resize&quot;就像&quot;set size&quot;，&quot;size&quot;就像&quot;get size&quot;，并不能直接将size赋值为4，而是通过调用函数进行设定，这样就能在每次写入时自动调整数组大小。</li><li>然而，并不是所有数据都需要进行封装。例如，对于三维矢量类来说，如果更改了一个值，另一个值并不需要随之改变，所以不需要进行封装。如果使得所有属性都通过&quot;get-set&quot;方法操作，反而会使得编程变得复杂且痛苦。</li><li>因此，对于这类情况，建议直接使用struct，然后定义几个成员变量即可。</li></ul><br><ul><li>C++中的另一个重要设计思想是对象的生命周期管理。在C++中，当你创建一个对象并分配了资源给它，如内存，当你不再使用该对象时，你需要销毁它并释放其资源。这和C语言中的机制相似，你需要使用malloc来分配内存，然后在不需要的时候，使用free来释放内存。</li><li>然而，在C++中编写的代码，只需要关注资源的分配，C++会在适当的时候自动销毁对象和释放其资源。如何实现这个自动的过程？主要是通过C++提供的两个特殊的成员函数：构造函数和析构函数。当一个对象在声明时，其构造函数会自动被调用，用于完成初始化操作；当一个对象的生存期结束时，例如离开了定义它的函数，其析构函数会自动被调用，进行清理工作及资源的回收。</li><li>这种自动的资源管理机制极大地降低了程序员犯错的几率，例如忘记释放分配了的内存，此时就会产生所谓的内存泄漏，这对于程序来说是一个非常严重的错误。</li><li>因此，C++引入了所谓的&quot;资源获取就是初始化&quot;(RAII, Resource Acquisition Is Initialization)的思想。即把资源的获取行为放在构造函数中完成，把资源的释放行为放在析构函数中完成。这样，程序员在编写C++代码时，只需要关注资源的获取即可，资源的释放由C++自动完成，极大地提高了代码的安全性和可读性。</li></ul><br>",17);function M(j,H){const c=i("router-link"),l=i("CodeTabs");return r(),k("div",null,[v,b,d(" more "),f,n("nav",g,[n("ul",null,[n("li",null,[o(c,{to:"#简单介绍主要是基础"},{default:a(()=>[s("简单介绍主要是基础")]),_:1})]),n("li",null,[o(c,{to:"#一、如何求数组内的sum的例子"},{default:a(()=>[s("一、如何求数组内的sum的例子")]),_:1})]),n("li",null,[o(c,{to:"#二、c-有哪些面向对象思想"},{default:a(()=>[s("二、C++有哪些面向对象思想?")]),_:1})]),n("li",null,[o(c,{to:"#三、c-思想-raii-resource-acquisition-is-initialization"},{default:a(()=>[s("三、C++思想：RAII（Resource Acquisition Is Initialization）")]),_:1})]),n("li",null,[o(c,{to:"#四、raii-离不开构造函数"},{default:a(()=>[s("四、RAII：离不开构造函数")]),_:1})])])]),h,n("details",y,[w,o(l,{id:"196",data:[{id:"demo1"},{id:"demo2"}],"tab-id":"shell"},{title0:a(({value:t,isActive:e})=>[s("demo1")]),title1:a(({value:t,isActive:e})=>[s("demo2")]),tab0:a(({value:t,isActive:e})=>[_]),tab1:a(({value:t,isActive:e})=>[C]),_:1})]),x,n("details",A,[I,o(l,{id:"278",data:[{id:"demo1"},{id:"demo2"}],"tab-id":"shell"},{title0:a(({value:t,isActive:e})=>[s("demo1")]),title1:a(({value:t,isActive:e})=>[s("demo2")]),tab0:a(({value:t,isActive:e})=>[z]),tab1:a(({value:t,isActive:e})=>[q]),_:1})]),R,V,n("details",P,[F,o(l,{id:"316",data:[{id:"C"},{id:"C++"}],"tab-id":"shell"},{title0:a(({value:t,isActive:e})=>[s("C")]),title1:a(({value:t,isActive:e})=>[s("C++")]),tab0:a(({value:t,isActive:e})=>[N]),tab1:a(({value:t,isActive:e})=>[L]),_:1})]),T,n("details",B,[G,o(l,{id:"435",data:[{id:"无参数（使用初始化表达式）"},{id:"多个参数（使用初始化表达式）"},{id:"单个参数（使用初始化表达式）"}],"tab-id":"shell"},{title0:a(({value:t,isActive:e})=>[s("无参数（使用初始化表达式）")]),title1:a(({value:t,isActive:e})=>[s("多个参数（使用初始化表达式）")]),title2:a(({value:t,isActive:e})=>[s("单个参数（使用初始化表达式）")]),tab0:a(({value:t,isActive:e})=>[S]),tab1:a(({value:t,isActive:e})=>[X]),tab2:a(({value:t,isActive:e})=>[D]),_:1})]),E])}const O=u(m,[["render",M],["__file","C-RALL内存管理.html.vue"]]);export{O as default};
