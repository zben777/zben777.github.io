import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as l,d as c,a as n,e,w as t,b as s,f as r}from"./app-2a2d189a.js";const u="/assets/figure4-1-abd3ecf0.png",d="/assets/figure4-2-79ac0ad7.png",m="/assets/figure4-3-ec62f36c.png",k={},v=n("h1",{id:"d-第4章git分支操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#d-第4章git分支操作","aria-hidden":"true"},"#"),s(" D-第4章Git分支操作")],-1),h=n("p",null,"D-第4章Git分支操作",-1),b=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"说明"),n("p",null,"主要是各种搜索找的学习；")],-1),g={class:"table-of-contents"},f=r('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="d-第4章git分支操作-1" tabindex="-1"><a class="header-anchor" href="#d-第4章git分支操作-1" aria-hidden="true">#</a> D-第4章Git分支操作</h2><ul><li><p><mark>Git 的分支操作</mark></p></li><li><p>接下来为大家讲解第四章：Git 的分支操作。分支在公司中较为重要。</p></li><li><p>在讲解分支之前，先介绍公司服务器的运行模式。此模式大概可参考这张图，需从右向左来看。首先，公司的服务器通常会有多套，因为存在多种运行环境，如开发环境、测试环境、生产环境等。以线上服务器为例，当服务器需要修改或公司程序员要进行开发时，总不能在用户正在使用的环境上操作。所以，代码需要多复制几个分支，一个分支供用户使用，如生产分支，而程序员则在开发分支上进行开发，例如 dev 分支、测试分支等。所以不同的用户进行在不同的分支上进行使用，维护等等这样才能相互的 不进行 干扰；独立<br><img src="'+u+'" alt="figure4-1" loading="lazy"></p></li></ul><h2 id="_4-1-什么是分支" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是分支" aria-hidden="true">#</a> 4.1 什么是分支</h2><ul><li><p>在版本控制过程中，有时需要同时推进多个任务，此时可为每个任务创建单独的分支。使用分支意味着程序员能够将自己的工作从开发主线上分离，开发自己的分支时不会影响主线分支的运行。对于初学者，若难以理解分支，可简单将其视为副本，即在复制的副本上开发，即便写坏了代码也无妨，因为还有其他分支在运行。但实际上，在 Git 中，分支底层并非副本，而是指针的引用。</p></li><li><p>以 PPT 为例，当前有一个 master 主线分支在运行。运行过程中，发现程序先凑合能用，但需增加一些功能，比如给 master 主线分支添加蓝色背景，此时可从 master 分支复制出一个分支，如 future blue 分支，在该分支上继续开发。master 分支仍供用户使用，当 future blue 分支开发完成，可将其与原用户使用的分支合并，并更新程序，如从 1.0 版本更新至 1.1 版本。<br><img src="'+d+'" alt="figure4-2" loading="lazy"></p></li><li><p>若合并后导致 master 分支虽能使用但出现界面卡顿等小 bug，可从 master 分支再衍生出一个分支，如 hotfix（热修）分支，对有问题的代码进行修改，经测试人员测试无误后，再合并回 master 分支。之后可为程序发布 1.2 版本。</p></li><li><p>同时，架构师可能会添加其他任务，比如不仅要修改蓝色背景，还要为程序添加小游戏等特性。此时可再次从 master 分支衍生新分支进行开发。若游戏开发难度较大，比如开发斗地主，经过多次版本迭代直至稳定后，可将游戏分支与主线分支合并。若添加游戏后程序变化较大，可将版本直接升级为 2.0 。</p></li></ul><h2 id="_4-2-使用分支的好处" tabindex="-1"><a class="header-anchor" href="#_4-2-使用分支的好处" aria-hidden="true">#</a> 4.2 使用分支的好处</h2><ul><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul><h2 id="_4-3-分支的操作" tabindex="-1"><a class="header-anchor" href="#_4-3-分支的操作" aria-hidden="true">#</a> 4.3 分支的操作</h2><ul><li>在了解什么是分支之后，接下来讲解分支的具体操作。</li><li>在 Git 中，关于分支的命令不多，主要有查看分支、创建分支、切换分支和合并分支这几个步骤。<br><img src="'+m+`" alt="figure4-3" loading="lazy"></li></ul><h3 id="_4-3-1-查看分支" tabindex="-1"><a class="header-anchor" href="#_4-3-1-查看分支" aria-hidden="true">#</a> 4.3.1 查看分支</h3><ul><li>先来看查看分支。在当前的 Git 本地库（如“git demo”）中，要查看有哪些分支以及分支的情况，可以使用“git branch -v”命令。该命令会明确告知当前只有一个“master”分支，且需知道“master”分支可能存在多个版本。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git branch <span class="token operator">-</span>v
<span class="token operator">*</span> master <span class="token number">08</span>c7884 second

还是给出了指向的版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-2-创建分支" tabindex="-1"><a class="header-anchor" href="#_4-3-2-创建分支" aria-hidden="true">#</a> 4.3.2 创建分支</h3><ul><li>接着是创建分支。若代码可能出现问题需要紧急修复，可以创建一个分支。通过“git branch”命令并指定分支名来创建，例如“git branch hotfix”，创建后回车，无提示。此时再次查看分支，会发现除了“master”分支外，新增了“hotfix”分支。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git branch hotfix

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git branch <span class="token operator">-</span>v
  hotfix <span class="token number">08</span>c7884 second
<span class="token operator">*</span> master <span class="token number">08</span>c7884 second



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-3-修改分支4-3-4-切换分支" tabindex="-1"><a class="header-anchor" href="#_4-3-3-修改分支4-3-4-切换分支" aria-hidden="true">#</a> 4.3.3 修改分支4.3.4 切换分支</h3><ul><li>有了分支后，演示如何修改分支和切换分支。首先注意，当前仍处于“master”分支。比如，“master”分支作为主线分支供用户使用，在此基础上引申出“hotfix”分支，接下来演示如何切换到“hotfix”分支。切换分支比较简单，使用“git checkout”命令，输入分支名，如“git checkout hotfix”。此时会发现，“git”后面的显示从“master”变成了“hotfix”，且再次查看分支时，“hotfix”变为绿色并有箭头指向，说明已切换到“hotfix”分支。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ git checkout hotfix
Switched to branch <span class="token char">&#39;hotfix&#39;</span>

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>hotfix<span class="token punctuation">)</span>
$ git branch <span class="token operator">-</span>v
<span class="token operator">*</span> hotfix <span class="token number">08</span>c7884 second
  master <span class="token number">08</span>c7884 second

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在“hotfix”分支上可以进行修复操作。例如，觉得之前添加的 10 个“2”和 10 个“3”导致代码卡顿，可各减半为 5 个，修改后“:wq”保存。在“hotfix”分支修改后，需查看本地库状态（使用“git status”命令），会发现“hotfix”分支有修改的文件。可将文件添加暂存区（“git add hello.txt”），然后提交本地库。提交时使用“git commit -m”，版本信息为“hotfix first commit”，后跟“hello.txt”。提交后会显示两行新增、两行删除，说明修改了两行。查看“hello.txt”，会发现“2”和“3”的数量已改变。同时，由于切换了分支，“git”的“HEAD”文件不再指向“master”，而是“hotfix”分支。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token operator">-</span> 在修改了hello<span class="token punctuation">.</span>txt文件 之后
$ git status
On branch hotfix
Changes <span class="token operator">not</span> staged <span class="token keyword">for</span> commit<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="token punctuation">)</span>
        modified<span class="token operator">:</span>   hello<span class="token punctuation">.</span>txt

no changes added to <span class="token function">commit</span> <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>hotfix<span class="token punctuation">)</span>
$ git add hello<span class="token punctuation">.</span>txt

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>hotfix<span class="token punctuation">)</span>
$ git status
On branch hotfix
Changes to be committed<span class="token operator">:</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>
        modified<span class="token operator">:</span>   hello<span class="token punctuation">.</span>txt


ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>hotfix<span class="token punctuation">)</span>
$ git commit <span class="token operator">-</span>m <span class="token string">&quot;hotfix first&quot;</span> hello<span class="token punctuation">.</span>txt
<span class="token punctuation">[</span>hotfix <span class="token number">43e30</span>b9<span class="token punctuation">]</span> hotfix first
 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">deletion</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在“hotfix”分支下，可通过“git reflog”查看提交版本，会发现“HEAD”指向“hotfix”且处于第一个版本。切换分支以及修改分支的内容就讲到这里。其实还是指针</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>hotfix<span class="token punctuation">)</span>
$ git reflog
<span class="token number">43e30</span>b9 <span class="token punctuation">(</span>HEAD <span class="token operator">-&gt;</span> hotfix<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> hotfix first
<span class="token number">08</span>c7884 <span class="token punctuation">(</span>master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from master to hotfix
<span class="token number">08</span>c7884 <span class="token punctuation">(</span>master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">:</span> reset<span class="token operator">:</span> moving to <span class="token number">08</span>c7884
<span class="token number">2</span>a154a6 HEAD@<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> three
<span class="token number">08</span>c7884 <span class="token punctuation">(</span>master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">:</span> commit<span class="token operator">:</span> second
<span class="token number">3</span>c068a0 HEAD@<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token function">commit</span> <span class="token punctuation">(</span>initial<span class="token punctuation">)</span><span class="token operator">:</span> first

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-5-合并分支" tabindex="-1"><a class="header-anchor" href="#_4-3-5-合并分支" aria-hidden="true">#</a> 4.3.5 合并分支</h3><ul><li><p><mark>分支切换与合并</mark></p></li><li><p>此前创建了“hot fix”分支并进行了相应修改，接下来将 Git 切换回“master”分支。切换操作很简单，使用“git checkout master”命令，此时会发现显示框已变为“master”，表明当前处于“master”分支下。查看“hello.txt”文件，会发现“2”和“3”的数量又变回 10 个，这是因为指针重新指回了“master”分支。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>hotfix<span class="token punctuation">)</span>
$ git checkout master
Switched to branch <span class="token char">&#39;master&#39;</span>

ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ cat hello<span class="token punctuation">.</span>txt
hello ni hao

hello ni hao

hello ni hao

<span class="token number">222222</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>此时演示分支合并的问题，这一点很重要。合并分支的命令较为简单，即“git merge”加上分支名。其含义是将指定分支合并到当前分支。若要将“hot fix”分支合并到“master”分支，需先处于“master”分支，然后进行合并操作。具体命令为“git merge hotfix”，操作后会有提示显示合并成功，一个文件被修改，两行新增、两行删除，表明修改了两行。此时查看“master”分支下文件的状态，例如使用“cat”命令，会发现“2”和“3”的数量从 10 个变回 5 个，这是因为从“hot fix”分支合并过来的</p></li><li><p>结果，此次合并未产生代码冲突，属于正常合并(因为我们在创建hotfix分支之后，master分支的东西没有进行修改，所以我们仅仅是保持了master的不动，然后去hotfix去修改了然后将hotfix给合并到master里面即正常合并未发生代码冲突)。关于合并分支的内容暂时讲解到这里。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git merge hotfix
Updating <span class="token number">08</span>c7884<span class="token punctuation">.</span><span class="token number">.43e30</span>b9
Fast<span class="token operator">-</span>forward
 hello<span class="token punctuation">.</span>txt <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">++</span><span class="token operator">+</span><span class="token operator">-</span>
 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">deletion</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>


ZhangBen@DESKTOP<span class="token operator">-</span>AV9JCJ6 MINGW64 <span class="token operator">/</span>z<span class="token operator">/</span><span class="token function">gitdemo</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ cat hello<span class="token punctuation">.</span>txt
hello ni hao

hello ni hao

hello ni hao

<span class="token number">222222</span>

git hotfix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-6-产生冲突" tabindex="-1"><a class="header-anchor" href="#_4-3-6-产生冲突" aria-hidden="true">#</a> 4.3.6 产生冲突</h3><ul><li><p><mark>代码冲突与手动合并分支</mark></p></li><li><p>在正常合并之后，为大家演示企业中常见的代码冲突及合并情况。首先需明白，何时会产生冲突？即当两个分支对同一个文件的同一位置做出了完全不同的修改，且 Git 无法决定采用哪一个时，就会报代码冲突，此时需要人为决定代码的取舍。</p></li><li><p>例如，先在“master”分支上修改“hello.txt”文件，在倒数第二行加入“master test”，保存后将修改添加暂存区并提交本地库，版本信息为“master test”。然后切换到“hot fix”分支，此时的“hot fix”分支的倒数第二行其实是没有“master test”这些的；在倒数第一行加入“hot fix test”，同样保存、添加暂存区并提交本地库。之后切换回“master”分支，在“master”分支基础上合并“hot fix”分支，执行“git merge hot fix”命令时会报冲突，提示自动合并失败，因为在“hello.txt”文件中产生了代码冲突，且状态显示正在合并中。此时查看本地库状态，会告知“hello.txt”未合并成功，因为两个分支都对其进行了修改，Git 无法自动处理。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Layne@LAPTOP<span class="token operator">-</span>Layne MINGW64 <span class="token operator">/</span>d<span class="token operator">/</span>Git<span class="token operator">-</span>Space<span class="token operator">/</span><span class="token function">SH0720</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
$ git merge hot<span class="token operator">-</span>fix
Auto<span class="token operator">-</span>merging hello<span class="token punctuation">.</span>txt
<span class="token function">CONFLICT</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token operator">:</span> Merge conflict in hello<span class="token punctuation">.</span>txt
Automatic merge failed<span class="token punctuation">;</span> fix conflicts <span class="token operator">and</span> then commit the result<span class="token punctuation">.</span>


冲突产生的表现：后面状态为 MERGING
Layne@LAPTOP<span class="token operator">-</span>Layne MINGW64 <span class="token operator">/</span>d<span class="token operator">/</span>Git<span class="token operator">-</span>Space<span class="token operator">/</span><span class="token function">SH0720</span> <span class="token punctuation">(</span>master<span class="token operator">|</span>MERGING<span class="token punctuation">)</span>


Layne@LAPTOP<span class="token operator">-</span>Layne MINGW64 <span class="token operator">/</span>d<span class="token operator">/</span>Git<span class="token operator">-</span>Space<span class="token operator">/</span><span class="token function">SH0720</span> <span class="token punctuation">(</span>master<span class="token operator">|</span>MERGING<span class="token punctuation">)</span>
$ git status
On branch master
You have unmerged paths<span class="token punctuation">.</span>
 <span class="token punctuation">(</span>fix conflicts <span class="token operator">and</span> run <span class="token string">&quot;git commit&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">(</span>use <span class="token string">&quot;git merge --abort&quot;</span> to abort the merge<span class="token punctuation">)</span>
Unmerged paths<span class="token operator">:</span>
 <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution<span class="token punctuation">)</span>
 both modified<span class="token operator">:</span> hello<span class="token punctuation">.</span>txt
no changes added to <span class="token function">commit</span> <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>手动合并代码时，打开文件&quot;cat hello.txt&quot;，会通过特殊符号标记冲突部分。<code>“&lt;HEAD&gt;”</code>与“=”之间是当前分支的代码，“=”与“&gt;hot fix”之间是要合并的代码。手动保留需要的部分，删除不需要的部分及特殊符号，保证文件行数不变，保存。保存后将修改添加到暂存区，提交本地库。注意此时提交不能带文件名，否则会报错。成功合并后，“master”分支已完整合并“hot fix”，查看“hello.txt”可验证。且合并只会修改合并的“master”分支的内容，切换回“hot fix”分支，其内容未变。</p></li><li><p>最后，关于 Git 合并分支，其底层也是指针操作。最初只有“master”分支且有 4 个版本，之后从“master”分支创建“hot fix”分支并进行修改。合并分支实际是分支切换，即将“HEAD”指针指向“hot fix”分支，“master”分支和“hot fix”分支本质都是指向具体版本的指针，当前所在分支由“HEAD”指针决定。之前通过三个文件为大家演示过，“HEAD”文件指向分支内容，若“HEAD”指向“hot fix”，则可找到其对应的版本。关于分支的内容就讲到这里。</p></li><li><p>所以 合并冲突的 解决办法是 自己打开具体的文件 然后 自己手动 决定如何修改？？？</p></li><li><p>所以尽量还是不能进行 分支冲突，不然 超级麻烦，即 尽量 不要 同时多个 分支 修改 同一个文件 就行了；；</p></li></ul>`,32);function x(_,G){const a=i("router-link");return p(),l("div",null,[v,h,c(" more "),b,n("nav",g,[n("ul",null,[n("li",null,[e(a,{to:"#概述框架"},{default:t(()=>[s("概述框架")]),_:1})]),n("li",null,[e(a,{to:"#d-第4章git分支操作-1"},{default:t(()=>[s("D-第4章Git分支操作")]),_:1})]),n("li",null,[e(a,{to:"#_4-1-什么是分支"},{default:t(()=>[s("4.1 什么是分支")]),_:1})]),n("li",null,[e(a,{to:"#_4-2-使用分支的好处"},{default:t(()=>[s("4.2 使用分支的好处")]),_:1})]),n("li",null,[e(a,{to:"#_4-3-分支的操作"},{default:t(()=>[s("4.3 分支的操作")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#_4-3-1-查看分支"},{default:t(()=>[s("4.3.1 查看分支")]),_:1})]),n("li",null,[e(a,{to:"#_4-3-2-创建分支"},{default:t(()=>[s("4.3.2 创建分支")]),_:1})]),n("li",null,[e(a,{to:"#_4-3-3-修改分支4-3-4-切换分支"},{default:t(()=>[s("4.3.3 修改分支4.3.4 切换分支")]),_:1})]),n("li",null,[e(a,{to:"#_4-3-5-合并分支"},{default:t(()=>[s("4.3.5 合并分支")]),_:1})]),n("li",null,[e(a,{to:"#_4-3-6-产生冲突"},{default:t(()=>[s("4.3.6 产生冲突")]),_:1})])])])])]),f])}const A=o(k,[["render",x],["__file","D-第4章Git分支操作.html.vue"]]);export{A as default};
