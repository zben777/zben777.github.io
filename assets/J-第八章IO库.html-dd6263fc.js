import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as l,d as u,a as n,e as t,w as p,b as s,f as e}from"./app-2a2d189a.js";const r="/assets/table8-1-e3aa2bf7.png",d="/assets/table8-2-8c245862.png",k="/assets/table8-3-75be8d0b.png",m="/assets/table8-4-3ba1a3be.png",v="/assets/table8-5-6ee0dae7.png",b={},g=n("h1",{id:"j-第八章io库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#j-第八章io库","aria-hidden":"true"},"#"),s(" J-第八章IO库")],-1),f=n("p",null,"J-第八章IO库",-1),h=e('<div class="hint-container info"><p class="hint-container-title">说明</p><p>主要是各种搜索找的学习；<br><strong>百度链接：</strong><br> :<br> :</p><p><strong>知乎链接：</strong><br> :<br> :</p><p><strong>B站链接：</strong><br> ：<br> ：</p><p><strong>博客链接：</strong><br> ：<br> ：</p><p><strong>GitHub链接：</strong><br> ：<br> ：</p></div>',1),w={class:"table-of-contents"},y=e('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="第8章-io库" tabindex="-1"><a class="header-anchor" href="#第8章-io库" aria-hidden="true">#</a> 第8章　IO库</h2><ul><li><p>C++语言不直接处理输入输出，而是通过一族定义在标准库中的类<br> 型来处理IO。这些类型支持从设备读取数据、向设备写入数据的IO操<br> 作，设备可以是文件、控制台窗口等。还有一些类型允许内存IO，即，<br> 从string读取数据，向string写入数据。</p></li><li><p>IO库定义了读写内置类型值的操作。此外，一些类，如string，通<br> 常也会定义类似的IO操作，来读写自己的对象。</p></li><li><p>本章介绍IO库的基本内容。后续章节会介绍更多IO库的功能：第14<br> 章将会介绍如何编写自己的输入输出运算符，第17章将会介绍如何控制<br> 输出格式以及如何对文件进行随机访问。</p></li><li><p>我们的程序已经使用了很多IO库设施了。我们在1.2节（第5页）已<br> 经介绍了大部分IO库设施：<br> · istream（输入流）类型，提供输入操作。<br> · ostream（输出流）类型，提供输出操作。<br> · cin，一个istream对象，从标准输入读取数据。<br> · cout，一个ostream对象，向标准输出写入数据。<br> · cerr，一个ostream对象，通常用于输出程序错误消息，写入到标准错误。<br> · &gt;&gt;运算符，用来从一个istream对象读取输入数据。<br> · &lt;&lt;运算符，用来向一个ostream对象写入输出数据。<br> · getline函数（参见3.3.2节，第78页）从一个给定的istream读取一行数据，存入一个给定的string对象中。</p></li></ul><h2 id="_8-1-io类" tabindex="-1"><a class="header-anchor" href="#_8-1-io类" aria-hidden="true">#</a> 8.1 IO类</h2><ul><li><p>到目前为止，我们已经使用过的IO类型和对象都是操纵char数据<br> 的。默认情况下，这些对象都是关联到用户的控制台窗口的。当然，我<br> 们不能限制实际应用程序仅从控制台窗口进行IO操作，应用程序常常需<br> 要读写命名文件。而且，使用IO操作处理string中的字符会很方便。此<br> 外，应用程序还可能读写需要宽字符支持的语言。</p></li><li><p>为了支持这些不同种类的IO处理操作，在istream和ostream之外，标<br> 准库还定义了其他一些IO类型，我们之前都已经使用过了。表8.1列出<br> 了这些类型，分别定义在三个独立的头文件中：iostream定义了用于读<br> 写流的基本类型，fstream定义了读写命名文件的类型，sstream定义了读<br> 写内存string对象的类型。<br><img src="'+r+`" alt="table8-1" loading="lazy"></p></li><li><p>为了支持使用宽字符的语言，标准库定义了一组类型和对象来操纵<br> wchar_t类型的数据（参见2.1.1节，第30页）。宽字符版本的类型和函<br> 数的名字以一个w开始。例如，wcin、wcout和wcerr是分别对应cin、<br> cout和cerr的宽字符版对象。宽字符版本的类型和对象与其对应的普通<br> char版本的类型定义在同一个头文件中。例如，头文件fstream定义了<br> ifstream和wifstream类型。</p></li></ul><br><ul><li><p><mark>IO类型间的关系</mark></p></li><li><p>概念上，设备类型和字符大小都不会影响我们要执行的IO操作。例<br> 如，我们可以用&gt;&gt;读取数据，而不用管是从一个控制台窗口，一个磁盘<br> 文件，还是一个string读取。类似的，我们也不用管读取的字符能存入<br> 一个char对象内，还是需要一个wchar_t对象来存储。</p></li><li><p>标准库使我们能忽略这些不同类型的流之间的差异，这是通过继承<br> 机制（inheritance）实现的。利用模板（参见3.3节，第87页），我们可<br> 以使用具有继承关系的类，而不必了解继承机制如何工作的细节。我们<br> 将在第15章和18.3节（第710页）介绍C++是如何支持继承机制的。</p></li><li><p>简单地说，继承机制使我们可以声明一个特定的类继承自另一个<br> 类。我们通常可以将一个派生类（继承类）对象当作其基类（所继承的<br> 类）对象来使用。</p></li><li><p>类型ifstream和istringstream都继承自istream。因此，我们可以像使<br> 用istream对象一样来使用ifstream和istringstream对象。也就是说，我们<br> 是如何使用cin的，就可以同样地使用这些类型的对象。例如，可以对<br> 一个ifstream或istringstream对象调用getline，也可以使用&gt;&gt;从一个<br> ifstream或istringstream对象中读取数据。类似的，类型ofstream和<br> ostringstream都继承自ostream。因此，我们是如何使用cout的，就可以<br> 同样地使用这些类型的对象。</p></li><li><p><mark>本节剩下部分所介绍的标准库流特性都可以无差别地应用于普通流、文件流和<br> string流，以及char或宽字符流版本。</mark></p></li></ul><h3 id="_8-1-1-io对象无拷贝或赋值" tabindex="-1"><a class="header-anchor" href="#_8-1-1-io对象无拷贝或赋值" aria-hidden="true">#</a> 8.1.1 IO对象无拷贝或赋值</h3><ul><li>如我们在7.1.3节（第234页）所见，我们不能拷贝或对IO对象赋值:</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ofstream out1<span class="token punctuation">,</span> out2<span class="token punctuation">;</span>
out1 <span class="token operator">=</span> out2<span class="token punctuation">;</span> <span class="token comment">// error: cannot assign stream objects</span>
ofstream <span class="token function">print</span><span class="token punctuation">(</span>ofstream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: can&#39;t initialize the ofstream parameter</span>
out2 <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span>out2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: cannot copy stream objects</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于不能拷贝IO对象，因此我们也不能将形参或返回类型设置为流<br> 类型（参见6.2.1节，第188页）。进行IO操作的函数通常以引用方式传<br> 递和返回流。读写一个IO对象会改变其状态，因此传递和返回的引用不<br> 能是const的。</li></ul><h3 id="_8-1-2-条件状态" tabindex="-1"><a class="header-anchor" href="#_8-1-2-条件状态" aria-hidden="true">#</a> 8.1.2　条件状态</h3><ul><li><p>IO操作一个与生俱来的问题是可能发生错误。一些错误是可恢复<br> 的，而其他错误则发生在系统深处，已经超出了应用程序可以修正的范<br> 围。表8.2列出了IO类所定义的一些函数和标志，可以帮助我们访问和<br> 操纵流的条件状态（condition state）。<br><img src="`+d+`" alt="table8-2" loading="lazy"></p></li><li><p>下面是一个IO错误的例子：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> ival<span class="token punctuation">;</span>
cin <span class="token operator">&gt;&gt;</span> ival<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果我们在标准输入上键入Boo，读操作就会失败。代码中的输入<br> 运算符期待读取一个int，但却得到了一个字符B。这样，cin会进入错误<br> 状态。类似的，如果我们输入一个文件结束标识，cin也会进入错误状态。</p></li><li><p>一个流一旦发生错误，其上后续的IO操作都会失败。只有当一个流<br> 处于无错状态时，我们才可以从它读取数据，向它写入数据。由于流可<br> 能处于错误状态，因此代码通常应该在使用一个流之前检查它是否处于<br> 良好状态。确定一个流对象的状态的最简单的方法是将它当作一个条件<br> 来使用：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> word<span class="token punctuation">)</span>
 <span class="token comment">// ok: read operation successful . . .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>while循环检查&gt;&gt;表达式返回的流的状态。如果输入操作成功，流<br> 保持有效状态，则条件为真。</li></ul><br><ul><li><p><mark>查询流的状态</mark></p></li><li><p>将流作为条件使用，只能告诉我们流是否有效，而无法告诉我们具<br> 体发生了什么。有时我们也需要知道流为什么失败。例如，在键入文件<br> 结束标识后我们的应对措施，可能与遇到一个IO设备错误的处理方式是<br> 不同的。</p></li><li><p>IO库定义了一个与机器无关的iostate类型，它提供了表达流状态的<br> 完整功能。这个类型应作为一个位集合来使用，使用方式与我们在4.8<br> 节中（第137页）使用quiz1的方式一样。IO库定义了4个iostate类型的<br> constexpr值（参见2.4.4节，第58页），表示特定的位模式。这些值用来<br> 表示特定类型的IO条件，可以与位运算符（参见4.8节，第137页）一起<br> 使用来一次性检测或设置多个标志位。</p></li><li><p>badbit表示系统级错误，如不可恢复的读写错误。通常情况下，一<br> 旦badbit被置位，流就无法再使用了。在发生可恢复错误后，failbit被置<br> 位，如期望读取数值却读出一个字符等错误。这种问题通常是可以修正<br> 的，流还可以继续使用。如果到达文件结束位置，eofbit和failbit都会被<br> 置位。goodbit的值为0，表示流未发生错误。如果badbit、failbit和eofbit<br> 任一个被置位，则检测流状态的条件会失败。</p></li><li><p>标准库还定义了一组函数来查询这些标志位的状态。操作good在所<br> 有错误位均未置位的情况下返回true，而bad、fail和eof则在对应错误位<br> 被置位时返回true。此外，在badbit被置位时，fail也会返回true。这意味<br> 着，使用good或fail是确定流的总体状态的正确方法。实际上，我们将<br> 流当作条件使用的代码就等价于！fail（）。而eof和bad操作只能表示特<br> 定的错误。</p></li></ul><br><ul><li><p><mark>管理条件状态</mark></p></li><li><p>流对象的rdstate成员返回一个iostate值，对应流的当前状态。<br> setstate操作将给定条件位置位，表示发生了对应错误。clear成员是一个<br> 重载的成员（参见6.4节，第206页）：它有一个不接受参数的版本，而<br> 另一个版本接受一个iostate类型的参数。</p></li><li><p>clear不接受参数的版本清除（复位）所有错误标志位。执行<br> clear（）后，调用good会返回true。我们可以这样使用这些成员：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token comment">// remember the current state of cin</span>
<span class="token keyword">auto</span> old_state <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">rdstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// remember the current state of cin</span>
cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// make cin valid</span>
<span class="token function">process_input</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use cin</span>
cin<span class="token punctuation">.</span><span class="token function">setstate</span><span class="token punctuation">(</span>old_state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// now reset cin to its old state</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>带参数的clear版本接受一个iostate值，表示流的新状态。为了复位<br> 单一的条件状态位，我们首先用rdstate读出当前条件状态，然后用位操<br> 作将所需位复位来生成新的状态。例如，下面的代码将failbit和badbit复<br> 位，但保持eofbit不变：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// turns off failbit and badbit but all other bits unchanged</span>
cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">rdstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>cin<span class="token punctuation">.</span>failbit <span class="token operator">&amp;</span> <span class="token operator">~</span>cin<span class="token punctuation">.</span>badbit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-2节练习" tabindex="-1"><a class="header-anchor" href="#_8-1-2节练习" aria-hidden="true">#</a> 8.1.2节练习</h3><ul><li>练习8.1：编写函数，接受一个istream&amp;参数，返回值类型也是istream&amp;。<br> 此函数须从给定流中读取数据，直至遇到文件结束标识时停止。它将读取的数据打印在标准输出上。<br> 完成这些操作后，在返回流之前，对流进行复位，使其处于有效状态。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">&gt;&gt;</span> buf<span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    is<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.2：测试函数，调用参数为cin。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istream<span class="token punctuation">;</span>

istream<span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">&gt;&gt;</span> buf<span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    is<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    istream<span class="token operator">&amp;</span> is <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> is<span class="token punctuation">.</span><span class="token function">rdstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.3：什么情况下，下面的while循环会终止？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token comment">/* ... */</span>

如\`badbit\`、\`failbit\`、\`eofbit\` 的任一个被置位，那么检测流状态的条件会失败。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-3-管理输出缓冲" tabindex="-1"><a class="header-anchor" href="#_8-1-3-管理输出缓冲" aria-hidden="true">#</a> 8.1.3　管理输出缓冲</h3><ul><li><p>每个输出流都管理一个缓冲区，用来保存程序读写的数据。例如，<br> 如果执行下面的代码<code>os &lt;&lt; &quot;please enter a value: &quot;;</code></p></li><li><p>文本串可能立即打印出来，但也有可能被操作系统保存在缓冲区<br> 中，随后再打印。有了缓冲机制，操作系统就可以将程序的多个输出操<br> 作组合成单一的系统级写操作。由于设备的写操作可能很耗时，允许操<br> 作系统将多个输出操作组合为单一的设备写操作可以带来很大的性能提升。</p></li><li><p>导致缓冲刷新（即，数据真正写到输出设备或文件）的原因有很多：</p><ul><li>程序正常结束，作为main函数的return操作的一部分，缓冲刷新被执行。</li><li>缓冲区满时，需要刷新缓冲，而后新的数据才能继续写入缓冲区。</li><li>我们可以使用操纵符如endl（参见1.2节，第6页）来显式刷新缓冲区。</li><li>在每个输出操作之后，我们可以用操纵符unitbuf设置流的内部状态，来清空缓冲区。默认情况下，对cerr是设置unitbuf的，因此写到cerr的内容都是立即刷新的。</li><li>一个输出流可能被关联到另一个流。在这种情况下，当读写被关联的流时，关联到的流的缓冲区会被刷新。例如，默认情况下，cin和cerr都关联到cout。因此，读cin或写cerr都会导致cout的缓冲区被刷新。刷新输出缓冲区</li></ul></li><li><p>我们已经使用过操纵符endl，它完成换行并刷新缓冲区的工作。IO<br> 库中还有两个类似的操纵符：flush和ends。flush刷新缓冲区，但不输出<br> 任何额外的字符；ends向缓冲区插入一个空字符，然后刷新缓冲区：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hi!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// writes hi and a newline, then flushes the buffer</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hi!&quot;</span> <span class="token operator">&lt;&lt;</span> flush<span class="token punctuation">;</span> <span class="token comment">// writes hi, then flushes the buffer; adds no data</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hi!&quot;</span> <span class="token operator">&lt;&lt;</span> ends<span class="token punctuation">;</span> <span class="token comment">// writes hi and a null, then flushes the buffer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li><mark>unitbuf操纵符</mark></li><li>如果想在每次输出操作后都刷新缓冲区，我们可以使用unitbuf操纵<br> 符。它告诉流在接下来的每次写操作之后都进行一次flush操作。而<br> nounitbuf操纵符则重置流，使其恢复使用正常的系统管理的缓冲区刷新机制：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout <span class="token operator">&lt;&lt;</span> unitbuf<span class="token punctuation">;</span> <span class="token comment">// all writes will be flushed immediately</span>
<span class="token comment">// any output is flushed immediately, no buffering</span>
cout <span class="token operator">&lt;&lt;</span> nounitbuf<span class="token punctuation">;</span> <span class="token comment">// returns to normal buffering</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><mark>警告：如果程序崩溃，输出缓冲区不会被刷新</mark></p></li><li><p>如果程序异常终止，输出缓冲区是不会被刷新的。当一个程序崩溃后，它所输出<br> 的数据很可能停留在输出缓冲区中等待打印。</p></li><li><p>当调试一个已经崩溃的程序时，需要确认那些你认为已经输出的数据确实已经刷<br> 新了。否则，可能将大量时间浪费在追踪代码为什么没有执行上，而实际上代码已经<br> 执行了，只是程序崩溃后缓冲区没有被刷新，输出数据被挂起没有打印而已。</p></li></ul><br><ul><li><p><mark>关联输入和输出流</mark></p></li><li><p>当一个输入流被关联到一个输出流时，任何试图从输入流读取数据<br> 的操作都会先刷新关联的输出流。标准库将cout和cin关联在一起，因此<br> 下面语句<code>cin &gt;&gt; ival;</code>导致cout的缓冲区被刷新。</p></li><li><p><mark>交互式系统通常应该关联输入流和输出流。这意味着所有输出，包括用户提示信<br> 息，都会在读操作之前被打印出来。</mark></p></li><li><p>tie有两个重载的版本（参见6.4节，第206页）：一个版本不带参<br> 数，返回指向输出流的指针。如果本对象当前关联到一个输出流，则返<br> 回的就是指向这个流的指针，如果对象未关联到流，则返回空指针。tie<br> 的第二个版本接受一个指向ostream的指针，将自己关联到此ostream。<br> 即，x.tie（&amp;o）将流x关联到输出流o。</p></li><li><p>我们既可以将一个istream对象关联到另一个ostream，也可以将一个<br> ostream关联到另一个ostream：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// illustration only: the library ties cin and cout for us</span>
<span class="token comment">// old_tie points to the stream (if any) currently tied to cin</span>
ostream <span class="token operator">*</span>old_tie <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cin is no longer tied</span>
<span class="token comment">// ties cin and cerr; not a good idea because cin should be tied to cout</span>
cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cerr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reading cin flushes cerr, not cout</span>
cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span>old_tie<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reestablish normal tie between cin and cout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这段代码中，为了将一个给定的流关联到一个新的输出流，我们<br> 将新流的指针传递给了tie。为了彻底解开流的关联，我们传递了一个空<br> 指针。每个流同时最多关联到一个流，但多个流可以同时关联到同一个ostream。</li></ul><h2 id="_8-2-文件输入输出" tabindex="-1"><a class="header-anchor" href="#_8-2-文件输入输出" aria-hidden="true">#</a> 8.2　文件输入输出</h2><ul><li><p>头文件fstream定义了三个类型来支持文件IO：ifstream从一个给定<br> 文件读取数据，ofstream向一个给定文件写入数据，以及fstream可以读<br> 写给定文件。在17.5.3节中（第676页）我们将介绍如何对同一个文件流<br> 既读又写。</p></li><li><p>这些类型提供的操作与我们之前已经使用过的对象cin和cout的操作<br> 一样。特别是，我们可以用IO运算符（&lt;&lt;和&gt;&gt;）来读写文件，可以用<br> getline（参见3.2.2节，第79页）从一个ifstream读取数据，包括8.1节中<br> （第278页）介绍的内容也都适用于这些类型。</p></li><li><p>除了继承自iostream类型的行为之外，fstream中定义的类型还增加<br> 了一些新的成员来管理与流关联的文件。在表8.3中列出了这些操作，<br> 我们可以对fstream、ifstream和ofstream对象调用这些操作，但不能对其<br> 他IO类型调用这些操作。<br><img src="`+k+`" alt="table8-3" loading="lazy"></p></li></ul><h3 id="_8-2-1-使用文件流对象" tabindex="-1"><a class="header-anchor" href="#_8-2-1-使用文件流对象" aria-hidden="true">#</a> 8.2.1　使用文件流对象</h3><ul><li><p>当我们想要读写一个文件时，可以定义一个文件流对象，并将对象<br> 与文件关联起来。每个文件流类都定义了一个名为open的成员函数，它<br> 完成一些系统相关的操作，来定位给定的文件，并视情况打开为读或写模式。</p></li><li><p>创建文件流对象时，我们可以提供文件名（可选的）。如果提供了<br> 一个文件名，则open会自动被调用：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ifstream <span class="token function">in</span><span class="token punctuation">(</span>ifile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// construct an ifstream and open the given file</span>
ofstream out<span class="token punctuation">;</span> <span class="token comment">// output file stream that is not associated with any file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这段代码定义了一个输入流in，它被初始化为从文件读取数据，文<br> 件名由string类型的参数ifile指定。第二条语句定义了一个输出流out，未<br> 与任何文件关联。在新C++标准中，文件名既可以是库类型string对象，<br> 也可以是C风格字符数组（参见3.5.4节，第109页）。旧版本的标准库只<br> 允许C风格字符数组。</li></ul><br><ul><li><p><mark>用fstream代替iostream&amp;</mark></p></li><li><p>我们在8.1节（第279页）已经提到过，在要求使用基类型对象的地<br> 方，我们可以用继承类型的对象来替代。这意味着，接受一个iostream<br> 类型引用（或指针）参数的函数，可以用一个对应的fstream（或<br> sstream）类型来调用。也就是说，如果有一个函数接受一个ostream&amp;参<br> 数，我们在调用这个函数时，可以传递给它一个ofstream对象，对<br> istream&amp;和ifstream也是类似的。</p></li><li><p>例如，我们可以用7.1.3节中的read和print函数来读写命名文件。在<br> 本例中，我们假定输入和输出文件的名字是通过传递给main函数的参数<br> 来指定的（参见6.2.5节，第196页）：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// open the file of sales transactions</span>
ofstream <span class="token function">output</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// open the output file</span>
Sales_data total<span class="token punctuation">;</span> <span class="token comment">// variable to hold the running sum</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read the first transaction</span>
    Sales_data trans<span class="token punctuation">;</span> <span class="token comment">// variable to hold data for the next transaction</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read the remaining transactions</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// check isbns</span>
            total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update the running total</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// print the results</span>
            total <span class="token operator">=</span> trans<span class="token punctuation">;</span> <span class="token comment">// process the next book</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// print the last transaction</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment">// there was no input</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>除了读写的是命名文件外，这段程序与229页的加法程序几乎是完<br> 全相同的。重要的部分是对read和print的调用。虽然两个函数定义时指<br> 定的形参分别是istream&amp;和ostream&amp;，但我们可以向它们传递fstream对象。</li></ul><br><ul><li><mark>成员函数open和close</mark></li><li>如果我们定义了一个空文件流对象，可以随后调用open来将它与文<br> 件关联起来：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ifstream <span class="token function">in</span><span class="token punctuation">(</span>ifile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// construct an ifstreamand open the given file</span>
ofstream out<span class="token punctuation">;</span> <span class="token comment">// output file stream that is not associated with any file</span>
out<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>ifile <span class="token operator">+</span> <span class="token string">&quot;.copy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// open the specified file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果调用open失败，failbit会被置位（参见8.1.2节，第280页）。因<br> 为调用open可能失败，进行open是否成功的检测通常是一个好习惯：<br><code>if (out) // check that the open succeeded</code><br><code> // the open succeeded, so we can use the file</code></p></li><li><p>这个条件判断与我们之前将cin用作条件相似。如果open失败，条件<br> 会为假，我们就不会去使用out了。</p></li><li><p>一旦一个文件流已经打开，它就保持与对应文件的关联。实际上，<br> 对一个已经打开的文件流调用open会失败，并会导致failbit被置位。随<br> 后的试图使用文件流的操作都会失败。为了将文件流关联到另外一个文<br> 件，必须首先关闭已经关联的文件。一旦文件成功关闭，我们可以打开<br> 新的文件：如果open成功，则open会设置流的状态，使得good（）为true。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// close the file</span>
in<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>ifile <span class="token operator">+</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// open another file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li><p><mark>自动构造和析构</mark></p></li><li><p>考虑这样一个程序，它的main函数接受一个要处理的文件列表（参<br> 见6.2.5节，第196页）。这种程序可能会有如下的循环：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// for each file passed to the program</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> argv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> argv <span class="token operator">+</span> argc<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ifstream <span class="token function">input</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create input and open the file</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// if the file is ok, &#39;&#39;process&#39;&#39; this file</span>
        <span class="token function">process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;couldn&#39;t open: &quot;</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// input goes out of scope and is destroyed on each iteration</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>每个循环步构造一个新的名为input的ifstream对象，并打开它来读<br> 取给定的文件。像之前一样，我们检查open是否成功。如果成功，将文<br> 件传递给一个函数，该函数负责读取并处理输入数据。如果open失败，<br> 打印一条错误信息并继续处理下一个文件。</p></li><li><p>因为input是while循环的局部变量，它在每个循环步中都要创建和<br> 销毁一次（参见5.4.1节，第165页）。当一个fstream对象离开其作用域<br> 时，与之关联的文件会自动关闭。在下一步循环中，input会再次被创建。</p></li><li><p><mark>当一个fstream对象被销毁时，close会自动被调用。</mark></p></li></ul><h3 id="_8-2-1节练习" tabindex="-1"><a class="header-anchor" href="#_8-2-1节练习" aria-hidden="true">#</a> 8.2.1节练习</h3><ul><li>练习8.4：编写函数，以读模式打开一个文件，将其内容读入到一个<br> string的vector中，将每一行作为一个独立的元素存于vector中。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">ReadFileToVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> fileName<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        string buf<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.5：重写上面的程序，将每个单词作为一个独立的元素进行存储。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">ReadFileToVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> fileName<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        string buf<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>ifs <span class="token operator">&gt;&gt;</span> buf<span class="token punctuation">)</span>
            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.6：重写7.1.1节的书店程序（第229页），从一个文件中读取交易<br> 记录。将文件名作为一个参数传递给main（参见6.2.5节，第196页）。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../ch07/ex7_26.h&quot;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    Sales_data total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sales_data trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-2-文件模式" tabindex="-1"><a class="header-anchor" href="#_8-2-2-文件模式" aria-hidden="true">#</a> 8.2.2　文件模式</h3><ul><li><p>每个流都有一个关联的文件模式（file mode），用来指出如何使用<br> 文件。表8.4列出了文件模式和它们的含义。<br><img src="`+m+`" alt="table8-4" loading="lazy"></p></li><li><p>无论用哪种方式打开文件，我们都可以指定文件模式，调用open打开文件时可以，用一个文件名初始化流来隐式打开文件时也可以。指定文件模式有如下限制：</p><ul><li>只可以对ofstream或fstream对象设定out模式。</li><li>只可以对ifstream或fstream对象设定in模式。</li><li>只有当out也被设定时才可设定trunc模式。</li><li>只要trunc没被设定，就可以设定app模式。在app模式下，即使没有显式指定out模式，文件也总是以输出方式被打开。</li><li>默认情况下，即使我们没有指定trunc，以out模式打开的文件也会<br> 被截断。为了保留以out模式打开的文件的内容，我们必须同时指定app<br> 模式，这样只会将数据追加写到文件末尾；或者同时指定in模式，即打<br> 开文件同时进行读写操作（参见17.5.3节，第676页，将介绍对同一个文<br> 件既进行输入又进行输出的方法）。</li><li>ate和binary模式可用于任何类型的文件流对象，且可以与其他任<br> 何文件模式组合使用。</li></ul></li><li><p>每个文件流类型都定义了一个默认的文件模式，当我们未指定文件<br> 模式时，就使用此默认模式。与ifstream关联的文件默认以in模式打开；<br> 与ofstream关联的文件默认以out模式打开；与fstream关联的文件默认以<br> in和out模式打开。</p></li></ul><br><ul><li><mark>以out模式打开文件会丢弃已有数据</mark></li><li>默认情况下，当我们打开一个ofstream时，文件的内容会被丢弃。<br> 阻止一个ofstream清空给定文件内容的方法是同时指定app模式:</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// file1 is truncated in each of these cases</span>
ofstream <span class="token function">out</span><span class="token punctuation">(</span><span class="token string">&quot;file1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// out and trunc are implicit</span>
ofstream <span class="token function">out2</span><span class="token punctuation">(</span><span class="token string">&quot;file1&quot;</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// trunc is implicit</span>
ofstream <span class="token function">out3</span><span class="token punctuation">(</span><span class="token string">&quot;file1&quot;</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ofstream<span class="token double-colon punctuation">::</span>trunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// to preserve the file&#39;s contents, we must explicitly specify app mode</span>
ofstream <span class="token function">app</span><span class="token punctuation">(</span><span class="token string">&quot;file2&quot;</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// out is implicit</span>
ofstream <span class="token function">app2</span><span class="token punctuation">(</span><span class="token string">&quot;file2&quot;</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ofstream<span class="token double-colon punctuation">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>保留被ofstream打开的文件中已有数据的唯一方法是显式指定app或in模式。</mark></li></ul><br><ul><li><mark>每次调用open时都会确定文件模式</mark></li><li>对于一个给定流，每当打开文件时，都可以改变其文件模式。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ofstream out<span class="token punctuation">;</span> <span class="token comment">// no file mode is set</span>
out<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;scratchpad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mode implicitly out and trunc</span>
out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// close out so we can use it for a different file</span>
out<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;precious&quot;</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mode is out and app</span>
out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第一个open调用未显式指定输出模式，文件隐式地以out模式打<br> 开。通常情况下，out模式意味着同时使用trunc模式。因此，当前目录<br> 下名为scratchpad的文件的内容将被清空。当打开名为precious的文件<br> 时，我们指定了append模式。文件中已有的数据都得以保留，所有写操<br> 作都在文件末尾进行。</p></li><li><p><mark>在每次打开文件时，都要设置文件模式，可能是显式地设置，也可能是隐式地设<br> 置。当程序未指定模式时，就使用默认值。</mark></p></li></ul><h3 id="_8-2-2节练习" tabindex="-1"><a class="header-anchor" href="#_8-2-2节练习" aria-hidden="true">#</a> 8.2.2节练习</h3><ul><li>练习8.7：修改上一节的书店程序，将结果保存到一个文件中。将输出<br> 文件名作为第二个参数传递给main函数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../ch07/ex7_26.h&quot;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ofstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ofstream <span class="token function">output</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    Sales_data total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sales_data trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.8：修改上一题的程序，将结果追加到给定的文件末尾。对同一<br> 个输出文件，运行程序至少两次，检验数据是否得以保留。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../ch07/ex7_26.h&quot;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ofstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ofstream <span class="token function">output</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    Sales_data total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sales_data trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-3-string流" tabindex="-1"><a class="header-anchor" href="#_8-3-string流" aria-hidden="true">#</a> 8.3 string流</h2><ul><li><p>sstream头文件定义了三个类型来支持内存IO，这些类型可以向<br> string写入数据，从string读取数据，就像string是一个IO流一样。</p></li><li><p>istringstream从string读取数据，ostringstream向string写入数据，<br> 而头文件stringstream既可从string读数据也可向string写数据。与fstream<br> 类型类似，头文件sstream中定义的类型都继承自我们已经使用过的<br> iostream头文件中定义的类型。除了继承得来的操作，sstream中定义的<br> 类型还增加了一些成员来管理与流相关联的string。表8.5列出了这些操<br> 作，可以对stringstream对象调用这些操作，但不能对其他IO类型调用这些操作。<br><img src="`+v+`" alt="table8-5" loading="lazy"></p></li></ul><h3 id="_8-3-1-使用istringstream" tabindex="-1"><a class="header-anchor" href="#_8-3-1-使用istringstream" aria-hidden="true">#</a> 8.3.1　使用istringstream</h3><ul><li><p>当我们的某些工作是对整行文本进行处理，而其他一些工作是处理<br> 行内的单个单词时，通常可以使用istringstream。</p></li><li><p>考虑这样一个例子，假定有一个文件，列出了一些人和他们的电话<br> 号码。某些人只有一个号码，而另一些人则有多个——家庭电话、工作<br> 电话、移动电话等。我们的输入文件看起来可能是这样的：<br> morgan 2015552368 8625550123<br> drew 9735550130<br> lee 6095550132 2015550175 8005550000</p></li><li><p>文件中每条记录都以一个人名开始，后面跟随一个或多个电话号<br> 码。我们首先定义一个简单的类来描述输入数据：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// members are public by default; see § 7.2 (p. 268)</span>
<span class="token keyword">struct</span> <span class="token class-name">PersonInfo</span> <span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> phones<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>类型PersonInfo的对象会有一个成员来表示人名，还有一个vector来<br> 保存此人的所有电话号码。</p></li><li><p>我们的程序会读取数据文件，并创建一个PersonInfo的vector。<br> vector中每个元素对应文件中的一条记录。我们在一个循环中处理输入<br> 数据，每个循环步读取一条记录，提取出一个人名和若干电话号码：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string line<span class="token punctuation">,</span> word<span class="token punctuation">;</span> <span class="token comment">// will hold a line and word from input, respectively</span>
vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">&gt;</span> people<span class="token punctuation">;</span> <span class="token comment">// will hold all the records from the input</span>
<span class="token comment">// read the input a line at a time until cin hits end-of-file (or another error)</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PersonInfo info<span class="token punctuation">;</span> <span class="token comment">// create an object to hold this record&#39;s data</span>
    istringstream <span class="token function">record</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bind record to the line we just read</span>
    record <span class="token operator">&gt;&gt;</span> info<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// read the name</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">&gt;&gt;</span> word<span class="token punctuation">)</span> <span class="token comment">// read the phone numbers</span>
        info<span class="token punctuation">.</span>phones<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// and store them</span>
    people<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// append this record to people</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这里我们用getline从标准输入读取整条记录。如果getline调用成<br> 功，那么line中将保存着从输入文件而来的一条记录。在while中，我们<br> 定义了一个局部PersonInfo对象，来保存当前记录中的数据。</p></li><li><p>接下来我们将一个istringstream与刚刚读取的文本行进行绑定，这<br> 样就可以在此istringstream上使用输入运算符来读取当前记录中的每个<br> 元素。我们首先读取人名，随后用一个while循环读取此人的电话号码。</p></li><li><p>当读取完line中所有数据后，内层while循环就结束了。此循环的工<br> 作方式与前面章节中读取cin的循环很相似，不同之处是，此循环从一<br> 个string而不是标准输入读取数据。当string中的数据全部读出后，同样<br> 会触发“文件结束”信号，在record上的下一个输入操作会失败。</p></li><li><p>我们将刚刚处理好的PersonInfo追加到vector中，外层while循环的一<br> 个循环步就随之结束了。外层while循环会持续执行，直至遇到cin的文<br> 件结束标识。</p></li></ul><h3 id="_8-3-1节练习" tabindex="-1"><a class="header-anchor" href="#_8-3-1节练习" aria-hidden="true">#</a> 8.3.1节练习</h3><ul><li>练习8.9：使用你为8.1.2节（第281页）第一个练习所编写的函数打印一<br> 个istringstream对象的内容。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istream<span class="token punctuation">;</span>

istream<span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">&gt;&gt;</span> buf<span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    is<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>istringstream <span class="token function">iss</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span>iss<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.10：编写程序，将来自一个文件中的行保存在一个<code>vector&lt;string&gt;</code><br> 中。然后使用一个istringstream从vector读取数据元素，每次读取一个单词。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">&quot;../data/book.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vecLine<span class="token punctuation">;</span>
    string line<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>
        vecLine<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> vecLine<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        istringstream <span class="token function">iss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        string word<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iss <span class="token operator">&gt;&gt;</span> word<span class="token punctuation">)</span>
            cout <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.11：本节的程序在外层while循环中定义了istringstream对象。如<br> 果record对象定义在循环之外，你需要对程序进行怎样的修改？重写程<br> 序，将record的定义移到while循环之外，验证你设想的修改方法是否正确。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">PersonInfo</span> <span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> phones<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    string line<span class="token punctuation">,</span> word<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">&gt;</span> people<span class="token punctuation">;</span>
    istringstream record<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        PersonInfo info<span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        record <span class="token operator">&gt;&gt;</span> info<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">&gt;&gt;</span> word<span class="token punctuation">)</span>
            info<span class="token punctuation">.</span>phones<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
        people<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p <span class="token operator">:</span> people<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> p<span class="token punctuation">.</span>phones<span class="token punctuation">)</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.12：我们为什么没有在PersonInfo中使用类内初始化？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>因为这里只需要聚合类就够了，所以没有必要在\`PersionInfo\`中使用类内初始化。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-3-2-使用ostringstream" tabindex="-1"><a class="header-anchor" href="#_8-3-2-使用ostringstream" aria-hidden="true">#</a> 8.3.2　使用ostringstream</h3><ul><li><p>当我们逐步构造输出，希望最后一起打印时，ostringstream是很有<br> 用的。例如，对上一节的例子，我们可能想逐个验证电话号码并改变其<br> 格式。如果所有号码都是有效的，我们希望输出一个新的文件，包含改<br> 变格式后的号码。对于那些无效的号码，我们不会将它们输出到新文件<br> 中，而是打印一条包含人名和无效号码的错误信息。</p></li><li><p>由于我们不希望输出有无效电话号码的人，因此对每个人，直到验<br> 证完所有电话号码后才可以进行输出操作。但是，我们可以先将输出内<br> 容“写入”到一个内存ostringstream中：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>entry <span class="token operator">:</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// for each entry in people</span>
    ostringstream formatted<span class="token punctuation">,</span> badNums<span class="token punctuation">;</span> <span class="token comment">// objects created on each loop</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>nums <span class="token operator">:</span> entry<span class="token punctuation">.</span>phones<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// for each number</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            badNums <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">;</span> <span class="token comment">// string in badNums</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
            <span class="token comment">// &#39;&#39;writes&#39;&#39; to formatted&#39;s string</span>
            formatted <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// there were no bad numbers</span>
        os <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token comment">// print the name</span>
        <span class="token operator">&lt;&lt;</span> formatted<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// and reformatted numbers</span>
    <span class="token keyword">else</span> <span class="token comment">// otherwise, print the name and bad numbers</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;input error: &quot;</span> <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name
        <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; invalid number(s) &quot;</span> <span class="token operator">&lt;&lt;</span> badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在此程序中，我们假定已有两个函数，valid和format，分别完成电<br> 话号码验证和改变格式的功能。程序最有趣的部分是对字符串流<br> formatted和badNums的使用。我们使用标准的输出运算符（&lt;&lt;）向这些<br> 对象写入数据，但这些“写入”操作实际上转换为string操作，分别向<br> formatted和badNums中的string对象添加字符。</li></ul><h3 id="_8-3-2节练习" tabindex="-1"><a class="header-anchor" href="#_8-3-2节练习" aria-hidden="true">#</a> 8.3.2节练习</h3><ul><li>练习8.13：重写本节的电话号码程序，从一个命名文件而非cin读取数据。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ostringstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>isdigit<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">PersonInfo</span> <span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> phones<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

string <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">&quot;../data/phonenumbers.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;no phone numbers?&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    string line<span class="token punctuation">,</span> word<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">&gt;</span> people<span class="token punctuation">;</span>
    istringstream record<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        PersonInfo info<span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        record <span class="token operator">&gt;&gt;</span> info<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">&gt;&gt;</span> word<span class="token punctuation">)</span>
            info<span class="token punctuation">.</span>phones<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
        people<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>entry <span class="token operator">:</span> people<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ostringstream formatted<span class="token punctuation">,</span> badNums<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>nums <span class="token operator">:</span> entry<span class="token punctuation">.</span>phones<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> badNums <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">;</span>
            <span class="token keyword">else</span> formatted <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            cout <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> formatted<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;input error: &quot;</span> <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name
                 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; invalid number(s) &quot;</span> <span class="token operator">&lt;&lt;</span> badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习8.14：我们为什么将entry和nums定义为const auto&amp;？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>它们都是类类型，因此使用引用避免拷贝。
在循环当中不会改变它们的值，因此用\`<span class="token keyword">const</span>\`。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ul><li><p>C++使用标准库类来处理面向流的输入和输出：<br> · iostream处理控制台IO<br> · fstream处理命名文件IO<br> · stringstream完成内存string的IO</p></li><li><p>类fstream和stringstream都是继承自类iostream的。输入类都继承自<br> istream，输出类都继承自ostream。因此，可以在istream对象上执行的操<br> 作，也可在ifstream或istringstream对象上执行。继承自ostream的输出类<br> 也有类似情况。</p></li><li><p>每个IO对象都维护一组条件状态，用来指出此对象上是否可以进行<br> IO操作。如果遇到了错误——例如在输入流上遇到了文件末尾，则对象<br> 的状态变为失效，所有后续输入操作都不能执行，直至错误被纠正。标<br> 准库提供了一组函数，用来设置和检测这些状态。</p></li></ul><h2 id="术语表" tabindex="-1"><a class="header-anchor" href="#术语表" aria-hidden="true">#</a> 术语表</h2><ul><li><p>条件状态（condition state）可被任何流类使用的一组标志和函<br> 数，用来指出给定流是否可用。</p></li><li><p>文件模式（file mode）类fstream定义的一组标志，在打开文件时指<br> 定，用来控制文件如何被使用。</p></li><li><p>文件流（file stream）用来读写命名文件的流对象。除了普通的<br> iostream操作，文件流还定义了open和close成员。成员函数open接受一<br> 个string或一个C风格字符串参数，指定要打开的文件名，它还可以接受<br> 一个可选的参数，指明文件打开模式。成员函数close关闭流所关联的文<br> 件，调用close后才可以调用open打开另一个文件。</p></li><li><p>fstream 用于同时读写一个相同文件的文件流。默认情况下，<br> fstream以in和out模式打开文件。</p></li><li><p>ifstream 用于从输入文件读取数据的文件流。默认情况下，ifstream<br> 以in模式打开文件。</p></li><li><p>继承（inheritance）程序设计功能，令一个类型可以从另一个类型<br> 继承接口。类ifstream和istringstream继承自istream，ofstream和<br> ostringstream继承自ostream。第15章将介绍继承</p></li><li><p>istringstream 用来从给定string读取数据的字符串流。</p></li><li><p>ofstream 用来向输出文件写入数据的文件流。默认情况下，<br> ofstream以out模式打开文件。</p></li><li><p>字符串流（string stream）用于读写string的流对象。除了普通的<br> iostream操作外，字符串流还定义了一个名为str的重载成员。调用str的<br> 无参版本会返回字符串流关联的string。调用时传递给它一个string参<br> 数，则会将字符串流与该string的一个拷贝相关联。</p></li><li><p>stringstream 用于读写给定string的字符串流。</p></li></ul>`,113);function _(q,x){const a=i("router-link");return c(),l("div",null,[g,f,u(" more "),h,n("nav",w,[n("ul",null,[n("li",null,[t(a,{to:"#第8章-io库"},{default:p(()=>[s("第8章　IO库")]),_:1})]),n("li",null,[t(a,{to:"#_8-1-io类"},{default:p(()=>[s("8.1 IO类")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_8-1-1-io对象无拷贝或赋值"},{default:p(()=>[s("8.1.1 IO对象无拷贝或赋值")]),_:1})]),n("li",null,[t(a,{to:"#_8-1-2-条件状态"},{default:p(()=>[s("8.1.2　条件状态")]),_:1})]),n("li",null,[t(a,{to:"#_8-1-2节练习"},{default:p(()=>[s("8.1.2节练习")]),_:1})]),n("li",null,[t(a,{to:"#_8-1-3-管理输出缓冲"},{default:p(()=>[s("8.1.3　管理输出缓冲")]),_:1})])])]),n("li",null,[t(a,{to:"#_8-2-文件输入输出"},{default:p(()=>[s("8.2　文件输入输出")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_8-2-1-使用文件流对象"},{default:p(()=>[s("8.2.1　使用文件流对象")]),_:1})]),n("li",null,[t(a,{to:"#_8-2-1节练习"},{default:p(()=>[s("8.2.1节练习")]),_:1})]),n("li",null,[t(a,{to:"#_8-2-2-文件模式"},{default:p(()=>[s("8.2.2　文件模式")]),_:1})]),n("li",null,[t(a,{to:"#_8-2-2节练习"},{default:p(()=>[s("8.2.2节练习")]),_:1})])])]),n("li",null,[t(a,{to:"#_8-3-string流"},{default:p(()=>[s("8.3 string流")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_8-3-1-使用istringstream"},{default:p(()=>[s("8.3.1　使用istringstream")]),_:1})]),n("li",null,[t(a,{to:"#_8-3-1节练习"},{default:p(()=>[s("8.3.1节练习")]),_:1})]),n("li",null,[t(a,{to:"#_8-3-2-使用ostringstream"},{default:p(()=>[s("8.3.2　使用ostringstream")]),_:1})]),n("li",null,[t(a,{to:"#_8-3-2节练习"},{default:p(()=>[s("8.3.2节练习")]),_:1})])])]),n("li",null,[t(a,{to:"#小结"},{default:p(()=>[s("小结")]),_:1})]),n("li",null,[t(a,{to:"#术语表"},{default:p(()=>[s("术语表")]),_:1})])])]),y])}const N=o(b,[["render",_],["__file","J-第八章IO库.html.vue"]]);export{N as default};
