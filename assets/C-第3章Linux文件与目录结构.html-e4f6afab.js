import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as a,c as u,d as r,a as i,e,w as s,b as n,f as p}from"./app-2a2d189a.js";const d="/assets/figure3-1-62c3ac87.png",c="/assets/figure3-2-1b6d33bb.png",x="/assets/figure3-3-f66afe9b.png",L="/assets/figure3-4-68e83491.png",b={},h=i("h1",{id:"c-第3章linux文件与目录结构",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#c-第3章linux文件与目录结构","aria-hidden":"true"},"#"),n(" C-第3章Linux文件与目录结构")],-1),m=i("p",null,"C-第3章Linux文件与目录结构",-1),_=i("div",{class:"hint-container info"},[i("p",{class:"hint-container-title"},"说明"),i("p",null,"主要是各种搜索找的学习；")],-1),f={class:"table-of-contents"},g=p('<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="概述框架" tabindex="-1"><a class="header-anchor" href="#概述框架" aria-hidden="true">#</a> 概述框架</h2><h2 id="c-第3章linux文件与目录结构-1" tabindex="-1"><a class="header-anchor" href="#c-第3章linux文件与目录结构-1" aria-hidden="true">#</a> C-第3章Linux文件与目录结构</h2><h2 id="一、熟悉-centos-7-系统环境及终端操作" tabindex="-1"><a class="header-anchor" href="#一、熟悉-centos-7-系统环境及终端操作" aria-hidden="true">#</a> 一、熟悉 CentOS 7 系统环境及终端操作</h2><ul><li><p>CentOS 7 系统已安装完成，接下来可以实际使用。这部分属于课程的第二部分——基础篇，主要讲解 Linux 中的基本操作和基本原理。</p></li><li><p>首先，熟悉新的系统环境。由于这是图形化界面，会发现与 Windows 有诸多相似之处，且更为简洁。上方有回收站，下方有主文件夹，双击打开查看，前面有后缀为 cfg 的两个文件，貌似是配置文件，先暂且不管。后面有众多分类目录，如公共、视频、图片、文档、下载等，这些在 Windows 中通常置于 users 下对应用户的目录里。当前的主文件夹，整体结构设置类似。</p></li><li><p>此外，左上角菜单中有应用程序，类似 Windows 的开始菜单，其中系统工具最为关键，可进行系统设置，比如系统日志、软件更新等。重要的设置包括 Wi-Fi 、背景（可切换桌面，且能按不同时间变换）、语言、输入语言、电源power（可设置为 5 分钟后锁屏变蓝屏，若嫌麻烦，可设为“从不”），还有网络、设备（display可调整分辨率、开启夜光、设置键盘）等。</p></li><li><p>键盘设置需特别说明keyboard，其中有个特殊键叫“super”。通常，键盘布局左下角有个带有明显 Windows 徽标的键，形如四个小窗口，一般称为 Windows 徽标键。因 Windows 市场占有率高，电脑或键盘厂商常如此布局。而对于 Linux ，它并非 Windows 系统，与微软无关，但会利用此键盘布局，将其命名为“super 键”，超级功能键。若感兴趣，可据此设置符合自身习惯的快捷键。比如，按住 Windows 徽标键（即 super 键），再配合其他操作，可实现窗口最大化、恢复、左右分屏等，这是较为常用的快捷键，感兴趣的同学可自行探索。</p></li><li><p>除了基本的设备设置，还有办公软件，如点开字典可查询单词（如“Linux”，需联网查看解释，显示其为开源的 Unix 操作系统版本），以及工具和附件。附件中，文本编辑器颇为重要，若要编辑文档，可使用 Linux 自带的文本编辑器。</p></li><li><p>了解大概结构后，若想在桌面新建文档，右键发现无此选项，可通过应用程序 - 附件 - 文本编辑器实现。比如输入“hello Linux”，点击保存可选择桌面，默认文件名“无标题文档一”。若想打开，直接双击，Linux 会用自带文本编辑器打开，显示内容。若要永久删除，可按 Shift + Delete 。熟悉 Windows 操作的话，这些都不难。若要将 Linux 系统直接装在电脑上，了解这些基本足够。</p></li><li><p>接下来，若想上网，可安装浏览器（如默认的 Firefox ），若要写代码，可下载 idea 或 Eclipse 等，并配置 SDK 和环境，这与日常使用电脑无异。但学习 <mark>Linux 是为大数据学习打基础，需掌握运维技术，不能仅靠图形界面点击安装软件，此时，需了解终端这一重要内容</mark>。</p></li><li><p>之前右键点击时，最后一个选项是“打开终端”，应用程序中的系统工具里最后一项也是终端。终端打开后，是白色界面，有光标闪烁，此为 Linux 下的终端控制台，可输入 Linux 命令操作文件，这与 Windows 下的命令提示符相似。比如在 Windows 中，按 Windows 徽标键 + r 调出运行窗口，输入 CMD 并确定，即可打开命令提示符。Windows 下的命令提示符默认是黑屏，Linux 下的终端控制台默认是白屏。</p></li><li><p>Linux 终端比 Windows 命令提示符更强大、灵活，其<mark>本质是 shell 命令解释层</mark>。回顾之前介绍的 GNU Linux 结构，最底层是计算机硬件，之上是 Linux 的 kernel （硬件接口层，即 Linux 内核，通常由核心开发或驱动开发人员研究），再外层是命令解释层（shell ，连接外部应用和 Linux 内核），最外层是外围应用层。学习大数据或从事运维工作，重点关注的是中间的命令解释层——shell ，后续学习的命令及编程方式都在此层与 Linux 交互。<br><img src="'+d+'" alt="figure3-1" loading="lazy"></p></li><li><p>在桌面上右键打开的终端并非真正意义上的 Linux shell ，而是基于桌面环境（如 GNOME ）打开的，本质上是桌面环境的一部分，可视为真正 shell 控制台的仿真包。当前桌面环境是 GNOME ，所以这个终端是基于 GNOME 的仿真包，有时称为 GNOME terminal 。</p></li><li><p>真正的 shell 终端控制台什么样呢？回忆开机启动时，是黑屏，字小，无鼠标，只能用键盘操作选择启动。当时看到的黑屏就是真正的 Linux shell 控制台。早期 Linux 没有如今的图形化桌面，启动登录后只有黑屏控制台，不停敲击键盘，无鼠标操作。如今，在桌面设置仿真包更友好，初学者使用桌面终端仿真包即可，底层相同，没问题。</p></li><li><p>若真想进入真正的 shell 控制台，一种方式是退出当前桌面环境，回到原始文本状态（黑屏）；另一种是利用快捷键，在 Linux 中按 Ctrl + Alt ，再按 F2 - F6 （不同的 Linux 发行版快捷键可能不同，如 CentOS 7 中 Ctrl + Alt + F1 进入图形界面，F2 - F6 进入控制台界面；Ubuntu 中 Ctrl + Alt + F7 进入图形界面，F1 - F6 进入控制台界面）。如此，可同时登录多个用户进行操作，体现了 Linux 作为多用户分时操作系统的特点。</p></li><li><p>在终端控制台界面，与桌面打开的终端仿真器本质相同，只是字号较小、背景为黑、光标由方块变为下划线等。可能会发现鼠标消失，不必惊慌，按 Ctrl + Alt 可唤出鼠标。若不习惯此界面，学习时可返回图形化界面，如按 Ctrl + Alt + F1 。</p></li><li><p>在终端中，可双击全屏。若觉得字小，可通过查看菜单中的放大和缩小选项调整字体，也有快捷键，放大为 Ctrl + Shift + = ，缩小为 Ctrl + - 。若想进行其他配置，如颜色、光标、主题等，可点击编辑 - 首选项。比如可设置文本字体为自定义，光标由方块改为下划线，主题颜色可选择默认的亮色（白底）或内置的 Tango 暗色（黑底）。</p></li><li><p>关于终端操作，解释一下终端显示的内容。首先是光标闪烁，前面有方括号，内为用户（如 root ）和主机名（如 Hadoop100 ），后跟波浪号表示当前用户主文件夹，方括号外的井号表示 root 用户的输入命令提示符，普通用户则为美元符。若不清楚波浪号所指位置，可输入“ls”命令，列出当前目录下的文件和文件夹，如两个配置文件及公共、模板、视频等目录，与主文件夹内容相同，可知波浪号即当前用户主文件夹。若要退出终端，可点击叉号或输入“exit”。</p></li><li><p>以上是关于系统的简单操作，包括图形化界面和终端操作。</p></li></ul><h2 id="二、linux-文件系统及目录结构" tabindex="-1"><a class="header-anchor" href="#二、linux-文件系统及目录结构" aria-hidden="true">#</a> 二、Linux 文件系统及目录结构</h2><ul><li><p>我们现已对 Linux 中的基本操作有所了解，但会思考：学习 Linux 旨在深入了解系统，可当前所见内容似乎过少。在主文件夹中，仅有寥寥几个文件和目录，且已知这些目录皆为用户相关的数据和文件，初始时为空。那么，欲学习的操作系统的核心内容究竟在何处？我们又该如何寻找？</p></li><li><p>需注意，若在图形化界面中，可点击“位置”，其下有“计算机”选项。显然，这与 Windows 中的“我的电脑”类似。点开后，应能看到当前电脑系统中的所有目录和文件。因当前为超级管理员（root 用户），故而能无所限制地查看，其中目录众多。</p></li><li><p>然而，此处与 Windows 的最大区别在于无盘符。在 Windows 中，点开“我的电脑”，首先映入眼帘的便是 C 盘、D 盘、E 盘等，而这里皆是文件夹。</p></li><li><p>接下来要介绍的是 Linux 的文件系统以及整个目录结构的设置，即 Linux 中这些目录的名称皆有其因，且有标准可循。尽管 Linux 发行版五花八门，但目录结构基本一致，此乃 Linux 的显著特点之一。</p></li><li><p>此前曾提及，<mark>Linux 中“一切皆文件”</mark>，所有事物都被当作文件来管理，这部分内容颇为重要。我们结合文档内容进行介绍。</p></li><li><p>首先，重申“Linux 系统中一切皆文件”这一概念。此概念的具体含义后续会进一步阐述。首先想到，之前在安装 CentOS 时就已接触过 Linux 对文件的管理，其本质是一个单一的树状目录结构。意思是，若将所有文件和文件夹的组织关系统一列出，所绘图像便是一棵树，且仅有这一棵树。</p></li><li><p>因为在 Windows 中，存在不同盘符。若绘图展示，C 盘下可能有诸多文件和文件夹，文件夹内可能还有嵌套，D 盘等亦是如此，彼此互不干涉。若如此绘图，这便不能称为一棵树，而是多棵树。从图论角度来讲，应称之为“森林”。但在 Linux 中，不存在这种情况，仅有一棵树。整个目录树仅有一个树根，即“/”，我们称之为 Linux 的根目录。这很好理解，此乃整棵树的根，对应于硬盘分区时的根分区。<br><img src="'+c+`" alt="figure3-2" loading="lazy"></p></li><li><p>故而，我们看到 Linux 中的所有文件都会依据不同文件夹分类放置于根目录下。如此看来，这就如同从根部长出众多枝杈，每个枝杈对应一个文件夹。接下来，一棵树绝非仅分叉一次，每个枝杈还会继续分枝，层层嵌套。当前的整个目录结构便是一个层级式的结构，对应着一层一层地展开。这其实极易理解，即文件夹下还有文件夹，无限嵌套。</p></li><li><p>最后，我们要处理的自然是具体的文件。所有目录中，若找到一个文件及其对应的路径，然后一层一层向上回溯，最终都会追溯至根目录。正所谓树高千尺，也不能忘了根，最终都会回归此处。而且对于 Linux 而言，所有硬件设备也均以文件的形式进行管理。这便是为何说在 Linux 系统中“一切皆文件”，所有事物都能以文件形式呈现。</p></li><li><p>由此可见，相较于 Windows，这种文件管理方式更加扁平化、灵活且高效。</p></li><li><p>在此，需留意两点：其一，在 Linux 系统中，路径每一层向下的变化，在不同层级的目录中，整个路径的表示是以正斜杠进行划分的，这与 Windows 不同。众所周知，Windows 中的路径是以反斜杠来划分的，比如 C 盘下的某个目录 A ，其下又有目录 B ，它们之间是以反斜杠分隔的。而在 Linux 系统中，使用的是正斜杠。</p></li><li><p>之所以如此，主要是因为我们知晓，在底层字符编码（ASCII 码）中，反斜杠用于表示转义字符。若 Windows 中的路径本身也是一个字符，要表示反斜杠这个字符，就需再次进行转义。所以，我们常常会发现，在代码或文本中处理 Windows 路径时，经常会出现两个反斜杠，颇为麻烦。而 Linux 中使用正斜杠则避免了这一问题。这是一个细微之处，需加以留意。而且，在熟悉了 Windows 的写法后，切勿写错。</p></li><li><p>其二，还有一个需要特别关注的概念，即此前专门提到过的“挂载”或“挂载点”。此前已介绍，在当前的 Linux 文件系统中，若要进行分区操作，首先需指定每个分区的文件系统格式。比如，早期的 CentOS 6 主要使用 EXT4 （即所谓的第四代扩展文件系统），而如今的 CentOS 7 ，默认的已是 XFS （64 位高性能日志文件系统），我们当前的系统使用的便是 XFS 这种文件格式，其尤为擅长处理大文件。</p></li><li><p>确定文件格式后，还需确定一个挂载点。那么，这个挂载点究竟指的是什么呢？其实，当前 Linux 把所有的目录结构都置于根目录下，根目录通常对应着根分区，但并非根目录下的所有内容都一定要存放在根分区的硬盘空间中。<mark>?????</mark></p></li><li><p>倘若我们想在不同的分区存放不同的内容，应当如何设置呢？只需单独设置一个挂载点即可。比如，当时进行操作时，先划分了一块分区，称之为引导分区。我们期望将 Linux 启动过程中的核心引导文件放置于这个单独的分区中，与其他内容隔离开来单独保存。具体的操作是，先设置好文件格式，将这个分区称为分区 1 ，然后直接挂载到 /boot 目录下。如此一来，只要是在 /boot 目录下的所有内容，都会被写入当前的分区 1 （即引导分区），从而与后续内容隔离开来。</p></li><li><p>当然，后面我们还指定了一个 swap 分区，这个分区比较特殊，主要用作交换分区，类似于虚拟内存，在此暂且不论。而剩下的最大部分，则通通挂载到了根目录下。所以，接下来就相当于除了 /boot 目录下的所有内容存放在分区 1 ，其他的所有内容都会存放在分区 2 （即根分区）。这便是之前所进行的操作。</p></li><li><p>此前也曾提及，假如现在有了新的需求。比如，新增了一个用户，且该用户的所有内容放置在某个目录下，希望将这个目录单独隔离出来，存放在一块单独的硬盘上，要挂载一块新的硬盘，该如何操作呢？</p></li><li><p>首先，将这块新硬盘进行分区。假如不做其他分区，那整个就是一个大分区，即分区 3 。同样，指定其文件格式为 XFS 。然后，比如已知有 /home 目录，可在其下新建一个对应的目录（比如 a ）。接下来，将分区 3 挂载到 a 这个目录下。那么，此后这个目录中的所有内容都会被写入这块新的硬盘。</p></li><li><p>由此我们发现，在这个过程中，Linux 中的目录结构似乎与底层的物理存放关系不大。并非同一目录下的内容存放位置就近，不同目录下的内容存放位置就远。当前的目录结构主要是一种逻辑上的组织关系，<mark>通过初始的分区和挂载点设置，便可配置出它们在物理硬盘上的一一映射关系</mark>。</p></li><li><p>所以，一次将硬件配置好之后，后续便无需考虑其具体存放位置，只需了解其逻辑结构即可。因此，有时会将 Linux 的这种目录称为“虚拟目录”，因为它并非真正意义上分区文件的存放方式，而是一种逻辑上的结构关系。</p></li><li><p>以上便是关于当前文件系统和挂载点的介绍。</p></li></ul><h2 id="三、linux-文件系统目录结构详解" tabindex="-1"><a class="header-anchor" href="#三、linux-文件系统目录结构详解" aria-hidden="true">#</a> 三、Linux 文件系统目录结构详解</h2><ul><li>我们现已对 Linux 下的文件系统结构有了初步认识。通过此图能够看出，根目录下的这些目录结构，与在 Linux 系统中打开“计算机”所看到的目录颇为相似。那么，它们是否完全相同呢？在此，我们可以进行验证。仅看图说服力不足，接下来，打开一个终端，直接跳转到根目录。当前目录若为“一个波浪线~”，则表示当前用户的主目录。要切换到根目录，需使用命令“CD”，我们知道，Windows 中也有此命令，“CD”即“change directory”，意为切换路径。切换到何处？其后跟上要切换的路径，即一个斜线“/”，此表示根目录。可见，已切换成功。切换后，再使用“LS”命令查看根目录下到底有哪些文件夹。确实，与之前所见相似，有“bin”“boot”“dev”“etc”“home”“lib”等。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> bzhang@pc243<span class="token operator">:</span><span class="token operator">~</span>$ cd <span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+'" alt="figure3-3" tabindex="0" loading="lazy"><figcaption>figure3-3</figcaption></figure><ul><li>接下来需思考的是，这些文件夹的命名是否有规律，还是可随意命名、随意放置内容？在 Windows 中，或许对此无严格要求，即便对于 C 盘，虽有人提醒勿乱动其中内容，但熟悉后，仍可能往其中存放诸多内容。而在 Linux 中，虽身为系统超级管理员“root”，理论上可随意操作，但 Linux 中每个目录的命名皆有规范。这些目录名基于所谓的“文件系统层级标准”定义而来，此标准从 Unix 继承并发展演变。即文件系统中，根目录下皆为通用的目录名称，每个目录对应常见的功能，所有类似的内容皆应分门别类置于相应目录。当然，也可乱放，但这显然有悖于 Linux 的设计初衷。所以，关键在于要知晓每个目录的用途。而且，Linux 有一优点，我们当前学习的是 CentOS 7 ，若将此文件系统弄明白，会发现几乎所有的 Linux 发行版，如 Ubuntu 、Debian 、Fedora 等，根目录下的结构都颇为相似，基本一致，完全通用。接下来，进行详细说明，逐一阐述每个目录的作用。</li></ul><br><ul><li><p>首先是“bin”目录，“bin”为“binary”的前三个字母，意即二进制。此为二进制目录，存放的是可直接执行的常用命令。比如，向下拖动查看，能看到此前执行过的“CD”命令（切换目录的命令），往后找，还会看到“ls”命令（直接列出当前目录下所有目录和文件的命令），常用命令在此皆可找到。需注意一个小细节，此处的“bin”有一个朝外的小箭头，与普通文件夹不同，这表明“bin”目录并非直接置于当前根目录下。其实际逻辑位置，查看属性可知，它并非文件夹，而是一个文件夹的链接，实际指向的是“usr”目录下的“bin”。若深入查看，会发现二者内容完全相同。此链接如同 Windows 中的超链接或快捷方式，根目录下的“bin”实则仅为一个链接。当然，我们仍将其视为当前文件系统的一部分。<br><img src="'+L+'" alt="figure3-4" loading="lazy"></p></li><li><p>与“bin”相似的还有“sbin”，多了一个“s”，“s”代表“system”（系统），此为系统级的二进制命令目录，存放的通常是系统管理员（超级用户）可用的系统管理工具。本质上，“bin”和“sbin”，在当前发行版（GNU Linux ）中，是 GNU 开源项目提供的部分用户级工具，有些普通用户可用，有些仅管理员可用，此为二者区别。同样，“sbin”目录也有箭头，表明其亦为链接，链接至“usr”下的“sbin”目录。由此可见，“usr”目录颇为重要。</p></li><li><p>先将带链接的目录看完，还有“lib”和“lib64”。“Lib”显然是“library”的前三个字母，此为当前的库目录，主要存放系统和应用程序所需的共享库文件，类似于 Windows 中的“DLL”（动态链接库文件）。对应的，在 Windows 中，C 盘下有著名的“system32”目录，其中有众多动态链接库文件，多为系统必需，若删除，系统可能崩溃无法启动。对于 Linux ，“lib”目录中的诸多内容亦至关重要，切不可随意删除或改动。“lib64”则存放与 64 位相关的特殊库文件，其关系类似于 Windows 中的“system”和“system32”，只是在 Linux 中称为“lib”和“lib64”。二者皆存放重要的系统所需动态链接库文件，部分应用程序所需的共享库也可能置于此处。此二者亦为链接，链接至“usr”下的“lib”和“lib64”目录，这两个目录所包含内容众多，涵盖系统诸多方面。既然提到此，不妨也说一说“usr”目录。“usr”目录极为重要，其中包含用户的所有应用程序及所需的文件和数据。若类比，其中链接过来的“usr/bin”和“usr/sbin”等，相当于 Windows 中的“system32”，而其他用户级别的内容，则可能类似于 Windows 中的“program FILES”。不同的 Linux 发行版，对此目录的具体内容设置或有差异。此外，还有“usr/local”，其中亦有诸多与应用程序相关的文件和数据，有时某些命令会链接至此。当前不存在此问题，多链接至“usr/bin”。此为主要目录的基本介绍。</p></li><li><p>再看其他目录，相对简单些。比如“boot”目录，显然是此前挂载的引导分区中存放的内容，此目录至关重要，单独划分了分区。查看其属性，容量不大，存放的是引导启动所需的文件和核心文件，包括链接文件及镜像文件。若要写入用户数据，切勿写入此处，其容量仅 100 多兆。此前分区时，“boot”分区 100 - 500 兆通常便足够，当时分配 1G ，仅是为方便计算大小。</p></li><li><p>还有“dev”目录，“Dev”是“device”的前三个字母，为设备目录，用于管理所有设备。点击进入查看，会发现所有设备甚至硬件设备，在其中皆有对应的映射至不同的目录和文件。比如“CPU”，点进去会发现，因配置虚拟机时分配了两个 CPU ，每个 CPU 有 4 个内核，故有 8 个逻辑核心，每个核心皆有对应的目录进行管理，内有相应文件。至少可知，在 Linux 中，确将每个硬件设备皆视为文件进行管理，此即“一切皆文件”，所有皆能找到对应映射。</p></li><li><p>另有一重要目录“etc”，主要放置系统管理所需的配置文件及相关子目录。有时安装数据库后，其配置文件会置于此处。“etc”目录中诸多配置操作皆与之相关，务必牢记。</p></li><li><p>“home”目录较为简单，“home”即“家”，在 Linux 中，每个用户皆有自己的主目录，存放与自身相关的个性化数据文件。当前仅有一个普通用户“atguigu”，此目录中便只有“atguigu”。若创建更多用户，相应地会出现每个用户的文件夹。而“root”用户的主目录为“root”文件夹，即桌面上点击的主文件夹，路径为“/root”。此为常见目录结构的基本用法。</p></li><li><p>另有一常用目录“opt”，“OPT”是“OPTIONAL”的前三个字母，意即可选目录，即可有可无。此为 Linux 系统为第三方软件包预留的位置，若要额外安装软件，约定俗成皆装于此，类似于在 Windows 中为软件单独划分分区。在 Linux 中，默认将第三方软件置于“opt”目录。</p></li><li><p>此外，还有一些目录。按顺序，首先是“media”目录，“media”意为媒体，此为媒体目录，用于识别可移动媒体设备，如 U 盘、光驱等。这些外接的媒体设备相当于外部存储，接入后，数据应置于哪个分区？相当于新增分区，将其挂载至“media”目录。所以，此目录相当于可移动媒体设备的挂载点。与之并列的还有著名的“mnt”目录，即“mount”的缩写，也是挂载目录，可视为另一个“media”，用于挂载任何外部存储，进入目录即可查看其中内容。二者皆为移动存储设备的挂载点。</p></li><li><p>再者，有与系统相关的目录。如“proc”，为“process”的前四个字母简写，意即进程，此为进程目录，是一个虚拟目录，为系统内存中进程的映射，存放现有硬件和当前进程的信息，对系统至关重要，一般用户切勿改动。其后还有“run”目录，与“proc”目录有别，“run”为运行目录，存放的是当前系统运行以来的所有实时信息，为临时文件系统，重启后即被清除。虽不那么重要，但也尽量勿动，因其记录着当前系统信息。还有“srv”，为“service”的缩写，存放的是与系统服务相关的内容，若删除，本地服务将无法启动。另有“sys”，显然是“system”的缩写，存放的是系统硬件信息相关文件。若此前说“lib”和“lib64”类似于 Windows 中的“system32”（存放系统相关的动态链接库），那么此处存放的则是硬件相关信息，同样不可删除。</p></li><li><p>说了诸多不可动的目录，终有可动的。如“tmp”，“TMP”是“temporary”（临时）的缩写，为临时目录，可随意删除其中内容。操作时若不够仔细，诸多内容皆会堆于此，硬盘空间不足时，可查看此处能否清空以节省空间。其后的“usr”已述，此目录重要，“bin”和“lib”等皆链接至此，存放诸多应用程序和用户相关的数据文件。最后是“var”，为“VARB”（变量）的前三个字母，是可变目录，其中通常存放不断扩充和变化的内容，常被修改的诸如各类日志“log”，皆置于此。此为对这些目录的划分，具体使用时，可依自身需求灵活设置。因是“root”用户，有权在各处写入，但务必谨慎。诸如“proc”“run”“service”“system”等与系统相关的目录，切勿触碰。“boot”“dev”等目录亦不可动。于日常使用，用得最多的或许是“bin”“sbin”，其中诸多命令所需，但添加和修改仍需谨慎，切勿删除，否则可能导致系统无法运行。“lib”亦尽量勿动。而可随意改动和删除的目录，如“tmp”（临时目录）、“opt”（安装第三方软件）、自身用户对应的目录，以及“var”（因多存放日志，影响不大）。此外，“etc”日后可能常被使用，“bin”“etc”中主要使用其中命令，而“etc”则需谨慎修改其中配置文件。至于“media”和“mount”，挂载新设备（如 U 盘、光驱）时，其中内容若可删除修改，则对系统影响不大。此即整个 Linux 目录结构的介绍。</p></li></ul>',14);function w(C,W){const l=t("router-link");return a(),u("div",null,[h,m,r(" more "),_,i("nav",f,[i("ul",null,[i("li",null,[e(l,{to:"#概述框架"},{default:s(()=>[n("概述框架")]),_:1})]),i("li",null,[e(l,{to:"#c-第3章linux文件与目录结构-1"},{default:s(()=>[n("C-第3章Linux文件与目录结构")]),_:1})]),i("li",null,[e(l,{to:"#一、熟悉-centos-7-系统环境及终端操作"},{default:s(()=>[n("一、熟悉 CentOS 7 系统环境及终端操作")]),_:1})]),i("li",null,[e(l,{to:"#二、linux-文件系统及目录结构"},{default:s(()=>[n("二、Linux 文件系统及目录结构")]),_:1})]),i("li",null,[e(l,{to:"#三、linux-文件系统目录结构详解"},{default:s(()=>[n("三、Linux 文件系统目录结构详解")]),_:1})])])]),g])}const y=o(b,[["render",w],["__file","C-第3章Linux文件与目录结构.html.vue"]]);export{y as default};
