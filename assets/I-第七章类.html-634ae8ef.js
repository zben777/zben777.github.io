import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,d as u,a as n,e as p,w as t,b as s,f as e}from"./app-2a2d189a.js";const r={},d=n("h1",{id:"i-第七章类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-第七章类","aria-hidden":"true"},"#"),s(" I-第七章类")],-1),k=n("p",null,"I-第七章类",-1),v=e('<div class="hint-container info"><p class="hint-container-title">说明</p><p>主要是各种搜索找的学习；<br><strong>百度链接：</strong><br> :<br> :</p><p><strong>知乎链接：</strong><br> :<br> :</p><p><strong>B站链接：</strong><br> ：<br> ：</p><p><strong>博客链接：</strong><br> ：<br> ：</p><p><strong>GitHub链接：</strong><br> ：<br> ：</p></div>',1),m={class:"table-of-contents"},b=e(`<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="第7章-类" tabindex="-1"><a class="header-anchor" href="#第7章-类" aria-hidden="true">#</a> 第7章　类</h2><ul><li><p>在C++语言中，我们使用类定义自己的数据类型。通过定义新的类<br> 型来反映待解决问题中的各种概念，可以使我们更容易编写、调试和修<br> 改程序。（比如在进行NNDescent的时候，设计了存储基础数据的BaseData类和<br> 进行 实现该算法的XND类，数据和实现分离，HNSW没有分离，我们可以以后都这样进行设计）</p></li><li><p>本章是第2章关于类的话题的延续，主要关注数据抽象的重要性。<br> 数据抽象能帮助我们将对象的具体实现与对象所能执行的操作分离开<br> 来。第13章将讨论如何控制对象拷贝、移动、赋值和销毁等行为，在第<br> 14章中我们将学习如何自定义运算符。</p></li><li><p>数据抽象是面向对象编程（OOP）的一个核心概念，它允许程序员定义和使用对象而不需要了解对象的内部实现细节。在类的设计与实现中，数据抽象通常涉及以下几个方面</p></li><li><p>类的基本思想是数据抽象（data abstraction）和封装（encapsulation）。数据抽象是一种依赖于接口（interface）和实现（implementation）分离的编程（以及设计）技术<mark>这个分离的话就是.hpp和.cpp的分离吗？还是抽象类和实现类的区别？</mark>。类的接口包括用户所能执行的操作；类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数。</p></li><li><p>封装实现了类的接口和实现的分离。封装后的类隐藏了它的实现细<br> 节，也就是说，类的用户只能使用接口而无法访问实现部分。</p></li><li><p>类要想实现数据抽象和封装，需要首先定义一个抽象数据类型<br> （abstract data type）。在抽象数据类型中，由类的设计者负责考虑类的<br> 实现过程；使用该类的程序员则只需要抽象地思考类型做了什么，而无<br> 须了解类型的工作细节。</p></li></ul><h2 id="_7-1-定义抽象数据类型" tabindex="-1"><a class="header-anchor" href="#_7-1-定义抽象数据类型" aria-hidden="true">#</a> 7.1　定义抽象数据类型</h2><ul><li><p>在第1章中使用的Sales_item类是一个抽象数据类型，我们通过它的<br> 接口（例如1.5.1节（第17页）描述的操作）来使用一个Sales_item对<br> 象。我们不能访问Sales_item对象的数据成员，事实上，我们甚至根本<br> 不知道这个类有哪些数据成员。</p></li><li><p>与之相反，Sales_data类（参见2.6.1节，第64页）不是一个抽象数<br> 据类型。它允许类的用户直接访问它的数据成员，并且要求由用户来编<br> 写操作。要想把Sales_data变成抽象数据类型，我们需要定义一些操作<br> 以供类的用户使用。一旦Sales_data定义了它自己的操作，我们就可以<br> 封装（隐藏）它的数据成员了。</p></li></ul><h3 id="_7-1-1-设计sales-data类" tabindex="-1"><a class="header-anchor" href="#_7-1-1-设计sales-data类" aria-hidden="true">#</a> 7.1.1　设计Sales_data类</h3><ul><li><p>我们的最终目的是令Sales_data支持与Sales_item类完全一样的操作<br> 集合。Sales_item类有一个名为isbn的成员函数（member function）（参<br> 见1.5.2节，第20页），并且支持+、=、+=、&lt;&lt;和&gt;&gt;运算符。</p></li><li><p>我们将在第14章学习如何自定义运算符。现在，我们先为这些运算<br> 定义普通（命名的）函数形式。由于14.1节（第490页）将要解释的原<br> 因，执行加法和IO的函数不作为Sales_data的成员，相反的，我们将其<br> 定义成普通函数；执行复合赋值运算的函数是成员函数。Sales_data类<br> 无须专门定义赋值运算，其原因将在7.1.5节（第239页）介绍。</p></li><li><p>综上所述，Sales_data的接口应该包含以下操作：<br> · 一个isbn成员函数，用于返回对象的ISBN编号<br> · 一个combine成员函数，用于将一个Sales_data对象加到另一个对象上<br> · 一个名为add的函数，执行两个Sales_data对象的加法<br> · 一个read函数，将数据从istream读入到Sales_data对象中<br> · 一个print函数，将Sales_data对象的值输出到ostream</p></li></ul><br><ul><li><p><mark>关键概念：不同的编程角色</mark></p></li><li><p>程序员们常把运行其程序的人称作用户（user）。类似的，类的设计者也是为其<br> 用户设计并实现一个类的人；显然，类的用户是程序员，而非应用程序的最终使用者。</p></li><li><p>当我们提及“用户”一词时，不同的语境决定了不同的含义。如果我们说用户代码<br> 或者Sales_data类的用户，指的是使用类的程序员；如果我们说书店应用程序的用户，<br> 则意指运行该应用程序的书店经理。</p></li><li><p><mark>Note</mark></p></li><li><p>C++程序员们无须刻意区分应用程序的用户以及类的用户。</p></li><li><p>在一些简单的应用程序中，类的用户和类的设计者常常是同一个人。尽管如此，<br> 还是最好把角色区分开来。当我们设计类的接口时，应该考虑如何才能使得类易于使<br> 用；而当我们使用类时，不应该顾及类的实现机理。</p></li><li><p>要想开发一款成功的应用程序，其作者必须充分了解并实现用户的需求。同样，<br> 优秀的类设计者也应该密切关注那些有可能使用该类的程序员的需求。作为一个设计<br> 良好的类，既要有直观且易于使用的接口，也必须具备高效的实现过程。</p></li></ul><br><ul><li><mark>使用改进的Sales_data类</mark></li><li>在考虑如何实现我们的类之前，首先来看看应该如何使用上面这些<br> 接口函数。举个例子，我们使用这些函数编写1.6节（第21页）书店程<br> 序的另外一个版本，其中不再使用Sales_item对象，而是使用Sales_data对象：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Sales_data total<span class="token punctuation">;</span> <span class="token comment">// variable to hold the running sum</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read the first transaction</span>
    Sales_data trans<span class="token punctuation">;</span> <span class="token comment">// variable to hold data for the next transaction</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read the remaining transactions</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// check the isbns</span>
            total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update the running total</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// print the results</span>
            total <span class="token operator">=</span> trans<span class="token punctuation">;</span> <span class="token comment">// process the next book</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// print the last transaction</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// there was no input</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// notify the user</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>一开始我们定义了一个Sales_data对象用于保存实时的汇总信息。<br> 在if条件内部，调用read函数将第一条交易读入到total中，这里的条件部<br> 分与之前我们使用&gt;&gt;运算符的效果是一样的。read函数返回它的流参<br> 数，而条件部分负责检查这个返回值（参见4.11.2节，第144页），如果<br> read函数失败，程序将直接跳转到else语句并输出一条错误信息。</p></li><li><p>如果检测到读入了数据，我们定义变量trans用于存放每一条交易。<br> while语句的条件部分同样是检查read函数的返回值，只要输入操作成<br> 功，条件就被满足，意味着我们可以处理一条新的交易。</p></li><li><p>在while循环内部，我们分别调用total和trans的isbn成员以比较它们<br> 的ISBN编号。如果total和trans指示的是同一本书，我们调用combine函<br> 数将trans的内容添加到total表示的实时汇总结果中去。如果trans指示的<br> 是一本新书，我们调用print函数将之前一本书的汇总信息输出出来。因<br> 为print返回的是它的流参数的引用，所以我们可以把print的返回值作为<br> &lt;&lt;运算符的左侧运算对象。通过这种方式，我们输出print函数的处理结<br> 果，然后转到下一行。接下来，把trans赋给total，从而为接着处理文件<br> 中下一本书的记录做好了准备。</p></li><li><p>处理完所有输入数据后，使用while循环之后的print语句将最后一条<br> 交易的信息输出出来。</p></li></ul><h3 id="_7-1-1节练习" tabindex="-1"><a class="header-anchor" href="#_7-1-1节练习" aria-hidden="true">#</a> 7.1.1节练习</h3><ul><li>练习7.1：使用2.6.1节练习定义的Sales_data类为1.6节（第21页）的交易<br> 处理程序编写一个新版本。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Sales_data</span>
<span class="token punctuation">{</span>
    string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sales_data trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span>bookNo <span class="token operator">==</span> trans<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                total<span class="token punctuation">.</span>units_sold <span class="token operator">+=</span> trans<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
                total<span class="token punctuation">.</span>revenue <span class="token operator">+=</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-2-定义改进的sales-data类" tabindex="-1"><a class="header-anchor" href="#_7-1-2-定义改进的sales-data类" aria-hidden="true">#</a> 7.1.2　定义改进的Sales_data类</h3><ul><li><p>改进之后的类的数据成员将与2.6.1节（第64页）定义的版本保持一致，<code>它们包括：bookNo，string类型，表示ISBN编号；units_sold，unsigned类型</code>，表示某本书的销量；以及revenue，double类型，表示这本书的总销售收入。</p></li><li><p>如前所述，我们的类将包含两个成员函数：combine和isbn。此外，<br> 我们还将赋予Sales_data另一个成员函数用于返回售出书籍的平均价<br> 格，这个函数被命名为avg_price。因为avg_price的目的并非通用，所以<br> 它应该属于类的实现的一部分，而非接口的一部分。</p></li><li><p>定义（参见6.1节，第182页）和声明（参见6.1.2节，第186页）成<br> 员函数的方式与普通函数差不多。成员函数的声明必须在类的内部，它<br> 的定义则既可以在类的内部也可以在类的外部。作为接口组成部分的非<br> 成员函数，例如add、read和print等，它们的定义和声明都在类的外部。</p></li><li><p>由此可知，改进的Sales_data类应该如下所示：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    <span class="token comment">// new members: operations on Sales_data objects</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token comment">// data members are unchanged from § 2.6.1 (p. 72)</span>
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// nonmember Sales_data interface functions</span>
Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>Note</mark></li><li>定义在类内部的函数是隐式的inline函数（参见6.5.2节，第214页）。</li></ul><br><ul><li><p><mark>定义成员函数</mark></p></li><li><p>尽管所有成员都必须在类的内部声明，但是成员函数体可以定义在<br> 类内也可以定义在类外。对于Sales_data类来说，isbn函数定义在了类<br> 内，而combine和avg_price定义在了类外。</p></li><li><p>我们首先介绍isbn函数，它的参数列表为空，返回值是一个string对<br> 象：<code>std::string isbn() const { return bookNo; }</code></p></li><li><p>和其他函数一样，成员函数体也是一个块。在此例中，块只有一条<br> return语句，用于返回Sales_data对象的bookNo数据成员。关于isbn函数<br> 一件有意思的事情是：它是如何获得bookNo成员所依赖的对象的呢？</p></li><li><p><mark>引入this</mark></p></li><li><p>让我们再一次观察对isbn成员函数的调用：<code>total.isbn()</code></p></li><li><p>在这里，我们使用了点运算符（参见4.6节，第133页）来访问total<br> 对象的isbn成员，然后调用它。</p></li><li><p>7.6节（第268页）将介绍一种例外的形式，当我们调用成员函数<br> 时，实际上是在替某个对象调用它。如果isbn指向Sales_data的成员（例<br> 如bookNo），则它隐式地指向调用该函数的对象的成员。在上面所示<br> 的调用中，当isbn返回bookNo时，实际上它隐式地返回<code>total.bookNo。</code></p></li><li><p>成员函数通过一个名为this的额外的隐式参数来访问调用它的那个<br> 对象(拿存储来说的话需要将指向 挪移到该类对象的所存储的位置？)。<br> 当我们调用一个成员函数时，用请求该函数的对象地址初始化<br> this。例如，如果调用:<code> total.isbn()</code></p></li><li><p>则编译器负责把total的地址传递给isbn的隐式形参this，可以等价地<br> 认为编译器将该调用重写成了如下的形式：<br> // pseudo-code illustration of how a call to a member function is translated<br><code>Sales_data::isbn(&amp;total)</code></p></li><li><p>其中，调用Sales_data的isbn成员时传入了total的地址。</p></li><li><p>在成员函数内部，我们可以直接使用调用该函数的对象的成员，而<br> 无须通过成员访问运算符来做到这一点，因为this所指的正是这个对<br> 象。任何对类成员的直接访问都被看作this的隐式引用，也就是说，当<br> isbn使用bookNo时，它隐式地使用this指向的成员，就像我们书写了this-&gt;bookNo一样。</p></li><li><p>对于我们来说，this形参是隐式定义的。实际上，任何自定义名为<br> this的参数或变量的行为都是非法的。我们可以在成员函数体内部使用<br> this，因此尽管没有必要，但我们还是能把isbn定义成如下的形式：<br><code>std::string isbn() const { return this-&gt;bookNo; }</code></p></li><li><p>因为this的目的总是指向“这个”对象，所以this是一个常量指针（参<br> 见2.4.2节，第56页），我们不允许改变this中保存的地址。</p></li></ul><br><ul><li><p><mark>引入const成员函数</mark></p></li><li><p>isbn函数的另一个关键之处是紧随参数列表之后的const关键字，这<br> 里，const的作用是修改隐式this指针的类型。</p></li><li><p>默认情况下，this的类型是指向类类型非常量版本的常量指针。例<br> 如在Sales_data成员函数中，this的类型是Sales_data ＊const。尽管this是<br> 隐式的，但它仍然需要遵循初始化规则，意味着（在默认情况下）我们<br> 不能把this绑定到一个常量对象上（参见2.4.2节，第56页）。这一情况<br> 也就使得我们不能在一个常量对象上调用普通的成员函数。</p></li><li><p>如果isbn是一个普通函数而且this是一个普通的指针参数，则我们应<br> 该把this声明成const Sales_data ＊const。毕竟，在isbn的函数体内不会改<br> 变this所指的对象，所以把this设置为指向常量的指针有助于提高函数的<br> 灵活性。</p></li><li><p>然而，this是隐式的并且不会出现在参数列表中，所以在哪儿将this<br> 声明成指向常量的指针就成为我们必须面对的问题。C++语言的做法是<br> 允许把const关键字放在成员函数的参数列表之后，此时，紧跟在参数列<br> 表后面的const表示this是一个指向常量的指针。像这样使用const的成员<br> 函数被称作常量成员函数（const member function）。</p></li><li><p>可以把isbn的函数体想象成如下的形式：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// pseudo-code illustration of how the implicit this pointer is used</span>
<span class="token comment">// this code is illegal: we may not explicitly define the this pointer ourselves</span>
<span class="token comment">// note that this is a pointer to const because isbn is a const member</span>
std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>isbn<span class="token punctuation">;</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>因为this是指向常量的指针，所以常量成员函数不能改变调用它的<br> 对象的内容。在上例中，isbn可以读取调用它的对象的数据成员，但是<br> 不能写入新值。</p></li><li><p><mark>常量对象，以及常量对象的引用或指针都只能调用常量成员函数。</mark></p></li></ul><br><ul><li><p><mark>类作用域和成员函数</mark></p></li><li><p>回忆之前我们所学的知识，类本身就是一个作用域（参见2.6.1节，<br> 第64页）。类的成员函数的定义嵌套在类的作用域之内，因此，isbn中<br> 用到的名字bookNo其实就是定义在Sales_data内的数据成员。</p></li><li><p>值得注意的是，即使bookNo定义在isbn之后，isbn也还是能够使用<br> bookNo。就如我们将在7.4.1节（第254页）学习到的那样，编译器分两<br> 步处理类：首先编译成员的声明，然后才轮到成员函数体（如果有的<br> 话）。因此，成员函数体可以随意使用类中的其他成员而无须在意这些<br> 成员出现的次序。</p></li><li><p><mark>在类的外部定义成员函数</mark></p></li><li><p>像其他函数一样，当我们在类的外部定义成员函数时，成员函数的<br> 定义必须与它的声明匹配。也就是说，返回类型、参数列表和函数名都<br> 得与类内部的声明保持一致。如果成员被声明成常量成员函数，那么它<br> 的定义也必须在参数列表后明确指定const属性。同时，类外部定义的成<br> 员的名字必须包含它所属的类名：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>units_sold<span class="token punctuation">)</span>
        <span class="token keyword">return</span> revenue<span class="token operator">/</span>units_sold<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数名Sales_data：：avg_price使用作用域运算符（参见1.2节，第7<br> 页）来说明如下的事实：我们定义了一个名为avg_price的函数，并且该<br> 函数被声明在类Sales_data的作用域内。一旦编译器看到这个函数名，<br> 就能理解剩余的代码是位于类的作用域内的。因此，当avg_price使用<br> revenue和units_sold时，实际上它隐式地使用了Sales_data的成员。</li></ul><br><ul><li><mark>定义一个返回this对象的函数</mark></li><li>函数combine的设计初衷类似于复合赋值运算符+=，调用该函数的<br> 对象代表的是赋值运算符左侧的运算对象，右侧运算对象则通过显式的<br> 实参被传入函数：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span> <span class="token comment">// add the members of rhs into</span>
    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span> <span class="token comment">// the members of &#39;&#39;this&#39;&#39; object</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// return the object on which the function was called</span>
<span class="token punctuation">}</span>

当我们的交易处理程序调用如下的函数时，
total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update the running total</span>

total的地址被绑定到隐式的<span class="token keyword">this</span>参数上，而rhs绑定到了trans上。因
此，当combine执行下面的语句时，
units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span> <span class="token comment">// add the members of rhs into</span>

效果等同于求total<span class="token punctuation">.</span>units_sold和trans<span class="token punctuation">.</span>unit_sold的和，然后把结果保存
到total<span class="token punctuation">.</span>units_sold中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>该函数一个值得关注的部分是它的返回类型和返回语句。一般来<br> 说，当我们定义的函数类似于某个内置运算符时，应该令该函数的行为<br> 尽量模仿这个运算符。内置的赋值运算符把它的左侧运算对象当成左值<br> 返回（参见4.4节，第129页），因此为了与它保持一致，combine函数必<br> 须返回引用类型（参见6.3.2节，第202页）。因为此时的左侧运算对象<br> 是一个Sales_data的对象，所以返回类型应该是Sales_data&amp;。</p></li><li><p>如前所述，我们无须使用隐式的this指针访问函数调用者的某个具<br> 体成员，而是需要把调用函数的对象当成一个整体来访问：return *this;//返回调用该函数的对象</p></li><li><p>其中，return语句解引用this指针以获得执行该函数的对象，换句话<br> 说，上面的这个调用返回total的引用。</p></li></ul><h3 id="_7-1-2节练习" tabindex="-1"><a class="header-anchor" href="#_7-1-2节练习" aria-hidden="true">#</a> 7.1.2节练习</h3><ul><li>练习7.2：曾在2.6.2节的练习（第67页）中编写了一个Sales_data类，请<br> 向这个类添加combine和isbn成员。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.3：修改7.1.1节（第229页）的交易处理程序，令其使用这些成员。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> total<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sales_data trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.4：编写一个名为Person的类，使其表示人员的姓名和住址。使用<br> string对象存放这些元素，接下来的练习将不断充实这个类的其他特征。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.5：在你的Person类中提供一些操作使其能够返回姓名和住址。这<br> 些函数是否应该是const的呢？解释原因。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> 
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">auto</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-&gt;</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">auto</span> <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-&gt;</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

应该是<span class="token keyword">const</span>的。因为常量的Person对象也需要使用这些函数操作。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-3-定义类相关的非成员函数" tabindex="-1"><a class="header-anchor" href="#_7-1-3-定义类相关的非成员函数" aria-hidden="true">#</a> 7.1.3　定义类相关的非成员函数</h3><ul><li><p>类的作者常常需要定义一些辅助函数，比如add、read和print等。尽<br> 管这些函数定义的操作从概念上来说属于类的接口的组成部分，但它们<br> 实际上并不属于类本身</p></li><li><p>我们定义非成员函数的方式与定义其他函数一样，通常把函数的声<br> 明和定义分离开来（参见6.1.2节，第168页）。如果函数在概念上属于<br> 类但是不定义在类中，则它一般应与类声明（而非定义）在同一个头文<br> 件内。在这种方式下，用户使用接口的任何部分都只需要引入一个文件。</p></li><li><p><mark>Note</mark></p></li><li><p>一般来说，如果非成员函数是类接口的组成部分，则这些函数的声明应该与类在<br> 同一个头文件内。</p></li></ul><br><ul><li><mark>定义read和print函数</mark></li><li>下面的read和print函数与2.6.2节（第66页）中的代码作用一样，而<br> 且代码本身也非常相似：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// input transactions contain ISBN, number of copies sold, and sales price</span>
istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    is <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> price<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>read函数从给定流中将数据读到给定的对象里，print函数则负责将<br> 给定对象的内容打印到给定的流中。</p></li><li><p>除此之外，关于上面的函数还有两点是非常重要的。第一点，read<br> 和print分别接受一个各自IO类型的引用作为其参数，这是因为IO类属于<br> 不能被拷贝的类型，因此我们只能通过引用来传递它们（参见6.2.2节，<br> 第188页）。而且，因为读取和写入的操作会改变流的内容，所以两个<br> 函数接受的都是普通引用，而非对常量的引用。</p></li><li><p>第二点，print函数不负责换行。一般来说，执行输出任务的函数应<br> 该尽量减少对格式的控制，这样可以确保由用户代码来决定是否换行。</p></li></ul><br><ul><li><mark>定义add函数</mark></li><li>add函数接受两个Sales_data对象作为其参数，返回值是一个新的Sales_data，用于表示前两个对象的和：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span> <span class="token comment">// copy data members from lhs into sum</span>
    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add data members from rhs into sum</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在函数体中，我们定义了一个新的Sales_data对象并将其命名为<br> sum。sum将用于存放两笔交易的和，我们用lhs的副本来初始化sum。默<br> 认情况下，拷贝类的对象其实拷贝的是对象的数据成员。在拷贝工作完<br> 成之后，sum的bookNo、units_sold和revenue将和lhs一致。接下来我们<br> 调用combine函数，将rhs的units_sold和revenue添加给sum。最后，函数<br> 返回sum的副本。</li></ul><h3 id="_7-1-3节练习" tabindex="-1"><a class="header-anchor" href="#_7-1-3节练习" aria-hidden="true">#</a> 7.1.3节练习</h3><ul><li>练习7.6：对于函数add、read和print，定义你自己的版本。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// member functions.</span>
Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// nonmember functions</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    is <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> price<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>
    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.7：使用这些新函数重写7.1.2节（第233页）练习中的交易处理程序。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data total<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sales_data trans<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.8：为什么read函数将其Sales_data参数定义成普通的引用，而print将其参数定义成常量引用？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>因为read函数会改变对象的内容，而print函数不会
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>练习7.9：对于7.1.2节（第233页）练习中的代码，添加读取和打印Person对象的操作。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Person</span> 
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> is <span class="token operator">&gt;&gt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&gt;&gt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.10：在下面这条if语句中，条件部分的作用是什么？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//等价read(std::cin, data1);read(std::cin, data2);</span>
read函数的返回值是istream对象， <span class="token keyword">if</span>语句中条件部分的作用是从输入流中读取数据给两个data对象。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-4-构造函数" tabindex="-1"><a class="header-anchor" href="#_7-1-4-构造函数" aria-hidden="true">#</a> 7.1.4　构造函数</h3><ul><li><p>每个类都分别定义了它的对象被初始化的方式，类通过一个或几个<br> 特殊的成员函数来控制其对象的初始化过程，这些函数叫做构造函数<br> （constructor）。构造函数的任务是初始化类对象的数据成员，无论何<br> 时只要类的对象被创建，就会执行构造函数。</p></li><li><p>在这一节中，我们将介绍定义构造函数的基础知识。构造函数是一<br> 个非常复杂的问题，我们还会在7.5节（第257页）、15.7节（第551<br> 页）、18.1.3节（第689页）和第13章介绍更多关于构造函数的知识。</p></li><li><p>构造函数的名字和类名相同。和其他函数不一样的是，构造函数没<br> 有返回类型；除此之外类似于其他的函数，构造函数也有一个（可能为<br> 空的）参数列表和一个（可能为空的）函数体。类可以包含多个构造函<br> 数，和其他重载函数差不多（参见6.4节，第206页），不同的构造函数<br> 之间必须在参数数量或参数类型上有所区别。</p></li><li><p>不同于其他成员函数，<mark>构造函数不能被声明成const的</mark>（参见7.1.2<br> 节，第231页）。当我们创建类的一个const对象时，直到构造函数完成<br> 初始化过程，对象才能真正取得其“常量”属性。因此，构造函数在const<br> 对象的构造过程中可以向其写值。</p></li></ul><br><ul><li><p><mark>合成的默认构造函数</mark></p></li><li><p>我们的Sales_data类并没有定义任何构造函数，可是之前使用了<br> Sales_data对象的程序仍然可以正确地编译和运行。举个例子，第229页<br> 的程序定义了两个对象：<br><code> Sales_data total; // variable to hold the running sum</code><br><code> Sales_data trans; // variable to hold data for the next transaction</code></p></li><li><p>这时我们不禁要问：total和trans是如何初始化的呢？</p></li><li><p>我们没有为这些对象提供初始值，因此我们知道它们执行了默认初<br> 始化（参见2.2.1节，第40页）。类通过一个特殊的构造函数来控制默认<br> 初始化过程，这个函数叫做默认构造函数（default constructor）。默认<br> 构造函数无须任何实参</p></li><li><p>如我们所见，默认构造函数在很多方面都有其特殊性。其中之一<br> 是，如果我们的类没有显式地定义构造函数，那么编译器就会为我们隐<br> 式地定义一个默认构造函数。</p></li><li><p>编译器创建的构造函数又被称为合成的默认构造函数（synthesized<br> default constructor）。对于大多数类来说，这个合成的默认构造函数将<br> 按照如下规则初始化类的数据成员：</p><ul><li>如果存在类内的初始值（参见2.6.1节，第64页），用它来初始化成员</li><li>否则，默认初始化（参见2.2.1节，第40页）该成员。</li></ul></li><li><p>因为Sales_data为units_sold和revenue提供了初始值，所以合成的默<br> 认构造函数将使用这些值来初始化对应的成员；同时，它把bookNo默<br> 认初始化成一个空字符串。</p></li></ul><br><ul><li><p><mark>某些类不能依赖于合成的默认构造函数</mark></p></li><li><p>合成的默认构造函数只适合非常简单的类，比如现在定义的这个<br> Sales_data版本。对于一个普通的类来说，必须定义它自己的默认构造<br> 函数，原因有三：第一个原因也是最容易理解的一个原因就是编译器只<br> 有在发现类不包含任何构造函数的情况下才会替我们生成一个默认的构<br> 造函数。一旦我们定义了一些其他的构造函数，那么除非我们再定义一<br> 个默认的构造函数，否则类将没有默认构造函数。这条规则的依据是，<br> 如果一个类在某种情况下需要控制对象初始化，那么该类很可能在所有<br> 情况下都需要控制。</p></li><li><p><mark>Note</mark></p></li><li><p>只有当类没有声明任何构造函数时，编译器才会自动地生成默认构造函数。</p></li><li><p>第二个原因是对于某些类来说，合成的默认构造函数可能执行错误<br> 的操作。回忆我们之前介绍过的，<mark>如果定义在块中的内置类型或复合类<br> 型（比如数组和指针）的对象被默认初始化（参见2.2.1节，第40页），<br> 则它们的值将是未定义的</mark>。该准则同样适用于默认初始化的内置类型成<br> 员。因此，<mark>含有内置类型或复合类型成员的类应该在类的内部初始化这<br> 些成员，或者定义一个自己的默认构造函数。否则，用户在创建类的对<br> 象时就可能得到未定义的值</mark>。</p></li><li><p><mark>Warning</mark></p></li><li><p>如果类包含有内置类型或者复合类型的成员，则只有当这些成员全都被赋予了类<br> 内的初始值时，这个类才适合于使用合成的默认构造函数。</p></li><li><p>第三个原因是有的时候编译器不能为某些类合成默认的构造函数。<br> 例如，<mark>如果类中包含一个其他类类型的成员且这个成员的类型没有默认<br> 构造函数，那么编译器将无法初始化该成员</mark>。对于这样的类来说，我们<br> 必须自定义默认构造函数，否则该类将没有可用的默认构造函数。在<br> 13.1.6节（第449页）中我们将看到还有其他一些情况也会导致编译器无<br> 法生成一个正确的默认构造函数。</p></li></ul><br><ul><li><p><mark>定义Sales_data的构造函数</mark></p></li><li><p>对于我们的Sales_data类来说，我们将使用下面的参数定义4个不同<br> 的构造函数：<br> · 一个istream&amp;，从中读取一条交易信息。<br> · 一个const string&amp;，表示ISBN编号；一个unsigned，表示售出的图书数量；以及一个double，表示图书的售出价格。<br> · 一个const string&amp;，表示ISBN编号；编译器将赋予其他成员默认值。<br> · 一个空参数列表（即默认构造函数），正如刚刚介绍的，既然我们已经定义了其他构造函数，那么也必须定义一个默认构造函数。</p></li><li><p>给类添加了这些成员之后，将得到</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    <span class="token comment">// constructors added</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>p<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// other members as before</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li><p><mark>default的含义</mark></p></li><li><p>我们从解释默认构造函数的含义开始：<code>Sales_data() = default;</code></p></li><li><p>首先请明确一点：因为该构造函数不接受任何实参，所以它是一个<br> 默认构造函数。我们定义这个构造函数的目的仅仅是因为我们既需要其<br> 他形式的构造函数，也需要默认的构造函数。我们希望这个函数的作用<br> 完全等同于之前使用的合成默认构造函数。</p></li><li><p>在C++11新标准中，如果我们需要默认的行为，那么可以通过在参<br> 数列表后面写上= default来要求编译器生成构造函数。其中，= default<br> 既可以和声明一起出现在类的内部，也可以作为定义出现在类的外部。<br> 和其他函数一样，如果= default在类的内部，则默认构造函数是内联<br> 的；如果它在类的外部，则该成员默认情况下不是内联的。</p></li><li><p><mark>Warning</mark></p></li><li><p>上面的默认构造函数之所以对Sales_data有效，是因为我们为内置类型的数据成员<br> 提供了初始值。如果你的编译器不支持类内初始值，那么你的默认构造函数就应该使<br> 用构造函数初始值列表（马上就会介绍）来初始化类的每个成员。</p></li></ul><br><ul><li><mark>构造函数初始值列表</mark></li><li>接下来我们介绍类中定义的另外两个构造函数：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>
 <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>p<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这两个定义中出现了新的部分，即冒号以及冒号和花括号之间的代<br> 码，其中花括号定义了（空的）函数体。我们把新出现的部分称为构造<br> 函数初始值列表（constructor initialize list），它负责为新创建的对象的<br> 一个或几个数据成员赋初值。构造函数初始值是成员名字的一个列表，<br> 每个名字后面紧跟括号括起来的（或者在花括号内的）成员初始值。不<br> 同成员的初始化通过逗号分隔开来。</p></li><li><p>含有三个参数的构造函数分别使用它的前两个参数初始化成员<br> bookNo和units_sold，revenue的初始值则通过将售出图书总数和每本书<br> 单价相乘计算得到。</p></li><li><p>只有一个string类型参数的构造函数使用这个string对象初始化<br> bookNo，对于units_sold和revenue则没有显式地初始化。当某个数据成<br> 员被构造函数初始值列表忽略时，它将以与合成默认构造函数相同的方<br> 式隐式初始化。在此例中，这样的成员使用类内初始值初始化，因此只<br> 接受一个string参数的构造函数等价于</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// has the same behavior as the original constructor defined above</span>
<span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span>
 <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>通常情况下，构造函数使用类内初始值不失为一种好的选择，因为<br> 只要这样的初始值存在我们就能确保为成员赋予了一个正确的值。不<br> 过，如果你的编译器不支持类内初始值，则所有构造函数都应该显式地<br> 初始化每个内置类型的成员。</p></li><li><p>构造函数不应该轻易覆盖掉类内的初始值，除非新赋的值与原值不同。如果你不<br> 能使用类内初始值，则所有构造函数都应该显式地初始化每个内置类型的成员。</p></li><li><p>有一点需要注意，在上面的两个构造函数中函数体都是空的。这是<br> 因为这些构造函数的唯一目的就是为数据成员赋初值，一旦没有其他任<br> 务需要执行，函数体也就为空了。</p></li></ul><br><ul><li><mark>在类的外部定义构造函数</mark></li><li>与其他几个构造函数不同，以istream为参数的构造函数需要执行一<br> 些实际的操作。在它的函数体内，调用了read函数以给数据成员赋以初值：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// read will read a transaction from is into this object</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>构造函数没有返回类型，所以上述定义从我们指定的函数名字开<br> 始。和其他成员函数一样，当我们在类的外部定义构造函数时，必须指<br> 明该构造函数是哪个类的成员。因此，<code>Sales_data：：Sales_data</code>的含义<br> 是我们定义Sales_data类的成员，它的名字是Sales_data。又因为该成员<br> 的名字和类名相同，所以它是一个构造函数。</p></li><li><p>这个构造函数没有构造函数初始值列表，或者讲得更准确一点，它<br> 的构造函数初始值列表是空的。尽管构造函数初始值列表是空的，但是<br> 由于执行了构造函数体，所以对象的成员仍然能被初始化。</p></li><li><p>没有出现在构造函数初始值列表中的成员将通过相应的类内初始值<br> （如果存在的话）初始化，或者执行默认初始化。对于Sales_data来<br> 说，这意味着一旦函数开始执行，则bookNo将被初始化成空string对<br> 象，<code>而units_sold和revenue将是0。</code></p></li><li><p>为了更好地理解调用函数read的意义，要特别注意read的第二个参<br> 数是一个Sales_data对象的引用。在7.1.2节（第232页）中曾经提到过，<br> 使用this来把对象当成一个整体访问，而非直接访问对象的某个成员。<br> 因此在此例中，<code>我们使用＊this将“this”对象作为实参传递给read函数</code>。</p></li></ul><h3 id="_7-1-4节练习" tabindex="-1"><a class="header-anchor" href="#_7-1-4节练习" aria-hidden="true">#</a> 7.1.4节练习</h3><ul><li>练习7.11：在你的Sales_data类中添加构造函数，然后编写一段程序令其用到每个构造函数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// nonmember functions</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    is <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> price<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>
    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// member functions.</span>
<span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data item1<span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
    Sales_data <span class="token function">item2</span><span class="token punctuation">(</span><span class="token string">&quot;0-201-78345-X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
    Sales_data <span class="token function">item3</span><span class="token punctuation">(</span><span class="token string">&quot;0-201-78345-X&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
    Sales_data <span class="token function">item4</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.12：把只接受一个istream作为参数的构造函数定义移到类的内部。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Sales_data</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// member functions.</span>
Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// nonmember functions</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    is <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> price<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>
    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.13：使用istream构造函数重写第229页的程序。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data <span class="token function">total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Sales_data <span class="token function">trans</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No data?!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.14：编写一个构造函数，令其用我们提供的类内初始值显式地初始化成员。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">units_sold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.15：为你的Person类添加正确的构造函数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Person<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> sname<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> saddr<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">address</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Person</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">}</span>

	std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	is <span class="token operator">&gt;&gt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&gt;&gt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
	<span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	os <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
	<span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-5-拷贝、赋值和析构" tabindex="-1"><a class="header-anchor" href="#_7-1-5-拷贝、赋值和析构" aria-hidden="true">#</a> 7.1.5　拷贝、赋值和析构</h3><ul><li><p>除了定义类的对象如何初始化之外(初始化要放在第三步第四步？)，<br> 类还需要控制拷贝、赋值和销毁对象时发生的行为。<br> 对象在几种情况下会被拷贝，如我们初始化变量<br> 以及以值的方式传递或返回一个对象等（参见6.2.1节，第187页和6.3.2<br> 节，第200页）。当我们使用了赋值运算符（参见4.4节，第129页）时<br> 会发生对象的赋值操作。当对象不再存在时执行销毁的操作，比如一个<br> 局部对象会在创建它的块结束时被销毁（参见6.1.1节，第184页），当<br> vector对象（或者数组）销毁时存储在其中的对象也会被销毁。</p></li><li><p>如果我们不主动定义这些操作，则编译器将替我们合成它们。一般<br> 来说，编译器生成的版本将对对象的每个成员执行拷贝、赋值和销毁操<br> 作。例如在7.1.1节（第229页）的书店程序中，当编译器执行如下赋值<br> 语句时，<code>total = trans; // process the next book</code></p></li><li><p>它的行为与下面的代码相同</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// default assignment for Sales_data is equivalent to:</span>
total<span class="token punctuation">.</span>bookNo <span class="token operator">=</span> trans<span class="token punctuation">.</span>bookNo<span class="token punctuation">;</span>
total<span class="token punctuation">.</span>units_sold <span class="token operator">=</span> trans<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
total<span class="token punctuation">.</span>revenue <span class="token operator">=</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们将在第13章中介绍如何自定义上述操作</li></ul><br><ul><li><p><mark>某些类不能依赖于合成的版本</mark></p></li><li><p>尽管编译器能替我们合成拷贝、赋值和销毁的操作，但是必须要清<br> 楚的一点是，对于某些类来说合成的版本无法正常工作。特别是，当类<br><mark>需要分配类对象之外的资源时</mark>，合成的版本常常会失效。举个例子，第<br> 12章将介绍C++程序是如何分配和管理动态内存的。而在13.1.4节（第<br> 447页）我们将会看到，管理动态内存的类通常不能依赖于上述操作的<br> 合成版本。</p></li><li><p>不过值得注意的是，很多需要动态内存的类能（而且应该）使用<br> vector对象或者string对象管理必要的存储空间。使用vector或者string的<br> 类能避免分配和释放内存带来的复杂性。</p></li><li><p>进一步讲，如果类包含vector或者string成员，则其拷贝、赋值和销<br> 毁的合成版本能够正常工作。当我们对含有vector成员的对象执行拷贝<br> 或者赋值操作时，vector类会设法拷贝或者赋值成员中的元素。当这样<br> 的对象被销毁时，将销毁vector对象，也就是依次销毁vector中的每一个<br> 元素。这一点与string是非常类似的。</p></li><li><p><mark>Warning</mark></p></li><li><p>在学习第13章关于如何自定义操作的知识之前，<br><mark>类中所有分配的资源都应该直接以类的数据成员的形式存储</mark></p></li><li><p>大概意思就是 不要申请其它的不是数据成员的内存空间</p></li></ul><h2 id="_7-2-访问控制与封装" tabindex="-1"><a class="header-anchor" href="#_7-2-访问控制与封装" aria-hidden="true">#</a> 7.2　访问控制与封装</h2><ul><li><p>到目前为止，我们已经为类定义了接口，但并没有任何机制强制用<br> 户使用这些接口。我们的类还没有封装，也就是说，用户可以直达<br> Sales_data对象的内部并且控制它的具体实现细节。在C++语言中，我们<br> 使用访问说明符（access specifiers）加强类的封装性：</p><ul><li>定义在public说明符之后的成员在整个程序内可被访问，public成员定义类的接口。</li><li>定义在private说明符之后的成员可以被类的成员函数访问，但是不能被使用该类的代码访问，private部分封装了（即隐藏了）类的实现细节。</li></ul></li><li><p>再一次定义Sales_data类，其新形式如下所示：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span> <span class="token comment">// access specifier added</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>p<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    Sales_data <span class="token operator">&amp;</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span> <span class="token comment">// access specifier added</span>
    <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
        <span class="token punctuation">{</span> <span class="token keyword">return</span> units_sold <span class="token operator">?</span> revenue<span class="token operator">/</span>units_sold <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>作为接口的一部分，构造函数和部分成员函数（即isbn和combine）<br> 紧跟在public说明符之后；而数据成员和作为实现部分的函数则跟在<br> private说明符后面。</p></li><li><p>一个类可以包含0个或多个访问说明符，而且对于某个访问说明符<br> 能出现多少次也没有严格限定。每个访问说明符指定了接下来的成员的<br> 访问级别，其有效范围直到出现下一个访问说明符或者到达类的结尾处为止。</p></li></ul><br><ul><li><p><mark>使用class或struct关键字</mark></p></li><li><p>在上面的定义中我们还做了一个微妙的变化，我们使用了class关键<br> 字而非struct开始类的定义。这种变化仅仅是形式上有所不同，实际上<br> 我们可以使用这两个关键字中的任何一个定义类。唯一的一点区别是，<br> struct和class的默认访问权限不太一样。</p></li><li><p>类可以在它的第一个访问说明符之前定义成员，对这种成员的访问<br> 权限依赖于类定义的方式。如果我们使用struct关键字，则定义在第一<br> 个访问说明符之前的成员是public的；相反，如果我们使用class关键<br> 字，则这些成员是private的。</p></li><li><p>出于统一编程风格的考虑，当我们希望定义的类的所有成员是<br> public的时，使用struct；反之，如果希望成员是private的，使用class。</p></li><li><p><mark>Warning</mark></p></li><li><p>使用class和struct定义类唯一的区别就是默认的访问权限。</p></li></ul><h3 id="_7-2节练习" tabindex="-1"><a class="header-anchor" href="#_7-2节练习" aria-hidden="true">#</a> 7.2节练习</h3><ul><li>练习7.16：在类的定义中对于访问说明符出现的位置和次数有限定吗？<br> 如果有，是什么？什么样的成员应该定义在public说明符之后？什么样<br> 的成员应该定义在private说明符之后？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>在类的定义中对于访问说明符出现的位置和次数没有限定。

每个访问说明符指定了接下来的成员的访问级别，其有效范围直到出现下一个访问说明符或者达到类的结尾处为止。

如果某个成员能够在整个程序内都被访问，那么它应该定义为<span class="token keyword">public</span><span class="token punctuation">;</span> 如果某个成员只能在类内部访问，那么它应该定义为<span class="token keyword">private</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>练习7.17：使用class和struct时有区别吗？如果有，是什么？:<br> class和struct的唯一区别是默认的访问级别不同。</p></li><li><p>练习7.18：封装是何含义？它有什么用处？<br> 将类内部分成员设置为外部不可见，而提供部分接口给外面，这样的行为叫做封装。<br> 用处：<br> 1.确保用户的代码不会无意间破坏封装对象的状态。<br> 2.被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。</p></li><li><p>练习7.19：在你的Person类中，你将把哪些成员声明成public的？哪些声明成private的？解释你这样做的原因。<br> 构造函数、getName()、getAddress()函数将设为public。 name和 address 将设为private。<br> 函数是暴露给外部的接口，因此要设为public； 而数据则应该隐藏让外部不可见。</p></li></ul><h3 id="_7-2-1-友元" tabindex="-1"><a class="header-anchor" href="#_7-2-1-友元" aria-hidden="true">#</a> 7.2.1　友元</h3><ul><li><p>既然Sales_data的数据成员是private的，我们的read、print和add函数<br> 也就无法正常编译了，这是因为尽管这几个函数是类的接口的一部分，<br> 但它们不是类的成员。</p></li><li><p>类可以允许其他类或者函数访问它的非公有成员，方法是令其他类<br> 或者函数成为它的友元（friend）。如果类想把一个函数作为它的友<br> 元，只需要增加一条以friend关键字开始的函数声明语句即可：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
<span class="token comment">// friend declarations for nonmember Sales_data operations added</span>
<span class="token keyword">friend</span> Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// other members and access specifiers as before</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>p<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    Sales_data <span class="token operator">&amp;</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// declarations for nonmember parts of the Sales_data interface</span>
Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>友元声明只能出现在类定义的内部，但是在类内出现的具体位置不<br> 限。友元不是类的成员也不受它所在区域访问控制级别的约束。我们将<br> 在7.3.4节（第250页）介绍更多关于友元的知识。</p></li><li><p>一般来说，最好在类定义开始或结束前的位置集中声明友元.</p></li></ul><br><ul><li><p><mark>关键概念：封装的益处</mark></p></li><li><p>封装有两个重要的优点：<br> · 确保用户代码不会无意间破坏封装对象的状态。<br> · 被封装的类的具体实现细节可以随时改变，而无须调整用户级别的代码。</p></li><li><p>一旦把数据成员定义成private的，类的作者就可以比较自由地修改数据了。当实<br> 现部分改变时，我们只需要检查类的代码本身以确认这次改变有什么影响；换句话<br> 说，只要类的接口不变，用户代码就无须改变。如果数据是public的，则所有使用了原<br> 来数据成员的代码都可能失效，这时我们必须定位并重写所有依赖于老版本实现的代<br> 码，之后才能重新使用该程序。</p></li><li><p>把数据成员的访问权限设成private还有另外一个好处，这么做能防止由于用户的<br> 原因造成数据被破坏。如果我们发现有程序缺陷破坏了对象的状态，则可以在有限的<br> 范围内定位缺陷：因为只有实现部分的代码可能产生这样的错误。因此，将查错限制<br> 在有限范围内将能极大地降低维护代码及修正程序错误的难度。</p></li><li><p>尽管当类的定义发生改变时无须更改用户代码，但是使用了该类的源文件必须重新编译。</p></li></ul><br><ul><li><p><mark>友元的声明</mark></p></li><li><p>友元的声明仅仅指定了访问的权限，而非一个通常意义上的函数声<br> 明。如果我们希望类的用户能够调用某个友元函数，那么我们就必须在<br> 友元声明之外再专门对函数进行一次声明。</p></li><li><p>为了使友元对类的用户可见，我们通常把友元的声明与类本身放置<br> 在同一个头文件中（类的外部）。因此，我们的Sales_data头文件应该<br> 为read、print和add提供独立的声明（除了类内部的友元声明之外）。</p></li><li><p>许多编译器并未强制限定友元函数必须在使用之前在类的外部声明。</p></li><li><p>一些编译器允许在尚无友元函数的初始声明的情况下就调用它。不<br> 过即使你的编译器支持这种行为，最好还是提供一个独立的函数声明。<br> 这样即使你更换了一个有这种强制要求的编译器，也不必改变代码。</p></li></ul><h3 id="_7-2-1节练习" tabindex="-1"><a class="header-anchor" href="#_7-2-1节练习" aria-hidden="true">#</a> 7.2.1节练习</h3><ul><li><p>练习7.20：友元在什么时候有用？请分别列举出使用友元的利弊。<br> 当其他类或者函数想要访问当前类的私有变量时，这个时候应该用友元。<br> 利：<br> 与当前类有关的接口函数能直接访问类的私有变量。<br> 弊：<br> 牺牲了封装性与可维护性。</p></li><li><p>练习7.21：修改你的Sales_data类使其隐藏实现的细节。你之前编写的关<br> 于Sales_data操作的程序应该继续使用，借助类的新定义重新编译该程<br> 序，确保其工作正常。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// member functions.</span>
Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// friend functions</span>
std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    is <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>bookNo <span class="token operator">&gt;&gt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&gt;&gt;</span> price<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>
    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.22：修改你的Person类使其隐藏实现的细节。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string sname<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string saddr<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">address</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Person</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    std<span class="token double-colon punctuation">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    is <span class="token operator">&gt;&gt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&gt;&gt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
    <span class="token keyword">return</span> is<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    os <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-3-类的其他特性" tabindex="-1"><a class="header-anchor" href="#_7-3-类的其他特性" aria-hidden="true">#</a> 7.3　类的其他特性</h2><ul><li>虽然Sales_data类非常简单，但是通过它我们已经了解C++语言中关<br> 于类的许多语法要点。在本节中，我们将继续介绍Sales_data没有体现<br> 出来的一些类的特性。这些特性包括：类型成员、类的成员的类内初始<br> 值、可变数据成员、内联成员函数、从成员函数返回＊this、关于如何<br> 定义并使用类类型及友元类的更多知识。</li></ul><h3 id="_7-3-1-类成员再探" tabindex="-1"><a class="header-anchor" href="#_7-3-1-类成员再探" aria-hidden="true">#</a> 7.3.1　类成员再探</h3><ul><li><p>为了展示这些新的特性，我们需要定义一对相互关联的类，它们分<br> 别是Screen和Window_mgr。</p></li><li><p><mark>定义一个类型成员</mark></p></li><li><p>Screen表示显示器中的一个窗口。每个Screen包含一个用于保存<br> Screen内容的string成员和三个string：：size_type类型的成员，它们分别<br> 表示光标的位置以及屏幕的高和宽。</p></li><li><p>除了定义数据和函数成员之外，类还可以自定义某种类型在类中的<br> 别名。由类定义的类型名字和其他成员一样存在访问限制，可以是<br> public或者private中的一种：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type pos<span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>我们在Screen的public部分定义了pos，这样用户就可以使用这个名<br> 字。Screen的用户不应该知道Screen使用了一个string对象来存放它的数<br> 据，因此通过把pos定义成public成员可以隐藏Screen实现的细节。</p></li><li><p>关于pos的声明有两点需要注意。首先，我们使用了typedef（参见<br> 2.5.1节，第60页），也可以等价地使用类型别名（参见2.5.1节，第60页）：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// alternative way to declare a type member using a type alias</span>
    <span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>
    <span class="token comment">// other members as before</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其次，用来定义类型的成员必须先定义后使用，这一点与普通成员<br> 有所区别，具体原因将在7.4.1节（第254页）解释。因此，类型成员通<br> 常出现在类开始的地方。</li></ul><br><ul><li><mark>Screen类的成员函数</mark></li><li>要使我们的类更加实用，还需要添加一个构造函数令用户能够定义<br> 屏幕的尺寸和内容，以及其他两个成员，分别负责移动光标和读取给定<br> 位置的字符：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type pos<span class="token punctuation">;</span>
    <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment">// needed because Screen has another constructor</span>
    <span class="token comment">// cursor initialized to 0 by its in-class initializer</span>
    <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">contents</span><span class="token punctuation">(</span>ht <span class="token operator">*</span> wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">// get the character at the cursor</span>
        <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// implicitly inline</span>
    <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// explicitly inline</span>
    Screen <span class="token operator">&amp;</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// can be made inline later</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>因为我们已经提供了一个构造函数，所以编译器将不会自动生成默<br> 认的构造函数。如果我们的类需要默认构造函数，必须显式地把它声明<br> 出来。在此例中，我们使用=default告诉编译器为我们合成默认的构造<br> 函数（参见7.1.4节，第237页）。</p></li><li><p>需要指出的是，第二个构造函数（接受三个参数）为cursor成员隐<br> 式地使用了类内初始值（参见7.1.4节，第238页）。如果类中不存在<br> cursor的类内初始值，我们就需要像其他成员一样显式地初始化cursor了。</p></li></ul><br><ul><li><mark>令成员作为内联函数</mark></li><li>在类中，常有一些规模较小的函数适合于被声明成内联函数。如我<br> 们之前所见的，定义在类内部的成员函数是自动inline的（参见6.5.2<br> 节，第213页）。因此，Screen的构造函数和返回光标所指字符的get函<br> 数默认是inline函数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">inline</span> <span class="token comment">// we can specify inline on the definition</span>
Screen <span class="token operator">&amp;</span><span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    pos row <span class="token operator">=</span> r <span class="token operator">*</span> width<span class="token punctuation">;</span> <span class="token comment">// compute the row location</span>
    cursor <span class="token operator">=</span> row <span class="token operator">+</span> c <span class="token punctuation">;</span> <span class="token comment">// move cursor to the column within that row</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// return this object as an lvalue</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">// declared as inline in the</span>
<span class="token keyword">class</span>
<span class="token punctuation">{</span>
    pos row <span class="token operator">=</span> r <span class="token operator">*</span> width<span class="token punctuation">;</span> <span class="token comment">// compute row location</span>
    <span class="token keyword">return</span> contents<span class="token punctuation">[</span>row <span class="token operator">+</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// return character at the given column</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>我们可以在类的内部把inline作为声明的一部分显式地声明成员函<br> 数，同样的，也能在类的外部用inline关键字修饰函数的定义：虽然我<br> 们无须在声明和定义的地方同时说明inline，但这么做其实是合法的。<br> 不过，最好只在类外部定义的地方说明inline，这样可以使类更容易理解。</p></li><li><p>和我们在头文件中定义inline函数的原因一样（参见6.5.2节，第214页），inline成<br> 员函数也应该与相应的类定义在同一个头文件中。</p></li></ul><br><ul><li><p><mark>重载成员函数</mark></p></li><li><p>和非成员函数一样，成员函数也可以被重载（参见6.4节，第206<br> 页），只要函数之间在参数的数量和/或类型上有所区别就行。成员函<br> 数的函数匹配过程（参见6.4节，第208页）同样与非成员函数非常类似。</p></li><li><p>举个例子，我们的Screen类定义了两个版本的get函数。一个版本返<br> 回光标当前位置的字符；另一个版本返回由行号和列号确定的位置的字<br> 符。编译器根据实参的数量来决定运行哪个版本的函数：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Screen myscreen<span class="token punctuation">;</span>
<span class="token keyword">char</span> ch <span class="token operator">=</span> myscreen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// calls Screen::get()</span>
ch <span class="token operator">=</span> myscreen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calls Screen::get(pos, pos)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li><p><mark>可变数据成员</mark></p></li><li><p>有时（但并不频繁）会发生这样一种情况，我们希望能修改类的某<br> 个数据成员，即使是在一个const成员函数内。可以通过在变量的声明中<br> 加入mutable关键字做到这一点。</p></li><li><p>一个可变数据成员（mutable data member）永远不会是const，即使<br> 它是const对象的成员。因此，一个const成员函数可以改变一个可变成<br> 员的值。举个例子，我们将给Screen添加一个名为access_ctr的可变成<br> 员，通过它我们可以追踪每个Screen的成员函数被调用了多少次：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">some_member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">mutable</span> size_t access_ctr<span class="token punctuation">;</span> <span class="token comment">// may change even in a const object</span>
    <span class="token comment">// other members as before</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">some_member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token operator">++</span>access_ctr<span class="token punctuation">;</span> <span class="token comment">// keep a count of the calls to any member function</span>
    <span class="token comment">// whatever other work this member needs to do</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>尽管some_member是一个const成员函数，它仍然能够改变access_ctr<br> 的值。该成员是个可变成员，因此任何成员函数，包括const函数在内都<br> 能改变它的值。</li></ul><br><ul><li><mark>类数据成员的初始值</mark></li><li>在定义好Screen类之后，我们将继续定义一个窗口管理类并用它表<br> 示显示器上的一组Screen。这个类将包含一个Screen类型的vector，每个<br> 元素表示一个特定的Screen。默认情况下，我们希望Window_mgr类开<br> 始时总是拥有一个默认初始化的Screen。在C++11新标准中，最好的方<br> 式就是把这个默认值声明成一个类内初始值（参见2.6.1节，第64页）：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// Screens this Window_mgr is tracking</span>
    <span class="token comment">// by default, a Window_mgr has one standard sized blank Screen</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">&gt;</span> screens<span class="token punctuation">{</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>当我们初始化类类型的成员时，需要为构造函数传递一个符合成员<br> 类型的实参。在此例中，我们使用一个单独的元素值对vector成员执行<br> 了列表初始化（参见3.3.1节，第87页），这个Screen的值被传递给<br><code>vector&lt;Screen&gt;</code>的构造函数，从而创建了一个单元素的vector对象。具体<br> 地说，Screen的构造函数接受两个尺寸参数和一个字符值，创建了一个<br> 给定大小的空白屏幕对象。</p></li><li><p>如我们之前所知的，类内初始值必须使用=的初始化形式（初始化<br> Screen的数据成员时所用的）或者花括号括起来的直接初始化形式（初<br> 始化screens所用的）。</p></li><li><p><mark>当我们提供一个类内初始值时，必须以符号=或者花括号表示。</mark></p></li></ul><h3 id="_7-3-1节练习" tabindex="-1"><a class="header-anchor" href="#_7-3-1节练习" aria-hidden="true">#</a> 7.3.1节练习</h3><ul><li>练习7.23：编写你自己的Screen类。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>

        <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>

        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width<span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span><span class="token operator">:</span>
        pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.24：给你的Screen类添加三个构造函数：一个默认构造函数；另<br> 一个构造函数接受宽和高的值，然后将contents初始化成给定数量的空<br> 白；第三个构造函数接受宽和高的值以及一个字符，该字符作为初始化<br> 之后屏幕的内容。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>

        <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
        <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 2</span>
        <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 3</span>

        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width<span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span><span class="token operator">:</span>
        pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.25：Screen能安全地依赖于拷贝和赋值操作的默认版本吗？如果<br> 能，为什么？如果不能，为什么？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>能。 Screen的成员只有内置类型和string，因此能安全地依赖于拷贝和赋值操作的默认版本。

管理动态内存的类则不能依赖于拷贝和赋值操作的默认版本，而且也应该尽量使用string和vector来避免动态管理内存的复杂性。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.26：将Sales_data：：avg_price定义成内联函数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> units_sold <span class="token operator">?</span> revenue<span class="token operator">/</span>units_sold <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-2-返回-this的成员函数" tabindex="-1"><a class="header-anchor" href="#_7-3-2-返回-this的成员函数" aria-hidden="true">#</a> 7.3.2　返回*this的成员函数</h3><ul><li>接下来我们继续添加一些函数，它们负责设置光标所在位置的字符<br> 或者其他任一给定位置的字符:</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Screen <span class="token operator">&amp;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Screen <span class="token operator">&amp;</span><span class="token function">set</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// other members as before</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> Screen <span class="token operator">&amp;</span><span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// set the new value at the current cursor location</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// return this object as an lvalue</span>
<span class="token punctuation">}</span>
<span class="token keyword">inline</span> Screen <span class="token operator">&amp;</span><span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos col<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span> <span class="token comment">// set specified location to given value</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// return this object as an lvalue</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>和move操作一样，我们的set成员的返回值是调用set的对象的引用<br> （参见7.1.2节，第232页）。返回引用的函数是左值的（参见6.3.2节，<br> 第202页），意味着这些函数返回的是对象本身而非对象的副本。如果<br> 我们把一系列这样的操作连接在一条表达式中的话：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// move the cursor to a given position, and set that character</span>
myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这些操作将在同一个对象上执行。在上面的表达式中，我们首先移<br> 动myScreen内的光标，然后设置myScreen的contents成员。也就是说，<br> 上述语句等价于</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myScreen<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果我们令move和set返回Screen而非Screen&amp;，则上述语句的行为<br> 将大不相同。在此例中等价于：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// if move returns Screen not Screen&amp;</span>
Screen temp <span class="token operator">=</span> myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the return value would be copied</span>
temp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the contents inside myScreen would be unchanged</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>假如当初我们定义的返回类型不是引用，则move的返回值将是＊<br> this的副本（参见6.3.2节，第201页），因此调用set只能改变临时副本，<br> 而不能改变myScreen的值。</li></ul><br><ul><li><p><mark>从const成员函数返回＊this</mark></p></li><li><p>接下来，我们继续添加一个名为diplay的操作，它负责打印Screen<br> 的内容。我们希望这个函数能和move以及set出现在同一序列中，因此<br> 类似于move和set，diplay函数也应该返回执行它的对象的引用。</p></li><li><p>从逻辑上来说，显示一个Screen并不需要改变它的内容，因此我们<br> 令diplay为一个const成员，此时，this将是一个指向const的指针而＊this<br> 是const对象。由此推断，display的返回类型应该是const Sales_data&amp;。<br> 然而，如果真的令diplay返回一个const的引用，则我们将不能把display<br> 嵌入到一组动作的序列中去：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Screen myScreen<span class="token punctuation">;</span>
<span class="token comment">// if display returns a const reference, the call to set is an error</span>
myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>即使myScreen是个非常量对象，对set的调用也无法通过编译。问题<br> 在于display的const版本返回的是常量引用，而我们显然无权set一个常量对象。</p></li><li><p>一个const成员函数如果以引用的形式返回＊this，那么它的返回类型将是常量引用。</p></li></ul><br><ul><li><p><mark>基于const的重载</mark></p></li><li><p>通过区分成员函数是否是const的，我们可以对其进行重载，其原因<br> 与我们之前根据指针参数是否指向const（参见6.4节，第208页）而重载<br> 函数的原因差不多。具体说来，因为非常量版本的函数对于常量对象是<br> 不可用的，所以我们只能在一个常量对象上调用const成员函数。另一方<br> 面，虽然可以在非常量对象上调用常量版本或非常量版本，但显然此时<br> 非常量版本是一个更好的匹配。</p></li><li><p>在下面的这个例子中，我们将定义一个名为do_display的私有成<br> 员，由它负责打印Screen的实际工作。所有的display操作都将调用这个<br> 函数，然后返回执行操作的对象：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// display overloaded on whether the object is const or not</span>
    Screen <span class="token operator">&amp;</span><span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> Screen <span class="token operator">&amp;</span><span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span>
        <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// function to do the work of displaying a Screen</span>
    <span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token comment">// other members as before</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>和我们之前所学的一样，当一个成员调用另外一个成员时，this指<br> 针在其中隐式地传递。因此，当display调用do_display时，它的this指针<br> 隐式地传递给do_display。而当display的非常量版本调用do_display时，<br> 它的this指针将隐式地从指向非常量的指针转换成指向常量的指针（参<br> 见4.11.2节，第144页）。</p></li><li><p>当do_display完成后，display函数各自返回解引用this所得的对象。<br> 在非常量版本中，this指向一个非常量对象，因此display返回一个普通<br> 的（非常量）引用；而const成员则返回一个常量引用。</p></li><li><p>当我们在某个对象上调用display时，该对象是否是const决定了应该<br> 调用display的哪个版本：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Screen <span class="token function">blank</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myScreen<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calls non const version</span>
blank<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calls const version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ul><li><mark>建议：对于公共代码使用私有功能函数</mark></li><li>有些读者可能会奇怪为什么我们要费力定义一个单独的do_display函数。毕竟，对do_display的调用并不比do_display函数内部所做的操作简单多少。为什么还要这么做呢？实际上我们是出于以下原因的： <ul><li>一个基本的愿望是避免在多处使用同样的代码。</li><li>我们预期随着类的规模发展，display函数有可能变得更加复杂，此时，把相应的操作写在一处而非两处的作用就比较明显了。</li><li>我们很可能在开发过程中给do_display函数添加某些调试信息，而这些信息将在代码的最终产品版本中去掉。显然，只在do_display一处添加或删除这些信息要更容易一些。</li><li>这个额外的函数调用不会增加任何开销。因为我们在类内部定义了do_display，所以它隐式地被声明成内联函数。这样的话，调用do_display就不会带来任何额外的运行时开销。</li></ul></li><li>在实践中，设计良好的C++代码常常包含大量类似于do_display的小函数，通过调<br> 用这些函数，可以完成一组其他函数的“实际”工作。</li></ul><h3 id="_7-3-2节练习" tabindex="-1"><a class="header-anchor" href="#_7-3-2节练习" aria-hidden="true">#</a> 7.3.2节练习</h3><ul><li>练习7.27：给你自己的Screen类添加move、set和display函数，通过执行<br> 下面的代码检验你的类是否正确。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>


增加代码：
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cursor <span class="token operator">=</span> r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width<span class="token operator">+</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

测试代码：
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>练习7.28：如果move、set和display函数的返回类型不是Screen&amp;而是<br> Screen，则在上一个练习中将会发生什么情况？</p></li><li><p>如果返回类型是Screen，那么move返回的是*this的一个副本，因此set函数只能改变临时副本而不能改变myScreen的值。</p></li><li><p>练习7.29：修改你的Screen类，令move、set和display函数返回Screen并<br> 检查程序的运行结果，在上一个练习中你的推测正确吗？</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>推测正确
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">with</span> <span class="token char">&#39;&amp;&#39;</span></span>
XXXXXXXXXXXXXXXXXXXX#XXXX
XXXXXXXXXXXXXXXXXXXX#XXXX
                    <span class="token operator">^</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">without</span> <span class="token char">&#39;&amp;&#39;</span></span>
XXXXXXXXXXXXXXXXXXXX#XXXX
XXXXXXXXXXXXXXXXXXXXXXXXX
                    <span class="token operator">^</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习7.30：通过this指针使用成员的做法虽然合法，但是有点多余。讨<br> 论显式地使用指针访问成员的优缺点。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>优点：

程序的意图更明确

函数的参数可以与成员同名，如

  <span class="token keyword">void</span> <span class="token function">setAddr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span> <span class="token punctuation">}</span>
缺点：

有时候显得有点多余，如

std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>addr<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-3-类类型" tabindex="-1"><a class="header-anchor" href="#_7-3-3-类类型" aria-hidden="true">#</a> 7.3.3　类类型</h3><ul><li>每个类定义了唯一的类型。对于两个类来说，即使它们的成员完全<br> 一样，这两个类也是两个不同的类型。例如：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">First</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> memi<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Second</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> memi<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
First obj1<span class="token punctuation">;</span>
Second obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> <span class="token comment">// error: obj1 and obj2 have different types</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>即使两个类的成员列表完全一致，它们也是不同的类型。对于一个类来说，它的<br> 成员和其他任何类（或者任何其他作用域）的成员都不是一回事儿。</p></li><li><p>我们可以把类名作为类型的名字使用，从而直接指向类类型。或<br> 者，我们也可以把类名跟在关键字class或struct后面：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Sales_data item1<span class="token punctuation">;</span> <span class="token comment">// default-initialized object of type Sales_data</span>
<span class="token keyword">class</span> <span class="token class-name">Sales_data</span> item1<span class="token punctuation">;</span> <span class="token comment">// equivalent declaration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面这两种使用类类型的方式是等价的，其中第二种方式从C语言<br> 继承而来，并且在C++语言中也是合法的。</li></ul><br><ul><li><p><mark>类的声明</mark></p></li><li><p>就像可以把函数的声明和定义分离开来一样（参见6.1.2节，第186<br> 页），我们也能仅仅声明类而暂时不定义它：<br><code>class Screen; // declaration of the Screen class</code></p></li><li><p>这种声明有时被称作前向声明（forward declaration），它向程序中<br> 引入了名字Screen并且指明Screen是一种类类型。对于类型Screen来说，<br> 在它声明之后定义之前是一个不完全类型（incomplete type），也就是<br> 说，此时我们已知Screen是一个类类型，但是不清楚它到底包含哪些成员。</p></li><li><p>不完全类型只能在非常有限的情景下使用：可以定义指向这种类型<br> 的指针或引用，也可以声明（但是不能定义）以不完全类型作为参数或<br> 者返回类型的函数。</p></li><li><p>对于一个类来说，在我们创建它的对象之前该类必须被定义过，而<br> 不能仅仅被声明。否则，编译器就无法了解这样的对象需要多少存储空<br> 间。类似的，类也必须首先被定义，然后才能用引用或者指针访问其成<br> 员。毕竟，如果类尚未定义，编译器也就不清楚该类到底有哪些成员。</p></li><li><p>在7.6节（第268页）中我们将描述一种例外的情况：直到类被定义<br> 之后数据成员才能被声明成这种类类型。换句话说，我们必须首先完成<br> 类的定义，然后编译器才能知道存储该数据成员需要多少空间。因为只<br> 有当类全部完成后类才算被定义，所以一个类的成员类型不能是该类自<br> 己。然而，一旦一个类的名字出现后，它就被认为是声明过了（但尚未<br> 定义），因此类允许包含指向它自身类型的引用或指针：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Link_screen</span> <span class="token punctuation">{</span>
    Screen window<span class="token punctuation">;</span>
    Link_screen <span class="token operator">*</span>next<span class="token punctuation">;</span>
    Link_screen <span class="token operator">*</span>prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-3节练习" tabindex="-1"><a class="header-anchor" href="#_7-3-3节练习" aria-hidden="true">#</a> 7.3.3节练习</h3><ul><li>练习7.31：定义一对类X和Y，其中X包含一个指向Y的指针，而Y包含一个类型为X的对象。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">{</span>
    Y<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>	
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">{</span>
    X x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-4-友元再探" tabindex="-1"><a class="header-anchor" href="#_7-3-4-友元再探" aria-hidden="true">#</a> 7.3.4　友元再探</h3><ul><li><p>我们的Sales_data类把三个普通的非成员函数定义成了友元（参见<br> 7.2.1节，第241页）。类还可以把其他的类定义成友元，也可以把其他<br> 类（之前已定义过的）的成员函数定义成友元。此外，友元函数能定义<br> 在类的内部，这样的函数是隐式内联的。</p></li><li><p><mark>类之间的友元关系</mark></p></li><li><p>举个友元类的例子，我们的Window_mgr类（参见7.3.1节，第245<br> 页）的某些成员可能需要访问它管理的Screen类的内部数据。例如，假<br> 设我们需要为Window_mgr添加一个名为clear的成员，它负责把一个指<br> 定的Screen的内容都设为空白。为了完成这一任务，clear需要访问<br> Screen的私有成员；而要想令这种访问合法，Screen需要把Window_mgr<br> 指定成它的友元：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
    <span class="token comment">// Window_mgr members can access the private parts of class Screen</span>
    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Window_mgr</span><span class="token punctuation">;</span>
    <span class="token comment">// ... rest of the Screen class</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果一个类指定了友元类，则友元类的成员函数可以访问此类包括<br> 非公有成员在内的所有成员。通过上面的声明，Window_mgr被指定为<br> Screen的友元，因此我们可以将Window_mgr的clear成员写成如下的形式：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// location ID for each screen on the window</span>
    <span class="token keyword">using</span> ScreenIndex <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>
    <span class="token comment">// reset the Screen at the given position to all blanks</span>
    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">&gt;</span> screens<span class="token punctuation">{</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// s is a reference to the Screen we want to clear</span>
    Screen <span class="token operator">&amp;</span>s <span class="token operator">=</span> screens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// reset the contents of that Screen to all blanks</span>
    s<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>一开始，首先把s定义成screens vector中第i个位置上的Screen的引<br> 用，随后利用Screen的height和width成员计算出一个新的string对象，并<br> 令其含有若干个空白字符，最后我们把这个含有很多空白的字符串赋给<br> contents成员。</p></li><li><p>如果clear不是Screen的友元，上面的代码将无法通过编译，因为此<br> 时clear将不能访问Screen的height、width和contents成员。而当Screen将<br> Window_mgr指定为其友元之后，Screen的所有成员对于Window_mgr就<br> 都变成可见的了。</p></li><li><p>必须要注意的一点是，友元关系不存在传递性。也就是说，如果<br> Window_mgr有它自己的友元，则这些友元并不能理所当然地具有访问<br> Screen的特权。</p></li><li><p><mark>每个类负责控制自己的友元类或友元函数。</mark></p></li></ul><br><ul><li><mark>令成员函数作为友元</mark></li><li>除了令整个Window_mgr作为友元之外，Screen还可以只为clear提<br> 供访问权限。当把一个成员函数声明成友元时，我们必须明确指出该成<br> 员函数属于哪个类：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
    <span class="token comment">// Window_mgr::clear must have been declared before class Screen</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... rest of the Screen class</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要想令某个成员函数作为友元，我们必须仔细组织程序的结构以满<br> 足声明和定义的彼此依赖关系。在这个例子中，我们必须按照如下方式<br> 设计程序：<br> · 首先定义Window_mgr类，其中声明clear函数，但是不能定义它。在clear使用Screen的成员之前必须先声明Screen。<br> · 接下来定义Screen，包括对于clear的友元声明。<br> · 最后定义clear，此时它才可以使用Screen的成员。</li></ul><br><ul><li><mark>函数重载和友元</mark></li><li>尽管重载函数的名字相同，但它们仍然是不同的函数。因此，如果<br> 一个类想把一组重载函数声明成它的友元，它需要对这组函数中的每一<br> 个分别声明：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// overloaded storeOn functions</span>
<span class="token keyword">extern</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">storeOn</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> Screen <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> BitMap<span class="token operator">&amp;</span> <span class="token function">storeOn</span><span class="token punctuation">(</span>BitMap <span class="token operator">&amp;</span><span class="token punctuation">,</span> Screen <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
    <span class="token comment">// ostream version of storeOn may access the private parts of Screen objects</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">storeOn</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> Screen <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// . . .</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Screen类把接受ostream&amp;的storeOn函数声明成它的友元，但是接受<br> BitMap&amp;作为参数的版本仍然不能访问Screen。</li></ul><br><ul><li><p><mark>友元声明和作用域</mark></p></li><li><p>类和非成员函数的声明不是必须在它们的友元声明之前。当一个名<br> 字第一次出现在一个友元声明中时，我们隐式地假定该名字在当前作用<br> 域中是可见的。然而，友元本身不一定真的声明在当前作用域中（参见<br> 7.2.1节，第241页）。</p></li><li><p>甚至就算在类的内部定义该函数，我们也必须在类的外部提供相应<br> 的声明从而使得函数可见。换句话说，即使我们仅仅是用声明友元的类<br> 的成员调用该友元函数，它也必须是被声明过的：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* friend function can be defined in the class body */</span> <span class="token punctuation">}</span>
    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// error: no declaration for f</span>
    <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// error: f hasn&#39;t been declared</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// declares the function defined inside X</span>
<span class="token keyword">void</span> <span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// ok: declaration for f is now in scope</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于这段代码最重要的是理解友元声明的作用是影响访问权限，它<br> 本身并非普通意义上的声明。</li><li>请注意，有的编译器并不强制执行上述关于友元的限定规则（参见7.2.1节，第241页）。</li></ul><h3 id="_7-3-4节练习" tabindex="-1"><a class="header-anchor" href="#_7-3-4节练习" aria-hidden="true">#</a> 7.3.4节练习</h3><ul><li>练习7.32：定义你自己的Screen和Window_mgr，其中clear是<br> Window_mgr的成员，是Screen的友元。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Window_mgr</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">using</span> ScreenIndex <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>
	<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">&gt;</span> screens<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Screen</span>
<span class="token punctuation">{</span>
	<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>

	<span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
	<span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	pos width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Screen<span class="token operator">&amp;</span> s <span class="token operator">=</span> screens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span>contents <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>height<span class="token operator">*</span>s<span class="token punctuation">.</span>width<span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	cursor <span class="token operator">=</span> r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-4-类的作用域" tabindex="-1"><a class="header-anchor" href="#_7-4-类的作用域" aria-hidden="true">#</a> 7.4　类的作用域</h2>`,223);function g(y,h){const a=c("router-link");return l(),i("div",null,[d,k,u(" more "),v,n("nav",m,[n("ul",null,[n("li",null,[p(a,{to:"#第7章-类"},{default:t(()=>[s("第7章　类")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-定义抽象数据类型"},{default:t(()=>[s("7.1　定义抽象数据类型")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#_7-1-1-设计sales-data类"},{default:t(()=>[s("7.1.1　设计Sales_data类")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-1节练习"},{default:t(()=>[s("7.1.1节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-2-定义改进的sales-data类"},{default:t(()=>[s("7.1.2　定义改进的Sales_data类")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-2节练习"},{default:t(()=>[s("7.1.2节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-3-定义类相关的非成员函数"},{default:t(()=>[s("7.1.3　定义类相关的非成员函数")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-3节练习"},{default:t(()=>[s("7.1.3节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-4-构造函数"},{default:t(()=>[s("7.1.4　构造函数")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-4节练习"},{default:t(()=>[s("7.1.4节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-1-5-拷贝、赋值和析构"},{default:t(()=>[s("7.1.5　拷贝、赋值和析构")]),_:1})])])]),n("li",null,[p(a,{to:"#_7-2-访问控制与封装"},{default:t(()=>[s("7.2　访问控制与封装")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#_7-2节练习"},{default:t(()=>[s("7.2节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-2-1-友元"},{default:t(()=>[s("7.2.1　友元")]),_:1})]),n("li",null,[p(a,{to:"#_7-2-1节练习"},{default:t(()=>[s("7.2.1节练习")]),_:1})])])]),n("li",null,[p(a,{to:"#_7-3-类的其他特性"},{default:t(()=>[s("7.3　类的其他特性")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#_7-3-1-类成员再探"},{default:t(()=>[s("7.3.1　类成员再探")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-1节练习"},{default:t(()=>[s("7.3.1节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-2-返回-this的成员函数"},{default:t(()=>[s("7.3.2　返回*this的成员函数")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-2节练习"},{default:t(()=>[s("7.3.2节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-3-类类型"},{default:t(()=>[s("7.3.3　类类型")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-3节练习"},{default:t(()=>[s("7.3.3节练习")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-4-友元再探"},{default:t(()=>[s("7.3.4　友元再探")]),_:1})]),n("li",null,[p(a,{to:"#_7-3-4节练习"},{default:t(()=>[s("7.3.4节练习")]),_:1})])])]),n("li",null,[p(a,{to:"#_7-4-类的作用域"},{default:t(()=>[s("7.4　类的作用域")]),_:1})])])]),b])}const _=o(r,[["render",g],["__file","I-第七章类.html.vue"]]);export{_ as default};
